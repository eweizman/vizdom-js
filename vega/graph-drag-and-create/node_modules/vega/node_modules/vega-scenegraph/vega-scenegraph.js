(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.vg || (g.vg = {})).scene = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// Matches absolute URLs with optional protocol
//   https://...    file://...    //...
var protocol_re = /^([A-Za-z]+:)?\/\//;

// Special treatment in node.js for the file: protocol
var fileProtocol = 'file://';

// Validate and cleanup URL to ensure that it is allowed to be accessed
// Returns cleaned up URL, or false if access is not allowed
function sanitizeUrl(opt) {
  var url = opt.url;
  if (!url && opt.file) { return fileProtocol + opt.file; }

  // In case this is a relative url (has no host), prepend opt.baseURL
  if (opt.baseURL && !protocol_re.test(url)) {
    if (!startsWith(url, '/') && opt.baseURL[opt.baseURL.length-1] !== '/') {
      url = '/' + url; // Ensure that there is a slash between the baseURL (e.g. hostname) and url
    }
    url = opt.baseURL + url;
  }
  // relative protocol, starts with '//'
  if (!load.useXHR && startsWith(url, '//')) {
    url = (opt.defaultProtocol || 'http') + ':' + url;
  }
  // If opt.domainWhiteList is set, only allows url, whose hostname
  // * Is the same as the origin (window.location.hostname)
  // * Equals one of the values in the whitelist
  // * Is a proper subdomain of one of the values in the whitelist
  if (opt.domainWhiteList) {
    var domain, origin;
    if (load.useXHR) {
      var a = document.createElement('a');
      a.href = url;
      // From http://stackoverflow.com/questions/736513/how-do-i-parse-a-url-into-hostname-and-path-in-javascript
      // IE doesn't populate all link properties when setting .href with a relative URL,
      // however .href will return an absolute URL which then can be used on itself
      // to populate these additional fields.
      if (a.host === '') {
        a.href = a.href;
      }
      domain = a.hostname.toLowerCase();
      origin = window.location.hostname;
    } else {
      // relative protocol is broken: https://github.com/defunctzombie/node-url/issues/5
      var parts = require('url').parse(url);
      domain = parts.hostname;
      origin = null;
    }

    if (origin !== domain) {
      var whiteListed = opt.domainWhiteList.some(function(d) {
        var idx = domain.length - d.length;
        return d === domain ||
          (idx > 1 && domain[idx-1] === '.' && domain.lastIndexOf(d) === idx);
      });
      if (!whiteListed) {
        throw 'URL is not whitelisted: ' + url;
      }
    }
  }
  return url;
}

function load(opt, callback) {
  var error = callback || function(e) { throw e; }, url;

  try {
    url = load.sanitizeUrl(opt); // enable override
  } catch (err) {
    error(err);
    return;
  }

  if (!url) {
    error('Invalid URL: ' + opt.url);
  } else if (load.useXHR) {
    // on client, use xhr
    return xhr(url, callback);
  } else if (startsWith(url, fileProtocol)) {
    // on server, if url starts with 'file://', strip it and load from file
    return file(url.slice(fileProtocol.length), callback);
  } else if (url.indexOf('://') < 0) { // TODO better protocol check?
    // on server, if no protocol assume file
    return file(url, callback);
  } else {
    // for regular URLs on server
    return http(url, callback);
  }
}

function xhrHasResponse(request) {
  var type = request.responseType;
  return type && type !== 'text' ?
    request.response : // null on error
    request.responseText; // '' on error
}

function xhr(url, callback) {
  var async = !!callback;
  var request = new XMLHttpRequest();
  // If IE does not support CORS, use XDomainRequest (copied from d3.xhr)
  if (this.XDomainRequest &&
      !('withCredentials' in request) &&
      /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();

  function respond() {
    var status = request.status;
    if (!status && xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
      callback(null, request.responseText);
    } else {
      callback(request, null);
    }
  }

  if (async) {
    if ('onload' in request) {
      request.onload = request.onerror = respond;
    } else {
      request.onreadystatechange = function() {
        if (request.readyState > 3) respond();
      };
    }
  }
  
  request.open('GET', url, async);
  request.send();
  
  if (!async && xhrHasResponse(request)) {
    return request.responseText;
  }
}

function file(filename, callback) {
  var fs = require('fs');
  if (!callback) {
    return fs.readFileSync(filename, 'utf8');
  }
  fs.readFile(filename, callback);
}

function http(url, callback) {
  if (!callback) {
    return require('sync-request')('GET', url).getBody();
  }
  
  var options = {url: url, encoding: null, gzip: true};
  require('request')(options, function(error, response, body) {
    if (!error && response.statusCode === 200) {
      callback(null, body);
    } else {
      error = error ||
        'Load failed with response code ' + response.statusCode + '.';
      callback(error, null);
    }
  });
}

function startsWith(string, searchString) {
  return string == null ? false : string.lastIndexOf(searchString, 0) === 0;
}

load.sanitizeUrl = sanitizeUrl;

load.useXHR = (typeof XMLHttpRequest !== 'undefined');

module.exports = load;

},{"fs":1,"request":1,"sync-request":1,"url":1}],3:[function(require,module,exports){
module.exports = {
  path:       require('./path'),
  render:     require('./render'),
  Item:       require('./util/Item'),
  bound:      require('./util/bound'),
  Bounds:     require('./util/Bounds'),
  canvas:     require('./util/canvas'),
  Gradient:   require('./util/Gradient'),
  toJSON:     require('./util/scene').toJSON,
  fromJSON:   require('./util/scene').fromJSON
};
},{"./path":5,"./render":25,"./util/Bounds":31,"./util/Gradient":33,"./util/Item":35,"./util/bound":36,"./util/canvas":37,"./util/scene":39}],4:[function(require,module,exports){
var segmentCache = {},
    bezierCache = {},
    join = [].join;

// Copied from Inkscape svgtopdf, thanks!
function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
  var key = join.call(arguments);
  if (segmentCache[key]) {
    return segmentCache[key];
  }

  var th = rotateX * (Math.PI/180);
  var sin_th = Math.sin(th);
  var cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
  var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
  var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);
  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }

  var a00 = cos_th / rx;
  var a01 = sin_th / rx;
  var a10 = (-sin_th) / ry;
  var a11 = (cos_th) / ry;
  var x0 = a00 * ox + a01 * oy;
  var y0 = a10 * ox + a11 * oy;
  var x1 = a00 * x + a01 * y;
  var y1 = a10 * x + a11 * y;

  var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);
  var sfactor_sq = 1 / d - 0.25;
  if (sfactor_sq < 0) sfactor_sq = 0;
  var sfactor = Math.sqrt(sfactor_sq);
  if (sweep == large) sfactor = -sfactor;
  var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);
  var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);

  var th0 = Math.atan2(y0-yc, x0-xc);
  var th1 = Math.atan2(y1-yc, x1-xc);

  var th_arc = th1-th0;
  if (th_arc < 0 && sweep === 1){
    th_arc += 2 * Math.PI;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= 2 * Math.PI;
  }

  var segs = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
  var result = [];
  for (var i=0; i<segs; ++i) {
    var th2 = th0 + i * th_arc / segs;
    var th3 = th0 + (i+1) * th_arc / segs;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }

  return (segmentCache[key] = result);
}

function bezier(params) {
  var key = join.call(params);
  if (bezierCache[key]) {
    return bezierCache[key];
  }
  
  var cx = params[0],
      cy = params[1],
      th0 = params[2],
      th1 = params[3],
      rx = params[4],
      ry = params[5],
      sin_th = params[6],
      cos_th = params[7];

  var a00 = cos_th * rx;
  var a01 = -sin_th * ry;
  var a10 = sin_th * rx;
  var a11 = cos_th * ry;

  var cos_th0 = Math.cos(th0);
  var sin_th0 = Math.sin(th0);
  var cos_th1 = Math.cos(th1);
  var sin_th1 = Math.sin(th1);

  var th_half = 0.5 * (th1 - th0);
  var sin_th_h2 = Math.sin(th_half * 0.5);
  var t = (8/3) * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
  var x1 = cx + cos_th0 - t * sin_th0;
  var y1 = cy + sin_th0 + t * cos_th0;
  var x3 = cx + cos_th1;
  var y3 = cy + sin_th1;
  var x2 = x3 + t * sin_th1;
  var y2 = y3 - t * cos_th1;

  return (bezierCache[key] = [
    a00 * x1 + a01 * y1,  a10 * x1 + a11 * y1,
    a00 * x2 + a01 * y2,  a10 * x2 + a11 * y2,
    a00 * x3 + a01 * y3,  a10 * x3 + a11 * y3
  ]);
}

module.exports = {
  segments: segments,
  bezier: bezier,
  cache: {
    segments: segmentCache,
    bezier: bezierCache
  }
};

},{}],5:[function(require,module,exports){
module.exports = {
  parse:  require('./parse'),
  render: require('./render')
};

},{"./parse":6,"./render":7}],6:[function(require,module,exports){
// Path parsing and rendering code adapted from fabric.js -- Thanks!
var cmdlen = { m:2, l:2, h:1, v:1, c:6, s:4, q:4, t:2, a:7 },
    regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\d)([-+])/g, /\s|,|###/];

module.exports = function(pathstr) {
  var result = [],
      path,
      curr,
      chunks,
      parsed, param,
      cmd, len, i, j, n, m;

  // First, break path into command sequence
  path = pathstr
    .slice()
    .replace(regexp[0], '###$1')
    .split(regexp[1])
    .slice(1);

  // Next, parse each command in turn
  for (i=0, n=path.length; i<n; ++i) {
    curr = path[i];
    chunks = curr
      .slice(1)
      .trim()
      .replace(regexp[2],'$1###$2')
      .split(regexp[3]);
    cmd = curr.charAt(0);

    parsed = [cmd];
    for (j=0, m=chunks.length; j<m; ++j) {
      if ((param = +chunks[j]) === param) { // not NaN
        parsed.push(param);
      }
    }

    len = cmdlen[cmd.toLowerCase()];
    if (parsed.length-1 > len) {
      for (j=1, m=parsed.length; j<m; j+=len) {
        result.push([cmd].concat(parsed.slice(j, j+len)));
      }
    }
    else {
      result.push(parsed);
    }
  }

  return result;
};

},{}],7:[function(require,module,exports){
var arc = require('./arc');

module.exports = function(g, path, l, t) {
  var current, // current instruction
      previous = null,
      x = 0, // current x
      y = 0, // current y
      controlX = 0, // current control point x
      controlY = 0, // current control point y
      tempX,
      tempY,
      tempControlX,
      tempControlY;

  if (l == null) l = 0;
  if (t == null) t = 0;

  g.beginPath();

  for (var i=0, len=path.length; i<len; ++i) {
    current = path[i];

    switch (current[0]) { // first letter

      case 'l': // lineto, relative
        x += current[1];
        y += current[2];
        g.lineTo(x + l, y + t);
        break;

      case 'L': // lineto, absolute
        x = current[1];
        y = current[2];
        g.lineTo(x + l, y + t);
        break;

      case 'h': // horizontal lineto, relative
        x += current[1];
        g.lineTo(x + l, y + t);
        break;

      case 'H': // horizontal lineto, absolute
        x = current[1];
        g.lineTo(x + l, y + t);
        break;

      case 'v': // vertical lineto, relative
        y += current[1];
        g.lineTo(x + l, y + t);
        break;

      case 'V': // verical lineto, absolute
        y = current[1];
        g.lineTo(x + l, y + t);
        break;

      case 'm': // moveTo, relative
        x += current[1];
        y += current[2];
        g.moveTo(x + l, y + t);
        break;

      case 'M': // moveTo, absolute
        x = current[1];
        y = current[2];
        g.moveTo(x + l, y + t);
        break;

      case 'c': // bezierCurveTo, relative
        tempX = x + current[5];
        tempY = y + current[6];
        controlX = x + current[3];
        controlY = y + current[4];
        g.bezierCurveTo(
          x + current[1] + l, // x1
          y + current[2] + t, // y1
          controlX + l, // x2
          controlY + t, // y2
          tempX + l,
          tempY + t
        );
        x = tempX;
        y = tempY;
        break;

      case 'C': // bezierCurveTo, absolute
        x = current[5];
        y = current[6];
        controlX = current[3];
        controlY = current[4];
        g.bezierCurveTo(
          current[1] + l,
          current[2] + t,
          controlX + l,
          controlY + t,
          x + l,
          y + t
        );
        break;

      case 's': // shorthand cubic bezierCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[3];
        tempY = y + current[4];
        // calculate reflection of previous control points
        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        g.bezierCurveTo(
          controlX + l,
          controlY + t,
          x + current[1] + l,
          y + current[2] + t,
          tempX + l,
          tempY + t
        );

        // set control point to 2nd one of this command
        // the first control point is assumed to be the reflection of
        // the second control point on the previous command relative
        // to the current point.
        controlX = x + current[1];
        controlY = y + current[2];

        x = tempX;
        y = tempY;
        break;

      case 'S': // shorthand cubic bezierCurveTo, absolute
        tempX = current[3];
        tempY = current[4];
        // calculate reflection of previous control points
        controlX = 2*x - controlX;
        controlY = 2*y - controlY;
        g.bezierCurveTo(
          controlX + l,
          controlY + t,
          current[1] + l,
          current[2] + t,
          tempX + l,
          tempY + t
        );
        x = tempX;
        y = tempY;
        // set control point to 2nd one of this command
        // the first control point is assumed to be the reflection of
        // the second control point on the previous command relative
        // to the current point.
        controlX = current[1];
        controlY = current[2];

        break;

      case 'q': // quadraticCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[3];
        tempY = y + current[4];

        controlX = x + current[1];
        controlY = y + current[2];

        g.quadraticCurveTo(
          controlX + l,
          controlY + t,
          tempX + l,
          tempY + t
        );
        x = tempX;
        y = tempY;
        break;

      case 'Q': // quadraticCurveTo, absolute
        tempX = current[3];
        tempY = current[4];

        g.quadraticCurveTo(
          current[1] + l,
          current[2] + t,
          tempX + l,
          tempY + t
        );
        x = tempX;
        y = tempY;
        controlX = current[1];
        controlY = current[2];
        break;

      case 't': // shorthand quadraticCurveTo, relative

        // transform to absolute x,y
        tempX = x + current[1];
        tempY = y + current[2];

        if (previous[0].match(/[QqTt]/) === null) {
          // If there is no previous command or if the previous command was not a Q, q, T or t,
          // assume the control point is coincident with the current point
          controlX = x;
          controlY = y;
        }
        else if (previous[0] === 't') {
          // calculate reflection of previous control points for t
          controlX = 2 * x - tempControlX;
          controlY = 2 * y - tempControlY;
        }
        else if (previous[0] === 'q') {
          // calculate reflection of previous control points for q
          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
        }

        tempControlX = controlX;
        tempControlY = controlY;

        g.quadraticCurveTo(
          controlX + l,
          controlY + t,
          tempX + l,
          tempY + t
        );
        x = tempX;
        y = tempY;
        controlX = x + current[1];
        controlY = y + current[2];
        break;

      case 'T':
        tempX = current[1];
        tempY = current[2];

        // calculate reflection of previous control points
        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        g.quadraticCurveTo(
          controlX + l,
          controlY + t,
          tempX + l,
          tempY + t
        );
        x = tempX;
        y = tempY;
        break;

      case 'a':
        drawArc(g, x + l, y + t, [
          current[1],
          current[2],
          current[3],
          current[4],
          current[5],
          current[6] + x + l,
          current[7] + y + t
        ]);
        x += current[6];
        y += current[7];
        break;

      case 'A':
        drawArc(g, x + l, y + t, [
          current[1],
          current[2],
          current[3],
          current[4],
          current[5],
          current[6] + l,
          current[7] + t
        ]);
        x = current[6];
        y = current[7];
        break;

      case 'z':
      case 'Z':
        g.closePath();
        break;
    }
    previous = current;
  }
};

function drawArc(g, x, y, coords) {
  var seg = arc.segments(
    coords[5], // end x
    coords[6], // end y
    coords[0], // radius x
    coords[1], // radius y
    coords[3], // large flag
    coords[4], // sweep flag
    coords[2], // rotation
    x, y
  );
  for (var i=0; i<seg.length; ++i) {
    var bez = arc.bezier(seg[i]);
    g.bezierCurveTo.apply(g, bez);
  }
}

},{"./arc":4}],8:[function(require,module,exports){
function Handler() {
  this._active = null;
  this._handlers = {};
}

var prototype = Handler.prototype;

prototype.initialize = function(el, pad, obj) {
  this._el = el;
  this._obj = obj || null;
  return this.padding(pad);
};

prototype.element = function() {
  return this._el;
};

prototype.padding = function(pad) {
  this._padding = pad || {top:0, left:0, bottom:0, right:0};
  return this;
};

prototype.scene = function(scene) {
  if (!arguments.length) return this._scene;
  this._scene = scene;
  return this;
};

// add an event handler
// subclasses should override
prototype.on = function(/*type, handler*/) {};

// remove an event handler
// subclasses should override
prototype.off = function(/*type, handler*/) {};

// return an array with all registered event handlers
prototype.handlers = function() {
  var h = this._handlers, a = [], k;
  for (k in h) { a.push.apply(a, h[k]); }
  return a;
};

prototype.eventName = function(name) {
  var i = name.indexOf('.');
  return i < 0 ? name : name.slice(0,i);
};

module.exports = Handler;
},{}],9:[function(require,module,exports){
function Renderer() {
  this._el = null;
  this._bgcolor = null;
}

var prototype = Renderer.prototype;

prototype.initialize = function(el, width, height, padding) {
  this._el = el;
  return this.resize(width, height, padding);
};

// Returns the parent container element for a visualization
prototype.element = function() {
  return this._el;
};

// Returns the scene element (e.g., canvas or SVG) of the visualization
// Subclasses must override if the first child is not the scene element
prototype.scene = function() {
  return this._el && this._el.firstChild;
};

prototype.background = function(bgcolor) {
  if (arguments.length === 0) return this._bgcolor;
  this._bgcolor = bgcolor;
  return this;
};

prototype.resize = function(width, height, padding) {
  this._width = width;
  this._height = height;
  this._padding = padding || {top:0, left:0, bottom:0, right:0};
  return this;
};

prototype.render = function(/*scene, items*/) {
  return this;
};

module.exports = Renderer;
},{}],10:[function(require,module,exports){
var DOM = require('../../util/dom'),
    Handler = require('../Handler'),
    marks = require('./marks');

function CanvasHandler() {
  Handler.call(this);
  this._down = null;
  this._touch = null;
  this._first = true;
}

var base = Handler.prototype;
var prototype = (CanvasHandler.prototype = Object.create(base));
prototype.constructor = CanvasHandler;

prototype.initialize = function(el, pad, obj) {
  // add event listeners
  var canvas = this._canvas = DOM.find(el, 'canvas'),
      that = this;
  this.events.forEach(function(type) {
    canvas.addEventListener(type, function(evt) {
      if (prototype[type]) {
        prototype[type].call(that, evt);
      } else {
        that.fire(type, evt);
      }
    });
  });

  return base.initialize.call(this, el, pad, obj);
};

prototype.canvas = function() {
  return this._canvas;
};

// retrieve the current canvas context
prototype.context = function() {
  return this._canvas.getContext('2d');
};

// supported events
prototype.events = [
  'keydown',
  'keypress',
  'keyup',
  'mousedown',
  'mouseup',
  'mousemove',
  'mouseout',
  'mouseover',
  'click',
  'dblclick',
  'wheel',
  'mousewheel',
  'touchstart',
  'touchmove',
  'touchend'
];

// to keep firefox happy
prototype.DOMMouseScroll = function(evt) {
  this.fire('mousewheel', evt);
};

prototype.mousemove = function(evt) {
  var a = this._active,
      p = this.pickEvent(evt);

  if (p === a) {
    // active item and picked item are the same
    this.fire('mousemove', evt); // fire move
  } else {
    // active item and picked item are different
    this.fire('mouseout', evt);  // fire out for prior active item
    this._active = p;            // set new active item
    this.fire('mouseover', evt); // fire over for new active item
    this.fire('mousemove', evt); // fire move for new active item
  }
};

prototype.mouseout = function(evt) {
  this.fire('mouseout', evt);
  this._active = null;
};

prototype.mousedown = function(evt) {
  this._down = this._active;
  this.fire('mousedown', evt);
};

prototype.click = function(evt) {
  if (this._down === this._active) {
    this.fire('click', evt);
    this._down = null;
  }
};

prototype.touchstart = function(evt) {
  this._touch = this.pickEvent(evt.changedTouches[0]);

  if (this._first) {
    this._active = this._touch;
    this._first = false;
  }

  this.fire('touchstart', evt, true);
};

prototype.touchmove = function(evt) {
  this.fire('touchmove', evt, true);
};

prototype.touchend = function(evt) {
  this.fire('touchend', evt, true);
  this._touch = null;
};

// fire an event
prototype.fire = function(type, evt, touch) {
  var a = touch ? this._touch : this._active,
      h = this._handlers[type], i, len;
  if (h) {
    evt.vegaType = type;
    for (i=0, len=h.length; i<len; ++i) {
      h[i].handler.call(this._obj, evt, a);
    }
  }
};

// add an event handler
prototype.on = function(type, handler) {
  var name = this.eventName(type),
      h = this._handlers;
  (h[name] || (h[name] = [])).push({
    type: type,
    handler: handler
  });
  return this;
};

// remove an event handler
prototype.off = function(type, handler) {
  var name = this.eventName(type),
      h = this._handlers[name], i;
  if (!h) return;
  for (i=h.length; --i>=0;) {
    if (h[i].type !== type) continue;
    if (!handler || h[i].handler === handler) h.splice(i, 1);
  }
  return this;
};

prototype.pickEvent = function(evt) {
  var rect = this._canvas.getBoundingClientRect(),
      pad = this._padding, x, y;
  return this.pick(this._scene,
    x = (evt.clientX - rect.left),
    y = (evt.clientY - rect.top),
    x - pad.left, y - pad.top);
};

// find the scenegraph item at the current mouse position
// x, y -- the absolute x, y mouse coordinates on the canvas element
// gx, gy -- the relative coordinates within the current group
prototype.pick = function(scene, x, y, gx, gy) {
  var g = this.context(),
      mark = marks[scene.marktype];
  return mark.pick.call(this, g, scene, x, y, gx, gy);
};

module.exports = CanvasHandler;

},{"../../util/dom":38,"../Handler":8,"./marks":17}],11:[function(require,module,exports){
var DOM = require('../../util/dom'),
    Bounds = require('../../util/Bounds'),
    ImageLoader = require('../../util/ImageLoader'),
    Canvas = require('../../util/canvas'),
    Renderer = require('../Renderer'),
    marks = require('./marks');

function CanvasRenderer(loadConfig) {
  Renderer.call(this);
  this._loader = new ImageLoader(loadConfig);
}

CanvasRenderer.RETINA = true;

var base = Renderer.prototype;
var prototype = (CanvasRenderer.prototype = Object.create(base));
prototype.constructor = CanvasRenderer;

prototype.initialize = function(el, width, height, padding) {
  this._canvas = Canvas.instance(width, height);
  if (el) {
    DOM.clear(el, 0).appendChild(this._canvas);
    this._canvas.setAttribute('class', 'marks');
  }
  return base.initialize.call(this, el, width, height, padding);
};

prototype.resize = function(width, height, padding) {
  base.resize.call(this, width, height, padding);
  Canvas.resize(this._canvas, this._width, this._height,
    this._padding, CanvasRenderer.RETINA);
  return this;
};

prototype.canvas = function() {
  return this._canvas;
};

prototype.context = function() {
  return this._canvas ? this._canvas.getContext('2d') : null;
};

prototype.pendingImages = function() {
  return this._loader.pending();
};

function clipToBounds(g, items) {
  if (!items) return null;

  var b = new Bounds(), i, n, item, mark, group;
  for (i=0, n=items.length; i<n; ++i) {
    item = items[i];
    mark = item.mark;
    group = mark.group;
    item = marks[mark.marktype].nested ? mark : item;
    b.union(translate(item.bounds, group));
    if (item['bounds:prev']) {
      b.union(translate(item['bounds:prev'], group));
    }
  }
  b.round();

  g.beginPath();
  g.rect(b.x1, b.y1, b.width(), b.height());
  g.clip();

  return b;
}

function translate(bounds, group) {
  if (group == null) return bounds;
  var b = bounds.clone();
  for (; group != null; group = group.mark.group) {
    b.translate(group.x || 0, group.y || 0);
  }
  return b;
}

prototype.render = function(scene, items) {
  var g = this.context(),
      p = this._padding,
      w = this._width + p.left + p.right,
      h = this._height + p.top + p.bottom,
      b;

  // setup
  this._scene = scene; // cache scene for async redraw
  g.save();
  b = clipToBounds(g, items);
  this.clear(-p.left, -p.top, w, h);

  // render
  this.draw(g, scene, b);
  
  // takedown
  g.restore();
  this._scene = null; // clear scene cache

  return this;
};

prototype.draw = function(ctx, scene, bounds) {
  var mark = marks[scene.marktype];
  mark.draw.call(this, ctx, scene, bounds);
};

prototype.clear = function(x, y, w, h) {
  var g = this.context();
  g.clearRect(x, y, w, h);
  if (this._bgcolor != null) {
    g.fillStyle = this._bgcolor;
    g.fillRect(x, y, w, h); 
  }
};

prototype.loadImage = function(uri) {
  var renderer = this,
      scene = this._scene;
  return this._loader.loadImage(uri, function() {
    renderer.renderAsync(scene);
  });
};

prototype.renderAsync = function(scene) {
  // TODO make safe for multiple scene rendering?
  var renderer = this;
  if (renderer._async_id) {
    clearTimeout(renderer._async_id);
  }
  renderer._async_id = setTimeout(function() {
    renderer.render(scene);
    delete renderer._async_id;
  }, 10);
};

module.exports = CanvasRenderer;

},{"../../util/Bounds":31,"../../util/ImageLoader":34,"../../util/canvas":37,"../../util/dom":38,"../Renderer":9,"./marks":17}],12:[function(require,module,exports){
module.exports = {
  Handler:  require('./CanvasHandler'),
  Renderer: require('./CanvasRenderer')
};
},{"./CanvasHandler":10,"./CanvasRenderer":11}],13:[function(require,module,exports){
var util = require('./util');
var halfpi = Math.PI / 2;

function path(g, o) {
  var x = o.x || 0,
      y = o.y || 0,
      ir = o.innerRadius || 0,
      or = o.outerRadius || 0,
      sa = (o.startAngle || 0) - halfpi,
      ea = (o.endAngle || 0) - halfpi;
  g.beginPath();
  if (ir === 0) g.moveTo(x, y);
  else g.arc(x, y, ir, sa, ea, 0);
  g.arc(x, y, or, ea, sa, 1);
  g.closePath();
}

module.exports = {
  draw: util.drawAll(path),
  pick: util.pickPath(path)
};
},{"./util":24}],14:[function(require,module,exports){
var util = require('./util'),
    parse = require('../../../path/parse'),
    render = require('../../../path/render'),
    areaPath = require('../../../util/svg').path.area;

function path(g, items) {
  var o = items[0],
      p = o.pathCache || (o.pathCache = parse(areaPath(items)));
  render(g, p);
}

function pick(g, scene, x, y, gx, gy) {
  var items = scene.items,
      b = scene.bounds;

  if (!items || !items.length || b && !b.contains(gx, gy)) {
    return null;
  }

  if (g.pixelratio != null && g.pixelratio !== 1) {
    x *= g.pixelratio;
    y *= g.pixelratio;
  }
  return hit(g, items, x, y) ? items[0] : null;
}

var hit = util.testPath(path);

module.exports = {
  draw: util.drawOne(path),
  pick: pick,
  nested: true
};

},{"../../../path/parse":6,"../../../path/render":7,"../../../util/svg":40,"./util":24}],15:[function(require,module,exports){
var util = require('./util'),
    rect = require('./rect');

function draw(g, scene, bounds) {
  if (!scene.items || !scene.items.length) return;

  var groups = scene.items,
      renderer = this,
      group, items, axes, legends, gx, gy, i, n, j, m;

  rect.draw.call(renderer, g, scene, bounds);

  for (i=0, n=groups.length; i<n; ++i) {
    group = groups[i];
    axes = group.axisItems || [];
    items = group.items || [];
    legends = group.legendItems || [];
    gx = group.x || 0;
    gy = group.y || 0;

    // render group contents
    g.save();
    g.translate(gx, gy);
    if (group.clip) {
      g.beginPath();
      g.rect(0, 0, group.width || 0, group.height || 0);
      g.clip();
    }

    if (bounds) bounds.translate(-gx, -gy);

    for (j=0, m=axes.length; j<m; ++j) {
      if (axes[j].layer === 'back') {
        renderer.draw(g, axes[j], bounds);
      }
    }
    for (j=0, m=items.length; j<m; ++j) {
      renderer.draw(g, items[j], bounds);
    }
    for (j=0, m=axes.length; j<m; ++j) {
      if (axes[j].layer !== 'back') {
        renderer.draw(g, axes[j], bounds);
      }
    }
    for (j=0, m=legends.length; j<m; ++j) {
      renderer.draw(g, legends[j], bounds);
    }
    
    if (bounds) bounds.translate(gx, gy);
    g.restore();
  }    
}

function hit(g, o) {
  return o.fill || o.stroke;
}

function pick(g, scene, x, y, gx, gy) {
  if (scene.bounds && !scene.bounds.contains(gx, gy)) {
    return null;
  }
  var items = scene.items || [],
      subscene, group, hits, dx, dy, i, j;

  for (i=items.length; --i>=0;) {
    group = items[i];
    dx = group.x || 0;
    dy = group.y || 0;

    g.save();
    g.translate(dx, dy);
    for (j=group.items.length; --j >= 0;) {
      subscene = group.items[j];
      if (subscene.interactive === false) continue;
      hits = this.pick(subscene, x, y, gx-dx, gy-dy);
      if (hits) {
        g.restore();
        return hits;
      }
    }
    g.restore();
  }

  return scene.interactive !== false ? pickSelf(g, scene, x, y, gx, gy) : null;
}

var pickSelf = util.pick(hit);

module.exports = {
  draw: draw,
  pick: pick
};

},{"./rect":20,"./util":24}],16:[function(require,module,exports){
var util = require('./util');

function draw(g, scene, bounds) {
  if (!scene.items || !scene.items.length) return;

  var renderer = this,
      items = scene.items, o;

  for (var i=0, len=items.length; i<len; ++i) {
    o = items[i];
    if (bounds && !bounds.intersects(o.bounds))
      continue; // bounds check

    if (!(o.image && o.image.url === o.url)) {
      o.image = renderer.loadImage(o.url);
      o.image.url = o.url;
    }

    var x = o.x || 0,
        y = o.y || 0,
        w = o.width || (o.image && o.image.width) || 0,
        h = o.height || (o.image && o.image.height) || 0,
        opac;
    x = x - (o.align==='center' ? w/2 : o.align==='right' ? w : 0);
    y = y - (o.baseline==='middle' ? h/2 : o.baseline==='bottom' ? h : 0);

    if (o.image.loaded) {
      g.globalAlpha = (opac = o.opacity) != null ? opac : 1;
      g.drawImage(o.image, x, y, w, h);
    }
  }
}

module.exports = {
  draw: draw,
  pick: util.pick()
};
},{"./util":24}],17:[function(require,module,exports){
module.exports = {
  arc:    require('./arc'),
  area:   require('./area'),
  group:  require('./group'),
  image:  require('./image'),
  line:   require('./line'),
  path:   require('./path'),
  rect:   require('./rect'),
  rule:   require('./rule'),
  symbol: require('./symbol'),
  text:   require('./text')
};

},{"./arc":13,"./area":14,"./group":15,"./image":16,"./line":18,"./path":19,"./rect":20,"./rule":21,"./symbol":22,"./text":23}],18:[function(require,module,exports){
var util = require('./util'),
    parse = require('../../../path/parse'),
    render = require('../../../path/render'),
    linePath = require('../../../util/svg').path.line;
    
function path(g, items) {
  var o = items[0],
      p = o.pathCache || (o.pathCache = parse(linePath(items)));
  render(g, p);
}

function pick(g, scene, x, y, gx, gy) {
  var items = scene.items,
      b = scene.bounds;

  if (!items || !items.length || b && !b.contains(gx, gy)) {
    return null;
  }

  if (g.pixelratio != null && g.pixelratio !== 1) {
    x *= g.pixelratio;
    y *= g.pixelratio;
  }
  return hit(g, items, x, y) ? items[0] : null;
}

var hit = util.testPath(path, false);

module.exports = {
  draw: util.drawOne(path),
  pick: pick,
  nested: true
};

},{"../../../path/parse":6,"../../../path/render":7,"../../../util/svg":40,"./util":24}],19:[function(require,module,exports){
var util = require('./util'),
    parse = require('../../../path/parse'),
    render = require('../../../path/render');

function path(g, o) {
  if (o.path == null) return true;
  var p = o.pathCache || (o.pathCache = parse(o.path));
  render(g, p, o.x, o.y);
}

module.exports = {
  draw: util.drawAll(path),
  pick: util.pickPath(path)
};

},{"../../../path/parse":6,"../../../path/render":7,"./util":24}],20:[function(require,module,exports){
var util = require('./util');

function draw(g, scene, bounds) {
  if (!scene.items || !scene.items.length) return;

  var items = scene.items,
      o, opac, x, y, w, h;

  for (var i=0, len=items.length; i<len; ++i) {
    o = items[i];
    if (bounds && !bounds.intersects(o.bounds))
      continue; // bounds check

    opac = o.opacity == null ? 1 : o.opacity;
    if (opac === 0) continue;

    x = o.x || 0;
    y = o.y || 0;
    w = o.width || 0;
    h = o.height || 0;

    if (o.fill && util.fill(g, o, opac)) {
      g.fillRect(x, y, w, h);
    }
    if (o.stroke && util.stroke(g, o, opac)) {
      g.strokeRect(x, y, w, h);
    }
  }
}

module.exports = {
  draw: draw,
  pick: util.pick()
};
},{"./util":24}],21:[function(require,module,exports){
var util = require('./util');

function draw(g, scene, bounds) {
  if (!scene.items || !scene.items.length) return;

  var items = scene.items,
      o, opac, x1, y1, x2, y2;

  for (var i=0, len=items.length; i<len; ++i) {
    o = items[i];
    if (bounds && !bounds.intersects(o.bounds))
      continue; // bounds check

    opac = o.opacity == null ? 1 : o.opacity;
    if (opac === 0) continue;
      
    x1 = o.x || 0;
    y1 = o.y || 0;
    x2 = o.x2 != null ? o.x2 : x1;
    y2 = o.y2 != null ? o.y2 : y1;

    if (o.stroke && util.stroke(g, o, opac)) {
      g.beginPath();
      g.moveTo(x1, y1);
      g.lineTo(x2, y2);
      g.stroke();
    }
  }
}

function stroke(g, o) {
  var x1 = o.x || 0,
      y1 = o.y || 0,
      x2 = o.x2 != null ? o.x2 : x1,
      y2 = o.y2 != null ? o.y2 : y1,
      lw = o.strokeWidth,
      lc = o.strokeCap;

  g.lineWidth = lw != null ? lw : 1;
  g.lineCap   = lc != null ? lc : 'butt';
  g.beginPath();
  g.moveTo(x1, y1);
  g.lineTo(x2, y2);
}

function hit(g, o, x, y) {
  if (!g.isPointInStroke) return false;
  stroke(g, o);
  return g.isPointInStroke(x, y);
}

module.exports = {
  draw: draw,
  pick: util.pick(hit)
};

},{"./util":24}],22:[function(require,module,exports){
var util = require('./util');

var sqrt3 = Math.sqrt(3),
    tan30 = Math.tan(30 * Math.PI / 180);

function path(g, o) {
  var size = o.size != null ? o.size : 100,
      x = o.x, y = o.y, r, t, rx, ry;

  g.beginPath();

  if (o.shape == null || o.shape === 'circle') {
    r = Math.sqrt(size / Math.PI);
    g.arc(x, y, r, 0, 2*Math.PI, 0);
    g.closePath();
    return;
  }

  switch (o.shape) {
    case 'cross':
      r = Math.sqrt(size / 5) / 2;
      t = 3*r;
      g.moveTo(x-t, y-r);
      g.lineTo(x-r, y-r);
      g.lineTo(x-r, y-t);
      g.lineTo(x+r, y-t);
      g.lineTo(x+r, y-r);
      g.lineTo(x+t, y-r);
      g.lineTo(x+t, y+r);
      g.lineTo(x+r, y+r);
      g.lineTo(x+r, y+t);
      g.lineTo(x-r, y+t);
      g.lineTo(x-r, y+r);
      g.lineTo(x-t, y+r);
      break;

    case 'diamond':
      ry = Math.sqrt(size / (2 * tan30));
      rx = ry * tan30;
      g.moveTo(x, y-ry);
      g.lineTo(x+rx, y);
      g.lineTo(x, y+ry);
      g.lineTo(x-rx, y);
      break;

    case 'square':
      t = Math.sqrt(size);
      r = t / 2;
      g.rect(x-r, y-r, t, t);
      break;

    case 'triangle-down':
      rx = Math.sqrt(size / sqrt3);
      ry = rx * sqrt3 / 2;
      g.moveTo(x, y+ry);
      g.lineTo(x+rx, y-ry);
      g.lineTo(x-rx, y-ry);
      break;

    case 'triangle-up':
      rx = Math.sqrt(size / sqrt3);
      ry = rx * sqrt3 / 2;
      g.moveTo(x, y-ry);
      g.lineTo(x+rx, y+ry);
      g.lineTo(x-rx, y+ry);
  }
  g.closePath();
}

module.exports = {
  draw: util.drawAll(path),
  pick: util.pickPath(path)
};
},{"./util":24}],23:[function(require,module,exports){
var Bounds = require('../../../util/Bounds'),
    textBounds = require('../../../util/bound').text,
    text = require('../../../util/text'),
    util = require('./util'),
    tempBounds = new Bounds();

function draw(g, scene, bounds) {
  if (!scene.items || !scene.items.length) return;

  var items = scene.items,
      o, opac, x, y, r, t, str;

  for (var i=0, len=items.length; i<len; ++i) {
    o = items[i];
    if (bounds && !bounds.intersects(o.bounds))
      continue; // bounds check

    str = text.value(o.text);
    if (!str) continue;
    opac = o.opacity == null ? 1 : o.opacity;
    if (opac === 0) continue;

    g.font = text.font(o);
    g.textAlign = o.align || 'left';

    x = (o.x || 0);
    y = (o.y || 0);
    if ((r = o.radius)) {
      t = (o.theta || 0) - Math.PI/2;
      x += r * Math.cos(t);
      y += r * Math.sin(t);
    }

    if (o.angle) {
      g.save();
      g.translate(x, y);
      g.rotate(o.angle * Math.PI/180);
      x = y = 0; // reset x, y
    }
    x += (o.dx || 0);
    y += (o.dy || 0) + text.offset(o);

    if (o.fill && util.fill(g, o, opac)) {
      g.fillText(str, x, y);
    }
    if (o.stroke && util.stroke(g, o, opac)) {
      g.strokeText(str, x, y);
    }
    if (o.angle) g.restore();
  }
}

function hit(g, o, x, y, gx, gy) {
  if (o.fontSize <= 0) return false;
  if (!o.angle) return true; // bounds sufficient if no rotation

  // project point into space of unrotated bounds
  var b = textBounds(o, tempBounds, true),
      a = -o.angle * Math.PI / 180,
      cos = Math.cos(a),
      sin = Math.sin(a),
      ox = o.x,
      oy = o.y,
      px = cos*gx - sin*gy + (ox - ox*cos + oy*sin),
      py = sin*gx + cos*gy + (oy - ox*sin - oy*cos);

  return b.contains(px, py);
}

module.exports = {
  draw: draw,
  pick: util.pick(hit)
};

},{"../../../util/Bounds":31,"../../../util/bound":36,"../../../util/text":41,"./util":24}],24:[function(require,module,exports){
function drawPathOne(path, g, o, items) {
  if (path(g, items)) return;

  var opac = o.opacity == null ? 1 : o.opacity;
  if (opac===0) return;

  if (o.fill && fill(g, o, opac)) { g.fill(); }
  if (o.stroke && stroke(g, o, opac)) { g.stroke(); }
}

function drawPathAll(path, g, scene, bounds) {
  var i, len, item;
  for (i=0, len=scene.items.length; i<len; ++i) {
    item = scene.items[i];
    if (!bounds || bounds.intersects(item.bounds)) {
      drawPathOne(path, g, item, item);
    }
  }
}

function drawAll(pathFunc) {
  return function(g, scene, bounds) {
    drawPathAll(pathFunc, g, scene, bounds);
  };
}

function drawOne(pathFunc) {
  return function(g, scene, bounds) {
    if (!scene.items.length) return;
    if (!bounds || bounds.intersects(scene.bounds)) {
      drawPathOne(pathFunc, g, scene.items[0], scene.items);
    }
  };
}

var trueFunc = function() { return true; };

function pick(test) {
  if (!test) test = trueFunc;

  return function(g, scene, x, y, gx, gy) {
    if (!scene.items.length) return null;

    var o, b, i;

    if (g.pixelratio != null && g.pixelratio !== 1) {
      x *= g.pixelratio;
      y *= g.pixelratio;
    }

    for (i=scene.items.length; --i >= 0;) {
      o = scene.items[i]; b = o.bounds;
      // first hit test against bounding box
      if ((b && !b.contains(gx, gy)) || !b) continue;
      // if in bounding box, perform more careful test
      if (test(g, o, x, y, gx, gy)) return o;
    }
    return null;
  };
}

function testPath(path, filled) {
  return function(g, o, x, y) {
    var item = Array.isArray(o) ? o[0] : o,
        fill = (filled == null) ? item.fill : filled,
        stroke = item.stroke && g.isPointInStroke, lw, lc;

    if (stroke) {
      lw = item.strokeWidth;
      lc = item.strokeCap;
      g.lineWidth = lw != null ? lw : 1;
      g.lineCap   = lc != null ? lc : 'butt';
    }

    return path(g, o) ? false :
      (fill && g.isPointInPath(x, y)) ||
      (stroke && g.isPointInStroke(x, y));
  };
}

function pickPath(path) {
  return pick(testPath(path));
}

function fill(g, o, opacity) {
  opacity *= (o.fillOpacity==null ? 1 : o.fillOpacity);
  if (opacity > 0) {
    g.globalAlpha = opacity;
    g.fillStyle = color(g, o, o.fill);
    return true;
  } else {
    return false;
  }
}

function stroke(g, o, opacity) {
  var lw = (lw = o.strokeWidth) != null ? lw : 1, lc;
  if (lw <= 0) return false;

  opacity *= (o.strokeOpacity==null ? 1 : o.strokeOpacity);
  if (opacity > 0) {
    g.globalAlpha = opacity;
    g.strokeStyle = color(g, o, o.stroke);
    g.lineWidth = lw;
    g.lineCap = (lc = o.strokeCap) != null ? lc : 'butt';
    g.vgLineDash(o.strokeDash || null);
    g.vgLineDashOffset(o.strokeDashOffset || 0);
    return true;
  } else {
    return false;
  }
}

function color(g, o, value) {
  return (value.id) ?
    gradient(g, value, o.bounds) :
    value;
}

function gradient(g, p, b) {
  var w = b.width(),
      h = b.height(),
      x1 = b.x1 + p.x1 * w,
      y1 = b.y1 + p.y1 * h,
      x2 = b.x1 + p.x2 * w,
      y2 = b.y1 + p.y2 * h,
      grad = g.createLinearGradient(x1, y1, x2, y2),
      stop = p.stops,
      i, n;

  for (i=0, n=stop.length; i<n; ++i) {
    grad.addColorStop(stop[i].offset, stop[i].color);
  }
  return grad;
}

module.exports = {
  drawOne:  drawOne,
  drawAll:  drawAll,
  pick:     pick,
  pickPath: pickPath,
  testPath: testPath,
  stroke:   stroke,
  fill:     fill,
  color:    color,
  gradient: gradient
};

},{}],25:[function(require,module,exports){
module.exports = {
  'canvas': require('./canvas'),
  'svg':    require('./svg')
};

},{"./canvas":12,"./svg":29}],26:[function(require,module,exports){
var DOM = require('../../util/dom'),
    Handler = require('../Handler');

function SVGHandler() {
  Handler.call(this);
}

var base = Handler.prototype;
var prototype = (SVGHandler.prototype = Object.create(base));
prototype.constructor = SVGHandler;

prototype.initialize = function(el, pad, obj) {
  this._svg = DOM.find(el, 'svg');
  return base.initialize.call(this, el, pad, obj);
};

prototype.svg = function() {
  return this._svg;
};

// wrap an event listener for the SVG DOM
prototype.listener = function(handler) {
  var that = this;
  return function(evt) {
    var target = evt.target,
        item = target.__data__;
    evt.vegaType = evt.type;
    item = Array.isArray(item) ? item[0] : item;
    handler.call(that._obj, evt, item);
  };
};

// add an event handler
prototype.on = function(type, handler) {
  var name = this.eventName(type),
      svg = this._svg,
      h = this._handlers,
      x = {
        type:     type,
        handler:  handler,
        listener: this.listener(handler)
      };

  (h[name] || (h[name] = [])).push(x);
  svg.addEventListener(name, x.listener);
  return this;
};

// remove an event handler
prototype.off = function(type, handler) {
  var name = this.eventName(type),
      svg = this._svg,
      h = this._handlers[name], i;
  if (!h) return;
  for (i=h.length; --i>=0;) {
    if (h[i].type === type && !handler || h[i].handler === handler) {
      svg.removeEventListener(name, h[i].listener);
      h.splice(i, 1);
    }
  }
  return this;
};

module.exports = SVGHandler;

},{"../../util/dom":38,"../Handler":8}],27:[function(require,module,exports){
var ImageLoader = require('../../util/ImageLoader'),
    Renderer = require('../Renderer'),
    text = require('../../util/text'),
    DOM = require('../../util/dom'),
    SVG = require('../../util/svg'),
    ns = SVG.metadata.xmlns,
    marks = require('./marks');

function SVGRenderer(loadConfig) {
  Renderer.call(this);
  this._loader = new ImageLoader(loadConfig);
  this._dirtyID = 0;
}

var base = Renderer.prototype;
var prototype = (SVGRenderer.prototype = Object.create(base));
prototype.constructor = SVGRenderer;

prototype.initialize = function(el, width, height, padding) {
  if (el) {
    this._svg = DOM.child(el, 0, 'svg', ns, 'marks');
    DOM.clear(el, 1);
    // set the svg root group
    this._root = DOM.child(this._svg, 0, 'g', ns);
    DOM.clear(this._svg, 1);
  }

  // create the svg definitions cache
  this._defs = {
    clip_id:  1,
    gradient: {},
    clipping: {}
  };

  // set background color if defined
  this.background(this._bgcolor);

  return base.initialize.call(this, el, width, height, padding);
};

prototype.background = function(bgcolor) {
  if (arguments.length && this._svg) {
    this._svg.style.setProperty('background-color', bgcolor);
  }
  return base.background.apply(this, arguments);
};

prototype.resize = function(width, height, padding) {
  base.resize.call(this, width, height, padding);
  
  if (this._svg) {
    var w = this._width,
        h = this._height,
        p = this._padding;
  
    this._svg.setAttribute('width', w + p.left + p.right);
    this._svg.setAttribute('height', h + p.top + p.bottom);
    
    this._root.setAttribute('transform', 'translate('+p.left+','+p.top+')');
  }

  return this;
};

prototype.svg = function() {
  if (!this._svg) return null;

  var attr = {
    'class':  'marks',
    'width':  this._width + this._padding.left + this._padding.right,
    'height': this._height + this._padding.top + this._padding.bottom,
  };
  for (var key in SVG.metadata) {
    attr[key] = SVG.metadata[key];
  }

  return DOM.openTag('svg', attr) + this._svg.innerHTML + DOM.closeTag('svg');
};

prototype.imageURL = function(url) {
  return this._loader.imageURL(url);
};


// -- Render entry point --

prototype.render = function(scene, items) {
  if (this._dirtyCheck(items)) {
    if (this._dirtyAll) this._resetDefs();
    this.draw(this._root, scene, -1);
    DOM.clear(this._root, 1);
  }
  this.updateDefs();
  return this;
};

prototype.draw = function(el, scene, index) {
  this.drawMark(el, scene, index, marks[scene.marktype]);
};


// -- Manage SVG definitions ('defs') block --

prototype.updateDefs = function() {
  var svg = this._svg,
      defs = this._defs,
      el = defs.el,
      index = 0, id;

  for (id in defs.gradient) {
    if (!el) el = (defs.el = DOM.child(svg, 0, 'defs', ns));
    updateGradient(el, defs.gradient[id], index++);
  }

  for (id in defs.clipping) {
    if (!el) el = (defs.el = DOM.child(svg, 0, 'defs', ns));
    updateClipping(el, defs.clipping[id], index++);
  }

  // clean-up
  if (el) {
    if (index === 0) {
      svg.removeChild(el);
      defs.el = null;
    } else {
      DOM.clear(el, index);      
    }
  }
};

function updateGradient(el, grad, index) {
  var i, n, stop;

  el = DOM.child(el, index, 'linearGradient', ns);
  el.setAttribute('id', grad.id);
  el.setAttribute('x1', grad.x1);
  el.setAttribute('x2', grad.x2);
  el.setAttribute('y1', grad.y1);
  el.setAttribute('y2', grad.y2);
  
  for (i=0, n=grad.stops.length; i<n; ++i) {
    stop = DOM.child(el, i, 'stop', ns);
    stop.setAttribute('offset', grad.stops[i].offset);
    stop.setAttribute('stop-color', grad.stops[i].color);
  }
  DOM.clear(el, i);
}

function updateClipping(el, clip, index) {
  var rect;

  el = DOM.child(el, index, 'clipPath', ns);
  el.setAttribute('id', clip.id);
  rect = DOM.child(el, 0, 'rect', ns);
  rect.setAttribute('x', 0);
  rect.setAttribute('y', 0);
  rect.setAttribute('width', clip.width);
  rect.setAttribute('height', clip.height);
}

prototype._resetDefs = function() {
  var def = this._defs;
  def.clip_id = 1;
  def.gradient = {};
  def.clipping = {};
};


// -- Manage rendering of items marked as dirty --

prototype.isDirty = function(item) {
  return this._dirtyAll || item.dirty === this._dirtyID;
};

prototype._dirtyCheck = function(items) {
  this._dirtyAll = true;
  if (!items) return true;

  var id = ++this._dirtyID,
      item, mark, type, mdef, i, n, o;

  for (i=0, n=items.length; i<n; ++i) {
    item = items[i];
    mark = item.mark;
    if (mark.marktype !== type) {
      // memoize mark instance lookup
      type = mark.marktype;
      mdef = marks[type];
    }

    if (item.status === 'exit') { // EXIT
      if (item._svg) {
        if (mdef.nest && item.mark.items.length) {
          // if nested mark with remaining points, update instead
          this._update(mdef, item._svg, item.mark.items[0]);
          o = item.mark.items[0];
          o._svg = item._svg;
          o._update = id;
        } else {
          // otherwise remove from DOM
          DOM.remove(item._svg);
        }
        item._svg = null;
      }
      continue;
    }

    item = (mdef.nest ? mark.items[0] : item);
    if (item._update === id) { // Already processed
      continue;
    } else if (item._svg) { // UPDATE
      this._update(mdef, item._svg, item);
    } else { // ENTER
      this._dirtyAll = false;
      dirtyParents(item, id);
    }
    item._update = id;
  }
  return !this._dirtyAll;
};

function dirtyParents(item, id) {
  for (; item && item.dirty !== id; item=item.mark.group) {
    item.dirty = id;
    if (item.mark && item.mark.dirty !== id) {
      item.mark.dirty = id;
    } else return;
  }
}


// -- Construct & maintain scenegraph to SVG mapping ---

// Draw a mark container.
prototype.drawMark = function(el, scene, index, mdef) {
  if (!this.isDirty(scene)) return;

  var items = mdef.nest ?
        (scene.items && scene.items.length ? [scene.items[0]] : []) :
        scene.items || [],
      events = scene.interactive === false ? 'none' : null,
      isGroup = (mdef.tag === 'g'),
      className = DOM.cssClass(scene),
      p, i, n, c, d, insert;

  p = DOM.child(el, index+1, 'g', ns, className);
  p.setAttribute('class', className);
  scene._svg = p;
  if (!isGroup && events) {
    p.style.setProperty('pointer-events', events);
  }

  for (i=0, n=items.length; i<n; ++i) {
    if (this.isDirty(d = items[i])) {
      insert = !(this._dirtyAll || d._svg);
      c = bind(p, mdef, d, i, insert);
      this._update(mdef, c, d);
      if (isGroup) {
        if (insert) this._dirtyAll = true;
        this._recurse(c, d);
        if (insert) this._dirtyAll = false;
      }
    }
  }
  DOM.clear(p, i);
  return p;
};

// Recursively process group contents.
prototype._recurse = function(el, group) {
  var items = group.items || [],
      legends = group.legendItems || [],
      axes = group.axisItems || [],
      idx = 0, j, m;

  for (j=0, m=axes.length; j<m; ++j) {
    if (axes[j].layer === 'back') {
      this.drawMark(el, axes[j], idx++, marks.group);
    }
  }
  for (j=0, m=items.length; j<m; ++j) {
    this.draw(el, items[j], idx++);
  }
  for (j=0, m=axes.length; j<m; ++j) {
    if (axes[j].layer !== 'back') {
      this.drawMark(el, axes[j], idx++, marks.group);
    }
  }
  for (j=0, m=legends.length; j<m; ++j) {
    this.drawMark(el, legends[j], idx++, marks.group);
  }

  // remove any extraneous DOM elements
  DOM.clear(el, 1 + idx);
};

// Bind a scenegraph item to an SVG DOM element.
// Create new SVG elements as needed.
function bind(el, mdef, item, index, insert) {
  // create svg element, bind item data for D3 compatibility
  var node = DOM.child(el, index, mdef.tag, ns, null, insert);
  node.__data__ = item;
  node.__values__ = {fill: 'default'};

  // create background rect
  if (mdef.tag === 'g') {
    var bg = DOM.child(node, 0, 'rect', ns, 'background');
    bg.__data__ = item;
  }

  // add pointer from scenegraph item to svg element
  return (item._svg = node);
}


// -- Set attributes & styles on SVG elements ---

var href = (typeof window !== 'undefined' ? window.location.href : ''),
    element = null, // temp var for current SVG element
    values = null;  // temp var for current values hash

// Extra configuration for certain mark types
var mark_extras = {
  group: function(mdef, el, item) {
    element = el.childNodes[0];
    values = el.__values__; // use parent's values hash
    mdef.background(emit, item, this);

    var value = item.mark.interactive === false ? 'none' : null;
    if (value !== values.events) {
      element.style.setProperty('pointer-events', value);
      values.events = value;
    }
  },
  text: function(mdef, el, item) {
    var str = text.value(item.text);
    if (str !== values.text) {
      el.textContent = str;
      values.text = str;
    }
    str = text.font(item);
    if (str !== values.font) {
      el.style.setProperty('font', str);
      values.font = str;
    }
  }
};

prototype._update = function(mdef, el, item) {
  // set dom element and values cache
  // provides access to emit method
  element = el;
  values = el.__values__;

  // apply svg attributes
  mdef.attr(emit, item, this);

  // some marks need special treatment
  var extra = mark_extras[mdef.type];
  if (extra) extra(mdef, el, item);

  // apply svg css styles
  // note: element may be modified by 'extra' method
  this.style(element, item);
};

function emit(name, value, ns) {
  // early exit if value is unchanged
  if (value === values[name]) return;

  if (value != null) {
    // if value is provided, update DOM attribute
    if (ns) {
      element.setAttributeNS(ns, name, value);
    } else {
      element.setAttribute(name, value);
    }
  } else {
    // else remove DOM attribute
    if (ns) {
      element.removeAttributeNS(ns, name);
    } else {
      element.removeAttribute(name);
    }
  }

  // note current value for future comparison
  values[name] = value;
}

prototype.style = function(el, o) {
  if (o == null) return;
  var i, n, prop, name, value;

  for (i=0, n=SVG.styleProperties.length; i<n; ++i) {
    prop = SVG.styleProperties[i];
    value = o[prop];
    if (value === values[prop]) continue;

    name = SVG.styles[prop];
    if (value == null) {
      if (name === 'fill') {
        el.style.setProperty(name, 'none');
      } else {
        el.style.removeProperty(name);
      }
    } else {
      if (value.id) {
        // ensure definition is included
        this._defs.gradient[value.id] = value;
        value = 'url(' + href + '#' + value.id + ')';
      }
      el.style.setProperty(name, value+'');
    }

    values[prop] = value;
  }
};

module.exports = SVGRenderer;

},{"../../util/ImageLoader":34,"../../util/dom":38,"../../util/svg":40,"../../util/text":41,"../Renderer":9,"./marks":30}],28:[function(require,module,exports){
var Renderer = require('../Renderer'),
    ImageLoader = require('../../util/ImageLoader'),
    SVG = require('../../util/svg'),
    text = require('../../util/text'),
    DOM = require('../../util/dom'),
    openTag = DOM.openTag,
    closeTag = DOM.closeTag,
    MARKS = require('./marks');

function SVGStringRenderer(loadConfig) {
  Renderer.call(this);

  this._loader = new ImageLoader(loadConfig);

  this._text = {
    head: '',
    root: '',
    foot: '',
    defs: '',
    body: ''
  };

  this._defs = {
    clip_id:  1,
    gradient: {},
    clipping: {}
  };
}

var base = Renderer.prototype;
var prototype = (SVGStringRenderer.prototype = Object.create(base));
prototype.constructor = SVGStringRenderer;

prototype.resize = function(width, height, padding) {
  base.resize.call(this, width, height, padding);
  var p = this._padding,
      t = this._text;

  var attr = {
    'class':  'marks',
    'width':  this._width + p.left + p.right,
    'height': this._height + p.top + p.bottom,
  };
  for (var key in SVG.metadata) {
    attr[key] = SVG.metadata[key];
  }

  t.head = openTag('svg', attr);
  t.root = openTag('g', {
    transform: 'translate(' + p.left + ',' + p.top + ')'
  });
  t.foot = closeTag('g') + closeTag('svg');

  return this;
};

prototype.svg = function() {
  var t = this._text;
  return t.head + t.defs + t.root + t.body + t.foot;
};

prototype.render = function(scene) {
  this._text.body = this.mark(scene);
  this._text.defs = this.buildDefs();
  return this;
};

prototype.reset = function() {
  this._defs.clip_id = 0;
  return this;
};

prototype.buildDefs = function() {
  var all = this._defs,
      defs = '',
      i, id, def, stops;

  for (id in all.gradient) {
    def = all.gradient[id];
    stops = def.stops;

    defs += openTag('linearGradient', {
      id: id,
      x1: def.x1,
      x2: def.x2,
      y1: def.y1,
      y2: def.y2
    });
    
    for (i=0; i<stops.length; ++i) {
      defs += openTag('stop', {
        offset: stops[i].offset,
        'stop-color': stops[i].color
      }) + closeTag('stop');
    }
    
    defs += closeTag('linearGradient');
  }
  
  for (id in all.clipping) {
    def = all.clipping[id];

    defs += openTag('clipPath', {id: id});

    defs += openTag('rect', {
      x: 0,
      y: 0,
      width: def.width,
      height: def.height
    }) + closeTag('rect');

    defs += closeTag('clipPath');
  }
  
  return (defs.length > 0) ? openTag('defs') + defs + closeTag('defs') : '';
};

prototype.imageURL = function(url) {
  return this._loader.imageURL(url);
};

var object;

function emit(name, value, ns, prefixed) {
  object[prefixed || name] = value;
}

prototype.attributes = function(attr, item) {
  object = {};
  attr(emit, item, this);
  return object;
};

prototype.mark = function(scene) {
  var mdef = MARKS[scene.marktype],
      tag  = mdef.tag,
      attr = mdef.attr,
      nest = mdef.nest || false,
      data = nest ?
          (scene.items && scene.items.length ? [scene.items[0]] : []) :
          (scene.items || []),
      defs = this._defs,
      str = '',
      style, i, item;

  if (tag !== 'g' && scene.interactive === false) {
    style = 'style="pointer-events: none;"';
  }

  // render opening group tag
  str += openTag('g', {
    'class': DOM.cssClass(scene)
  }, style);

  // render contained elements
  for (i=0; i<data.length; ++i) {
    item = data[i];
    style = (tag !== 'g') ? styles(item, scene, tag, defs) : null;
    str += openTag(tag, this.attributes(attr, item), style);
    if (tag === 'text') {
      str += escape_text(text.value(item.text));
    } else if (tag === 'g') {
      str += openTag('rect',
        this.attributes(mdef.background, item),
        styles(item, scene, 'bgrect', defs)) + closeTag('rect');
      str += this.markGroup(item);
    }
    str += closeTag(tag);
  }

  // render closing group tag
  return str + closeTag('g');
};

prototype.markGroup = function(scene) {
  var str = '',
      axes = scene.axisItems || [],
      items = scene.items || [],
      legends = scene.legendItems || [],
      j, m;

  for (j=0, m=axes.length; j<m; ++j) {
    if (axes[j].layer === 'back') {
      str += this.mark(axes[j]);
    }
  }
  for (j=0, m=items.length; j<m; ++j) {
    str += this.mark(items[j]);
  }
  for (j=0, m=axes.length; j<m; ++j) {
    if (axes[j].layer !== 'back') {
      str += this.mark(axes[j]);
    }
  }
  for (j=0, m=legends.length; j<m; ++j) {
    str += this.mark(legends[j]);
  }

  return str;
};

function styles(o, mark, tag, defs) {
  if (o == null) return '';
  var i, n, prop, name, value, s = '';

  if (tag === 'bgrect' && mark.interactive === false) {
    s += 'pointer-events: none;';
  }

  if (tag === 'text') {
    s += 'font: ' + text.font(o) + ';';
  }

  for (i=0, n=SVG.styleProperties.length; i<n; ++i) {
    prop = SVG.styleProperties[i];
    name = SVG.styles[prop];
    value = o[prop];

    if (value == null) {
      if (name === 'fill') {
        s += (s.length ? ' ' : '') + 'fill: none;';
      }
    } else {
      if (value.id) {
        // ensure definition is included
        defs.gradient[value.id] = value;
        value = 'url(#' + value.id + ')';
      }
      s += (s.length ? ' ' : '') + name + ': ' + value + ';';
    }
  }

  return s ? 'style="' + s + '"' : null;
}

function escape_text(s) {
  return s.replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;');
}

module.exports = SVGStringRenderer;

},{"../../util/ImageLoader":34,"../../util/dom":38,"../../util/svg":40,"../../util/text":41,"../Renderer":9,"./marks":30}],29:[function(require,module,exports){
module.exports = {
  Handler:  require('./SVGHandler'),
  Renderer: require('./SVGRenderer'),
  string: {
    Renderer : require('./SVGStringRenderer')
  }
};
},{"./SVGHandler":26,"./SVGRenderer":27,"./SVGStringRenderer":28}],30:[function(require,module,exports){
var text = require('../../util/text'),
    SVG = require('../../util/svg'),
    textAlign = SVG.textAlign,
    path = SVG.path;

function translateItem(o) {
  return translate(o.x || 0, o.y || 0);
}

function translate(x, y) {
  return 'translate(' + x + ',' + y + ')';
}

module.exports = {
  arc: {
    tag:  'path',
    type: 'arc',
    attr: function(emit, o) {
      emit('transform', translateItem(o));
      emit('d', path.arc(o));
    }
  },
  area: {
    tag:  'path',
    type: 'area',
    nest: true,
    attr: function(emit, o) {
      var items = o.mark.items;
      if (items.length) emit('d', path.area(items));
    }
  },
  group: {
    tag:  'g',
    type: 'group',
    attr: function(emit, o, renderer) {
      var id = null, defs, c;
      emit('transform', translateItem(o));
      if (o.clip) {
        defs = renderer._defs;
        id = o.clip_id || (o.clip_id = 'clip' + defs.clip_id++);
        c = defs.clipping[id] || (defs.clipping[id] = {id: id});
        c.width = o.width || 0;
        c.height = o.height || 0;
      }
      emit('clip-path', id ? ('url(#' + id + ')') : null);
    },
    background: function(emit, o) {
      emit('class', 'background');
      emit('width', o.width || 0);
      emit('height', o.height || 0);
    }
  },
  image: {
    tag:  'image',
    type: 'image',
    attr: function(emit, o, renderer) {
      var x = o.x || 0,
          y = o.y || 0,
          w = o.width || 0,
          h = o.height || 0,
          url = renderer.imageURL(o.url);

      x = x - (o.align === 'center' ? w/2 : o.align === 'right' ? w : 0);
      y = y - (o.baseline === 'middle' ? h/2 : o.baseline === 'bottom' ? h : 0);

      emit('href', url, 'http://www.w3.org/1999/xlink', 'xlink:href');
      emit('transform', translate(x, y));
      emit('width', w);
      emit('height', h);
    }
  },
  line: {
    tag:  'path',
    type: 'line',
    nest: true,
    attr: function(emit, o) {
      var items = o.mark.items;
      if (items.length) emit('d', path.line(items));
    }
  },
  path: {
    tag:  'path',
    type: 'path',
    attr: function(emit, o) {
      emit('transform', translateItem(o));
      emit('d', o.path);
    }
  },
  rect: {
    tag:  'rect',
    type: 'rect',
    nest: false,
    attr: function(emit, o) {
      emit('transform', translateItem(o));
      emit('width', o.width || 0);
      emit('height', o.height || 0);
    }
  },
  rule: {
    tag:  'line',
    type: 'rule',
    attr: function(emit, o) {
      emit('transform', translateItem(o));
      emit('x2', o.x2 != null ? o.x2 - (o.x||0) : 0);
      emit('y2', o.y2 != null ? o.y2 - (o.y||0) : 0);
    }
  },
  symbol: {
    tag:  'path',
    type: 'symbol',
    attr: function(emit, o) {
      emit('transform', translateItem(o));
      emit('d', path.symbol(o));
    }
  },
  text: {
    tag:  'text',
    type: 'text',
    nest: false,
    attr: function(emit, o) {
      var dx = (o.dx || 0),
          dy = (o.dy || 0) + text.offset(o),
          x = (o.x || 0),
          y = (o.y || 0),
          a = o.angle || 0,
          r = o.radius || 0, t;

      if (r) {
        t = (o.theta || 0) - Math.PI/2;
        x += r * Math.cos(t);
        y += r * Math.sin(t);
      }

      emit('text-anchor', textAlign[o.align] || 'start');
      
      if (a) {
        t = translate(x, y) + ' rotate('+a+')';
        if (dx || dy) t += ' ' + translate(dx, dy);
      } else {
        t = translate(x+dx, y+dy);
      }
      emit('transform', t);
    }
  }
};

},{"../../util/svg":40,"../../util/text":41}],31:[function(require,module,exports){
function Bounds(b) {
  this.clear();
  if (b) this.union(b);
}

var prototype = Bounds.prototype;

prototype.clone = function() {
  return new Bounds(this);
};

prototype.clear = function() {
  this.x1 = +Number.MAX_VALUE;
  this.y1 = +Number.MAX_VALUE;
  this.x2 = -Number.MAX_VALUE;
  this.y2 = -Number.MAX_VALUE;
  return this;
};

prototype.set = function(x1, y1, x2, y2) {
  this.x1 = x1;
  this.y1 = y1;
  this.x2 = x2;
  this.y2 = y2;
  return this;
};

prototype.add = function(x, y) {
  if (x < this.x1) this.x1 = x;
  if (y < this.y1) this.y1 = y;
  if (x > this.x2) this.x2 = x;
  if (y > this.y2) this.y2 = y;
  return this;
};

prototype.expand = function(d) {
  this.x1 -= d;
  this.y1 -= d;
  this.x2 += d;
  this.y2 += d;
  return this;
};

prototype.round = function() {
  this.x1 = Math.floor(this.x1);
  this.y1 = Math.floor(this.y1);
  this.x2 = Math.ceil(this.x2);
  this.y2 = Math.ceil(this.y2);
  return this;
};

prototype.translate = function(dx, dy) {
  this.x1 += dx;
  this.x2 += dx;
  this.y1 += dy;
  this.y2 += dy;
  return this;
};

prototype.rotate = function(angle, x, y) {
  var cos = Math.cos(angle),
      sin = Math.sin(angle),
      cx = x - x*cos + y*sin,
      cy = y - x*sin - y*cos,
      x1 = this.x1, x2 = this.x2,
      y1 = this.y1, y2 = this.y2;

  return this.clear()
    .add(cos*x1 - sin*y1 + cx,  sin*x1 + cos*y1 + cy)
    .add(cos*x1 - sin*y2 + cx,  sin*x1 + cos*y2 + cy)
    .add(cos*x2 - sin*y1 + cx,  sin*x2 + cos*y1 + cy)
    .add(cos*x2 - sin*y2 + cx,  sin*x2 + cos*y2 + cy);
};

prototype.union = function(b) {
  if (b.x1 < this.x1) this.x1 = b.x1;
  if (b.y1 < this.y1) this.y1 = b.y1;
  if (b.x2 > this.x2) this.x2 = b.x2;
  if (b.y2 > this.y2) this.y2 = b.y2;
  return this;
};

prototype.encloses = function(b) {
  return b && (
    this.x1 <= b.x1 &&
    this.x2 >= b.x2 &&
    this.y1 <= b.y1 &&
    this.y2 >= b.y2
  );
};

prototype.intersects = function(b) {
  return b && !(
    this.x2 < b.x1 ||
    this.x1 > b.x2 ||
    this.y2 < b.y1 ||
    this.y1 > b.y2
  );
};

prototype.contains = function(x, y) {
  return !(
    x < this.x1 ||
    x > this.x2 ||
    y < this.y1 ||
    y > this.y2
  );
};

prototype.width = function() {
  return this.x2 - this.x1;
};

prototype.height = function() {
  return this.y2 - this.y1;
};

module.exports = Bounds;

},{}],32:[function(require,module,exports){
module.exports = function(b) {
  function noop() { }
  function add(x,y) { b.add(x, y); }

  return {
    bounds: function(_) {
      if (!arguments.length) return b;
      return (b = _, this);
    },
    beginPath: noop,
    closePath: noop,
    moveTo: add,
    lineTo: add,
    quadraticCurveTo: function(x1, y1, x2, y2) {
      b.add(x1, y1);
      b.add(x2, y2);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
      b.add(x1, y1);
      b.add(x2, y2);
      b.add(x3, y3);
    }
  };
};

},{}],33:[function(require,module,exports){
var gradient_id = 0;

function Gradient(type) {
  this.id = 'gradient_' + (gradient_id++);
  this.type = type || 'linear';
  this.stops = [];
  this.x1 = 0;
  this.x2 = 1;
  this.y1 = 0;
  this.y2 = 0;
}

var prototype = Gradient.prototype;

prototype.stop = function(offset, color) {
  this.stops.push({
    offset: offset,
    color: color
  });
  return this;
};

module.exports = Gradient;
},{}],34:[function(require,module,exports){
(function (global){
var load = require('datalib/src/import/load');

function ImageLoader(loadConfig) {
  this._pending = 0;
  this._config = loadConfig || ImageLoader.Config; 
}

// Overridable global default load configuration
ImageLoader.Config = null;

var prototype = ImageLoader.prototype;

prototype.pending = function() {
  return this._pending;
};

prototype.params = function(uri) {
  var p = {url: uri}, k;
  for (k in this._config) { p[k] = this._config[k]; }
  return p;
};

prototype.imageURL = function(uri) {
  return load.sanitizeUrl(this.params(uri));
};

function browser(uri, callback) {
  var url = load.sanitizeUrl(this.params(uri));
  if (!url) { // error
    if (callback) callback(uri, null);
    return null;
  }

  var loader = this,
      image = new Image();

  loader._pending += 1;

  image.onload = function() {
    loader._pending -= 1;
    image.loaded = true;
    if (callback) callback(null, image);
  };
  image.src = url;

  return image;
}

function server(uri, callback) {
  var loader = this,
      image = new ((typeof window !== "undefined" ? window['canvas'] : typeof global !== "undefined" ? global['canvas'] : null).Image)();

  loader._pending += 1;

  load(this.params(uri), function(err, data) {
    loader._pending -= 1;
    if (err) {
      if (callback) callback(err, null);
      return null;
    }
    image.src = data;
    image.loaded = true;
    if (callback) callback(null, image);
  });

  return image;
}

prototype.loadImage = function(uri, callback) {
  return load.useXHR ?
    browser.call(this, uri, callback) :
    server.call(this, uri, callback);
};

module.exports = ImageLoader;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"datalib/src/import/load":2}],35:[function(require,module,exports){
function Item(mark) {
  this.mark = mark;
}

var prototype = Item.prototype;

prototype.hasPropertySet = function(name) {
  var props = this.mark.def.properties;
  return props && props[name] != null;
};

prototype.cousin = function(offset, index) {
  if (offset === 0) return this;
  offset = offset || -1;
  var mark = this.mark,
      group = mark.group,
      iidx = index==null ? mark.items.indexOf(this) : index,
      midx = group.items.indexOf(mark) + offset;
  return group.items[midx].items[iidx];
};

prototype.sibling = function(offset) {
  if (offset === 0) return this;
  offset = offset || -1;
  var mark = this.mark,
      iidx = mark.items.indexOf(this) + offset;
  return mark.items[iidx];
};

prototype.remove = function() {
  var item = this,
      list = item.mark.items,
      i = list.indexOf(item);
  if (i >= 0) {
    if (i===list.length-1) {
      list.pop();
    } else {
      list.splice(i, 1);
    }
  }
  return item;
};

prototype.touch = function() {
  if (this.pathCache) this.pathCache = null;
};

module.exports = Item;
},{}],36:[function(require,module,exports){
var BoundsContext = require('./BoundsContext'),
    Bounds = require('./Bounds'),
    canvas = require('./canvas'),
    svg = require('./svg'),
    text = require('./text'),
    paths = require('../path'),
    parse = paths.parse,
    drawPath = paths.render,
    areaPath = svg.path.area,
    linePath = svg.path.line,
    halfpi = Math.PI / 2,
    sqrt3 = Math.sqrt(3),
    tan30 = Math.tan(30 * Math.PI / 180),
    g2D = null,
    bc = BoundsContext();

function context() {
  return g2D || (g2D = canvas.instance(1,1).getContext('2d'));
}

function strokeBounds(o, bounds) {
  if (o.stroke && o.opacity !== 0 && o.stokeOpacity !== 0) {
    bounds.expand(o.strokeWidth != null ? o.strokeWidth : 1);
  }
  return bounds;
}

function pathBounds(o, path, bounds, x, y) {
  if (path == null) {
    bounds.set(0, 0, 0, 0);
  } else {
    drawPath(bc.bounds(bounds), path, x, y);
    strokeBounds(o, bounds);
  }
  return bounds;
}

function path(o, bounds) {
  var p = o.path ? o.pathCache || (o.pathCache = parse(o.path)) : null;
  return pathBounds(o, p, bounds, o.x, o.y);
}

function area(mark, bounds) {
  if (mark.items.length === 0) return bounds;
  var items = mark.items,
      item = items[0],
      p = item.pathCache || (item.pathCache = parse(areaPath(items)));
  return pathBounds(item, p, bounds);
}

function line(mark, bounds) {
  if (mark.items.length === 0) return bounds;
  var items = mark.items,
      item = items[0],
      p = item.pathCache || (item.pathCache = parse(linePath(items)));
  return pathBounds(item, p, bounds);
}

function rect(o, bounds) {
  var x, y;
  return strokeBounds(o, bounds.set(
    x = o.x || 0,
    y = o.y || 0,
    (x + o.width) || 0,
    (y + o.height) || 0
  ));
}

function image(o, bounds) {
  var x = o.x || 0,
      y = o.y || 0,
      w = o.width || 0,
      h = o.height || 0;
  x = x - (o.align === 'center' ? w/2 : (o.align === 'right' ? w : 0));
  y = y - (o.baseline === 'middle' ? h/2 : (o.baseline === 'bottom' ? h : 0));
  return bounds.set(x, y, x+w, y+h);
}

function rule(o, bounds) {
  var x1, y1;
  return strokeBounds(o, bounds.set(
    x1 = o.x || 0,
    y1 = o.y || 0,
    o.x2 != null ? o.x2 : x1,
    o.y2 != null ? o.y2 : y1
  ));
}

function arc(o, bounds) {
  var cx = o.x || 0,
      cy = o.y || 0,
      ir = o.innerRadius || 0,
      or = o.outerRadius || 0,
      sa = (o.startAngle || 0) - halfpi,
      ea = (o.endAngle || 0) - halfpi,
      xmin = Infinity, xmax = -Infinity,
      ymin = Infinity, ymax = -Infinity,
      a, i, n, x, y, ix, iy, ox, oy;

  var angles = [sa, ea],
      s = sa - (sa % halfpi);
  for (i=0; i<4 && s<ea; ++i, s+=halfpi) {
    angles.push(s);
  }

  for (i=0, n=angles.length; i<n; ++i) {
    a = angles[i];
    x = Math.cos(a); ix = ir*x; ox = or*x;
    y = Math.sin(a); iy = ir*y; oy = or*y;
    xmin = Math.min(xmin, ix, ox);
    xmax = Math.max(xmax, ix, ox);
    ymin = Math.min(ymin, iy, oy);
    ymax = Math.max(ymax, iy, oy);
  }

  return strokeBounds(o, bounds.set(
    cx + xmin,
    cy + ymin,
    cx + xmax,
    cy + ymax
  ));
}

function symbol(o, bounds) {
  var size = o.size != null ? o.size : 100,
      x = o.x || 0,
      y = o.y || 0,
      r, t, rx, ry;

  switch (o.shape) {
    case 'cross':
      t = 3 * Math.sqrt(size / 5) / 2;
      bounds.set(x-t, y-t, x+t, y+t);
      break;

    case 'diamond':
      ry = Math.sqrt(size / (2 * tan30));
      rx = ry * tan30;
      bounds.set(x-rx, y-ry, x+rx, y+ry);
      break;

    case 'square':
      t = Math.sqrt(size);
      r = t / 2;
      bounds.set(x-r, y-r, x+r, y+r);
      break;

    case 'triangle-down':
      rx = Math.sqrt(size / sqrt3);
      ry = rx * sqrt3 / 2;
      bounds.set(x-rx, y-ry, x+rx, y+ry);
      break;

    case 'triangle-up':
      rx = Math.sqrt(size / sqrt3);
      ry = rx * sqrt3 / 2;
      bounds.set(x-rx, y-ry, x+rx, y+ry);
      break;

    default:
      r = Math.sqrt(size/Math.PI);
      bounds.set(x-r, y-r, x+r, y+r);
  }

  return strokeBounds(o, bounds);
}

function textMark(o, bounds, noRotate) {
  var g = context(),
      h = text.size(o),
      a = o.align,
      r = o.radius || 0,
      x = (o.x || 0),
      y = (o.y || 0),
      dx = (o.dx || 0),
      dy = (o.dy || 0) + text.offset(o) - Math.round(0.8*h), // use 4/5 offset
      w, t;

  if (r) {
    t = (o.theta || 0) - Math.PI/2;
    x += r * Math.cos(t);
    y += r * Math.sin(t);
  }

  // horizontal alignment
  g.font = text.font(o);
  w = g.measureText(text.value(o.text)).width;
  if (a === 'center') {
    dx -= (w / 2);
  } else if (a === 'right') {
    dx -= w;
  } else {
    // left by default, do nothing
  }

  bounds.set(dx+=x, dy+=y, dx+w, dy+h);
  if (o.angle && !noRotate) {
    bounds.rotate(o.angle*Math.PI/180, x, y);
  }
  return bounds.expand(noRotate ? 0 : 1);
}

function group(g, bounds, includeLegends) {
  var axes = g.axisItems || [],
      items = g.items || [],
      legends = g.legendItems || [],
      j, m;

  for (j=0, m=axes.length; j<m; ++j) {
    bounds.union(axes[j].bounds);
  }
  for (j=0, m=items.length; j<m; ++j) {
    bounds.union(items[j].bounds);
  }
  if (includeLegends) {
    for (j=0, m=legends.length; j<m; ++j) {
      bounds.union(legends[j].bounds);
    }
  }
  if (g.width || g.height) {
    strokeBounds(g, bounds
      .add(0, 0)
      .add(g.width || 0, g.height || 0));
  }
  return bounds.translate(g.x || 0, g.y || 0);
}

var methods = {
  group:  group,
  symbol: symbol,
  image:  image,
  rect:   rect,
  rule:   rule,
  arc:    arc,
  text:   textMark,
  path:   path,
  area:   area,
  line:   line
};
methods.area.nest = true;
methods.line.nest = true;

function itemBounds(item, func, opt) {
  var type = item.mark.marktype;
  func = func || methods[type];
  if (func.nest) item = item.mark;

  var curr = item.bounds,
      prev = item['bounds:prev'] || (item['bounds:prev'] = new Bounds());

  if (curr) {
    prev.clear().union(curr);
    curr.clear();
  } else {
    item.bounds = new Bounds();
  }
  func(item, item.bounds, opt);
  if (!curr) prev.clear().union(item.bounds);
  return item.bounds;
}

var DUMMY_ITEM = {mark: null};

function markBounds(mark, bounds, opt) {
  var type  = mark.marktype,
      func  = methods[type],
      items = mark.items,
      hasi  = items && items.length,
      i, n, o, b;

  if (func.nest) {
    o = hasi ? items[0]
      : (DUMMY_ITEM.mark = mark, DUMMY_ITEM); // no items, so fake it
    b = itemBounds(o, func, opt);
    bounds = bounds && bounds.union(b) || b;
    return bounds;
  }

  bounds = bounds || mark.bounds && mark.bounds.clear() || new Bounds();
  if (hasi) {  
    for (i=0, n=items.length; i<n; ++i) {
      bounds.union(itemBounds(items[i], func, opt));
    }
  }
  return (mark.bounds = bounds);
}

module.exports = {
  mark:  markBounds,
  item:  itemBounds,
  text:  textMark,
  group: group
};

},{"../path":5,"./Bounds":31,"./BoundsContext":32,"./canvas":37,"./svg":40,"./text":41}],37:[function(require,module,exports){
(function (global){
function instance(w, h) {
  w = w || 1;
  h = h || 1;
  var canvas;

  if (typeof document !== 'undefined' && document.createElement) {
    canvas = document.createElement('canvas');
    canvas.width = w;
    canvas.height = h;
  } else {
    var Canvas = (typeof window !== "undefined" ? window['canvas'] : typeof global !== "undefined" ? global['canvas'] : null);
    if (!Canvas.prototype) return null;
    canvas = new Canvas(w, h);
  }
  return lineDash(canvas);
}

function resize(canvas, w, h, p, retina) {
  var g = this._ctx = canvas.getContext('2d'), 
      s = 1;

  canvas.width = w + p.left + p.right;
  canvas.height = h + p.top + p.bottom;

  // if browser canvas, attempt to modify for retina display
  if (retina && typeof HTMLElement !== 'undefined' &&
      canvas instanceof HTMLElement)
  {
    g.pixelratio = (s = pixelRatio(canvas) || 1);
  }

  g.setTransform(s, 0, 0, s, s*p.left, s*p.top);
  return canvas;
}

function pixelRatio(canvas) {
  var g = canvas.getContext('2d');

  // get canvas pixel data
  var devicePixelRatio = window && window.devicePixelRatio || 1,
      backingStoreRatio = (
        g.webkitBackingStorePixelRatio ||
        g.mozBackingStorePixelRatio ||
        g.msBackingStorePixelRatio ||
        g.oBackingStorePixelRatio ||
        g.backingStorePixelRatio) || 1,
      ratio = devicePixelRatio / backingStoreRatio;

  if (devicePixelRatio !== backingStoreRatio) {
    // set actual and visible canvas size
    var w = canvas.width,
        h = canvas.height;
    canvas.width = w * ratio;
    canvas.height = h * ratio;
    canvas.style.width = w + 'px';
    canvas.style.height = h + 'px';
  }

  return ratio;
}

function lineDash(canvas) {
  var g = canvas.getContext('2d');
  if (g.vgLineDash) return; // already initialized!

  var NOOP = function() {},
      NODASH = [];
  
  if (g.setLineDash) {
    g.vgLineDash = function(dash) { this.setLineDash(dash || NODASH); };
    g.vgLineDashOffset = function(off) { this.lineDashOffset = off; };
  } else if (g.webkitLineDash !== undefined) {
  	g.vgLineDash = function(dash) { this.webkitLineDash = dash || NODASH; };
    g.vgLineDashOffset = function(off) { this.webkitLineDashOffset = off; };
  } else if (g.mozDash !== undefined) {
    g.vgLineDash = function(dash) { this.mozDash = dash; };
    g.vgLineDashOffset = NOOP;
  } else {
    g.vgLineDash = NOOP;
    g.vgLineDashOffset = NOOP;
  }
  return canvas;
}

module.exports = {
  instance:   instance,
  resize:     resize,
  lineDash:   lineDash
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],38:[function(require,module,exports){
// create a new DOM element
function create(doc, tag, ns) {
  return ns ? doc.createElementNS(ns, tag) : doc.createElement(tag);
}

// remove element from DOM
// recursively remove parent elements if empty
function remove(el) {
  if (!el) return;
  var p = el.parentNode;
  if (p) {
    p.removeChild(el);
    if (!p.childNodes || !p.childNodes.length) remove(p);
  }
}

module.exports = {
  // find first child element with matching tag
  find: function(el, tag) {
    tag = tag.toLowerCase();
    for (var i=0, n=el.childNodes.length; i<n; ++i) {
      if (el.childNodes[i].tagName.toLowerCase() === tag) {
        return el.childNodes[i];
      }
    }
  },
  // retrieve child element at given index
  // create & insert if doesn't exist or if tag/className do not match
  child: function(el, index, tag, ns, className, insert) {
    var a, b;
    a = b = el.childNodes[index];
    if (!a || insert ||
        a.tagName.toLowerCase() !== tag.toLowerCase() ||
        className && a.getAttribute('class') != className) {
      a = create(el.ownerDocument, tag, ns);
      el.insertBefore(a, b);
      if (className) a.setAttribute('class', className);
    }
    return a;
  },
  // remove all child elements at or above the given index
  clear: function(el, index) {
    var curr = el.childNodes.length;
    while (curr > index) {
      el.removeChild(el.childNodes[--curr]);
    }
    return el;
  },
  remove: remove,
  // generate css class name for mark
  cssClass: function(mark) {
    return 'mark-' + mark.marktype + (mark.name ? ' '+mark.name : '');
  },
  // generate string for an opening xml tag
  // tag: the name of the xml tag
  // attr: hash of attribute name-value pairs to include
  // raw: additional raw string to include in tag markup
  openTag: function(tag, attr, raw) {
    var s = '<' + tag, key, val;
    if (attr) {
      for (key in attr) {
        val = attr[key];
        if (val != null) {
          s += ' ' + key + '="' + val + '"';
        }
      }
    }
    if (raw) s += ' ' + raw;
    return s + '>';
  },
  // generate string for closing xml tag
  // tag: the name of the xml tag
  closeTag: function(tag) {
    return '</' + tag + '>';
  }
};

},{}],39:[function(require,module,exports){
var bound = require('../util/bound');

var sets = [
  'items',
  'axisItems',
  'legendItems'
];

var keys = [
  'marktype', 'name', 'interactive', 'clip',
  'items', 'axisItems', 'legendItems', 'layer',
  'x', 'y', 'width', 'height', 'align', 'baseline',             // layout
  'fill', 'fillOpacity', 'opacity',                             // fill
  'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap',        // stroke
  'strokeDash', 'strokeDashOffset',                             // stroke dash
  'startAngle', 'endAngle', 'innerRadius', 'outerRadius',       // arc
  'interpolate', 'tension', 'orient',                           // area, line
  'url',                                                        // image
  'path',                                                       // path
  'x2', 'y2',                                                   // rule
  'size', 'shape',                                              // symbol
  'text', 'angle', 'theta', 'radius', 'dx', 'dy',               // text
  'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant'  // font
];

function toJSON(scene, indent) {
  return JSON.stringify(scene, keys, indent);
}

function fromJSON(json) {
  var scene = (typeof json === 'string' ? JSON.parse(json) : json);
  return initialize(scene);
}

function initialize(scene) {
  var type = scene.marktype,
      i, n, s, m, items;

  for (s=0, m=sets.length; s<m; ++s) {
    if ((items = scene[sets[s]])) {
      for (i=0, n=items.length; i<n; ++i) {
        items[i][type ? 'mark' : 'group'] = scene;
        if (!type || type === 'group') {
          initialize(items[i]);
        }
      }
    }
  }

  if (type) bound.mark(scene);
  return scene;
}

module.exports = {
  toJSON:   toJSON,
  fromJSON: fromJSON
};
},{"../util/bound":36}],40:[function(require,module,exports){
(function (global){
var d3_svg = (typeof window !== "undefined" ? window['d3'] : typeof global !== "undefined" ? global['d3'] : null).svg;

function x(o)     { return o.x || 0; }
function y(o)     { return o.y || 0; }
function xw(o)    { return (o.x || 0) + (o.width || 0); }
function yh(o)    { return (o.y || 0) + (o.height || 0); }
function size(o)  { return o.size == null ? 100 : o.size; }
function shape(o) { return o.shape || 'circle'; }

var areav = d3_svg.area().x(x).y1(y).y0(yh),
    areah = d3_svg.area().y(y).x1(x).x0(xw),
    line  = d3_svg.line().x(x).y(y);

module.exports = {
  metadata: {
    'version': '1.1',
    'xmlns': 'http://www.w3.org/2000/svg',
    'xmlns:xlink': 'http://www.w3.org/1999/xlink'
  },
  path: {
    arc: d3_svg.arc(),
    symbol: d3_svg.symbol().type(shape).size(size),
    area: function(items) {
      var o = items[0];
      return (o.orient === 'horizontal' ? areah : areav)
        .interpolate(o.interpolate || 'linear')
        .tension(o.tension || 0.7)
        (items);
    },
    line: function(items) {
      var o = items[0];
      return line
        .interpolate(o.interpolate || 'linear')
        .tension(o.tension || 0.7)
        (items);
    }
  },
  textAlign: {
    'left':   'start',
    'center': 'middle',
    'right':  'end'
  },
  textBaseline: {
    'top':    'before-edge',
    'bottom': 'after-edge',
    'middle': 'central'
  },
  styles: {
    'fill':             'fill',
    'fillOpacity':      'fill-opacity',
    'stroke':           'stroke',
    'strokeWidth':      'stroke-width',
    'strokeOpacity':    'stroke-opacity',
    'strokeCap':        'stroke-linecap',
    'strokeDash':       'stroke-dasharray',
    'strokeDashOffset': 'stroke-dashoffset',
    'opacity':          'opacity'
  },
  styleProperties: [
    'fill',
    'fillOpacity',
    'stroke',
    'strokeWidth',
    'strokeOpacity',
    'strokeCap',
    'strokeDash',
    'strokeDashOffset',
    'opacity'
  ]
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],41:[function(require,module,exports){
function size(item) {
  return item.fontSize != null ? item.fontSize : 11;
}

module.exports = {
  size: size,
  value: function(s) {
    return s != null ? String(s) : '';
  },
  font: function(item, quote) {
    var font = item.font;
    if (quote && font) {
      font = String(font).replace(/\"/g, '\'');
    }
    return '' +
      (item.fontStyle ? item.fontStyle + ' ' : '') +
      (item.fontVariant ? item.fontVariant + ' ' : '') +
      (item.fontWeight ? item.fontWeight + ' ' : '') +
      size(item) + 'px ' +
      (font || 'sans-serif');
  },
  offset: function(item) {
    // perform our own font baseline calculation
    // why? not all browsers support SVG 1.1 'alignment-baseline' :(
    var baseline = item.baseline,
        h = size(item);
    return Math.round(
      baseline === 'top'    ?  0.93*h :
      baseline === 'middle' ?  0.30*h :
      baseline === 'bottom' ? -0.21*h : 0
    );
  }
};

},{}]},{},[3])(3)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL2RhdGFsaWIvc3JjL2ltcG9ydC9sb2FkLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL3BhdGgvYXJjLmpzIiwic3JjL3BhdGgvaW5kZXguanMiLCJzcmMvcGF0aC9wYXJzZS5qcyIsInNyYy9wYXRoL3JlbmRlci5qcyIsInNyYy9yZW5kZXIvSGFuZGxlci5qcyIsInNyYy9yZW5kZXIvUmVuZGVyZXIuanMiLCJzcmMvcmVuZGVyL2NhbnZhcy9DYW52YXNIYW5kbGVyLmpzIiwic3JjL3JlbmRlci9jYW52YXMvQ2FudmFzUmVuZGVyZXIuanMiLCJzcmMvcmVuZGVyL2NhbnZhcy9pbmRleC5qcyIsInNyYy9yZW5kZXIvY2FudmFzL21hcmtzL2FyYy5qcyIsInNyYy9yZW5kZXIvY2FudmFzL21hcmtzL2FyZWEuanMiLCJzcmMvcmVuZGVyL2NhbnZhcy9tYXJrcy9ncm91cC5qcyIsInNyYy9yZW5kZXIvY2FudmFzL21hcmtzL2ltYWdlLmpzIiwic3JjL3JlbmRlci9jYW52YXMvbWFya3MvaW5kZXguanMiLCJzcmMvcmVuZGVyL2NhbnZhcy9tYXJrcy9saW5lLmpzIiwic3JjL3JlbmRlci9jYW52YXMvbWFya3MvcGF0aC5qcyIsInNyYy9yZW5kZXIvY2FudmFzL21hcmtzL3JlY3QuanMiLCJzcmMvcmVuZGVyL2NhbnZhcy9tYXJrcy9ydWxlLmpzIiwic3JjL3JlbmRlci9jYW52YXMvbWFya3Mvc3ltYm9sLmpzIiwic3JjL3JlbmRlci9jYW52YXMvbWFya3MvdGV4dC5qcyIsInNyYy9yZW5kZXIvY2FudmFzL21hcmtzL3V0aWwuanMiLCJzcmMvcmVuZGVyL2luZGV4LmpzIiwic3JjL3JlbmRlci9zdmcvU1ZHSGFuZGxlci5qcyIsInNyYy9yZW5kZXIvc3ZnL1NWR1JlbmRlcmVyLmpzIiwic3JjL3JlbmRlci9zdmcvU1ZHU3RyaW5nUmVuZGVyZXIuanMiLCJzcmMvcmVuZGVyL3N2Zy9pbmRleC5qcyIsInNyYy9yZW5kZXIvc3ZnL21hcmtzLmpzIiwic3JjL3V0aWwvQm91bmRzLmpzIiwic3JjL3V0aWwvQm91bmRzQ29udGV4dC5qcyIsInNyYy91dGlsL0dyYWRpZW50LmpzIiwic3JjL3V0aWwvSW1hZ2VMb2FkZXIuanMiLCJzcmMvdXRpbC9JdGVtLmpzIiwic3JjL3V0aWwvYm91bmQuanMiLCJzcmMvdXRpbC9jYW52YXMuanMiLCJzcmMvdXRpbC9kb20uanMiLCJzcmMvdXRpbC9zY2VuZS5qcyIsInNyYy91dGlsL3N2Zy5qcyIsInNyYy91dGlsL3RleHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeElBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNyU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIixudWxsLCIvLyBNYXRjaGVzIGFic29sdXRlIFVSTHMgd2l0aCBvcHRpb25hbCBwcm90b2NvbFxuLy8gICBodHRwczovLy4uLiAgICBmaWxlOi8vLi4uICAgIC8vLi4uXG52YXIgcHJvdG9jb2xfcmUgPSAvXihbQS1aYS16XSs6KT9cXC9cXC8vO1xuXG4vLyBTcGVjaWFsIHRyZWF0bWVudCBpbiBub2RlLmpzIGZvciB0aGUgZmlsZTogcHJvdG9jb2xcbnZhciBmaWxlUHJvdG9jb2wgPSAnZmlsZTovLyc7XG5cbi8vIFZhbGlkYXRlIGFuZCBjbGVhbnVwIFVSTCB0byBlbnN1cmUgdGhhdCBpdCBpcyBhbGxvd2VkIHRvIGJlIGFjY2Vzc2VkXG4vLyBSZXR1cm5zIGNsZWFuZWQgdXAgVVJMLCBvciBmYWxzZSBpZiBhY2Nlc3MgaXMgbm90IGFsbG93ZWRcbmZ1bmN0aW9uIHNhbml0aXplVXJsKG9wdCkge1xuICB2YXIgdXJsID0gb3B0LnVybDtcbiAgaWYgKCF1cmwgJiYgb3B0LmZpbGUpIHsgcmV0dXJuIGZpbGVQcm90b2NvbCArIG9wdC5maWxlOyB9XG5cbiAgLy8gSW4gY2FzZSB0aGlzIGlzIGEgcmVsYXRpdmUgdXJsIChoYXMgbm8gaG9zdCksIHByZXBlbmQgb3B0LmJhc2VVUkxcbiAgaWYgKG9wdC5iYXNlVVJMICYmICFwcm90b2NvbF9yZS50ZXN0KHVybCkpIHtcbiAgICBpZiAoIXN0YXJ0c1dpdGgodXJsLCAnLycpICYmIG9wdC5iYXNlVVJMW29wdC5iYXNlVVJMLmxlbmd0aC0xXSAhPT0gJy8nKSB7XG4gICAgICB1cmwgPSAnLycgKyB1cmw7IC8vIEVuc3VyZSB0aGF0IHRoZXJlIGlzIGEgc2xhc2ggYmV0d2VlbiB0aGUgYmFzZVVSTCAoZS5nLiBob3N0bmFtZSkgYW5kIHVybFxuICAgIH1cbiAgICB1cmwgPSBvcHQuYmFzZVVSTCArIHVybDtcbiAgfVxuICAvLyByZWxhdGl2ZSBwcm90b2NvbCwgc3RhcnRzIHdpdGggJy8vJ1xuICBpZiAoIWxvYWQudXNlWEhSICYmIHN0YXJ0c1dpdGgodXJsLCAnLy8nKSkge1xuICAgIHVybCA9IChvcHQuZGVmYXVsdFByb3RvY29sIHx8ICdodHRwJykgKyAnOicgKyB1cmw7XG4gIH1cbiAgLy8gSWYgb3B0LmRvbWFpbldoaXRlTGlzdCBpcyBzZXQsIG9ubHkgYWxsb3dzIHVybCwgd2hvc2UgaG9zdG5hbWVcbiAgLy8gKiBJcyB0aGUgc2FtZSBhcyB0aGUgb3JpZ2luICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpXG4gIC8vICogRXF1YWxzIG9uZSBvZiB0aGUgdmFsdWVzIGluIHRoZSB3aGl0ZWxpc3RcbiAgLy8gKiBJcyBhIHByb3BlciBzdWJkb21haW4gb2Ygb25lIG9mIHRoZSB2YWx1ZXMgaW4gdGhlIHdoaXRlbGlzdFxuICBpZiAob3B0LmRvbWFpbldoaXRlTGlzdCkge1xuICAgIHZhciBkb21haW4sIG9yaWdpbjtcbiAgICBpZiAobG9hZC51c2VYSFIpIHtcbiAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgYS5ocmVmID0gdXJsO1xuICAgICAgLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzczNjUxMy9ob3ctZG8taS1wYXJzZS1hLXVybC1pbnRvLWhvc3RuYW1lLWFuZC1wYXRoLWluLWphdmFzY3JpcHRcbiAgICAgIC8vIElFIGRvZXNuJ3QgcG9wdWxhdGUgYWxsIGxpbmsgcHJvcGVydGllcyB3aGVuIHNldHRpbmcgLmhyZWYgd2l0aCBhIHJlbGF0aXZlIFVSTCxcbiAgICAgIC8vIGhvd2V2ZXIgLmhyZWYgd2lsbCByZXR1cm4gYW4gYWJzb2x1dGUgVVJMIHdoaWNoIHRoZW4gY2FuIGJlIHVzZWQgb24gaXRzZWxmXG4gICAgICAvLyB0byBwb3B1bGF0ZSB0aGVzZSBhZGRpdGlvbmFsIGZpZWxkcy5cbiAgICAgIGlmIChhLmhvc3QgPT09ICcnKSB7XG4gICAgICAgIGEuaHJlZiA9IGEuaHJlZjtcbiAgICAgIH1cbiAgICAgIGRvbWFpbiA9IGEuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIG9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVsYXRpdmUgcHJvdG9jb2wgaXMgYnJva2VuOiBodHRwczovL2dpdGh1Yi5jb20vZGVmdW5jdHpvbWJpZS9ub2RlLXVybC9pc3N1ZXMvNVxuICAgICAgdmFyIHBhcnRzID0gcmVxdWlyZSgndXJsJykucGFyc2UodXJsKTtcbiAgICAgIGRvbWFpbiA9IHBhcnRzLmhvc3RuYW1lO1xuICAgICAgb3JpZ2luID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAob3JpZ2luICE9PSBkb21haW4pIHtcbiAgICAgIHZhciB3aGl0ZUxpc3RlZCA9IG9wdC5kb21haW5XaGl0ZUxpc3Quc29tZShmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBpZHggPSBkb21haW4ubGVuZ3RoIC0gZC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBkID09PSBkb21haW4gfHxcbiAgICAgICAgICAoaWR4ID4gMSAmJiBkb21haW5baWR4LTFdID09PSAnLicgJiYgZG9tYWluLmxhc3RJbmRleE9mKGQpID09PSBpZHgpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXdoaXRlTGlzdGVkKSB7XG4gICAgICAgIHRocm93ICdVUkwgaXMgbm90IHdoaXRlbGlzdGVkOiAnICsgdXJsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBsb2FkKG9wdCwgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZSkgeyB0aHJvdyBlOyB9LCB1cmw7XG5cbiAgdHJ5IHtcbiAgICB1cmwgPSBsb2FkLnNhbml0aXplVXJsKG9wdCk7IC8vIGVuYWJsZSBvdmVycmlkZVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcihlcnIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgZXJyb3IoJ0ludmFsaWQgVVJMOiAnICsgb3B0LnVybCk7XG4gIH0gZWxzZSBpZiAobG9hZC51c2VYSFIpIHtcbiAgICAvLyBvbiBjbGllbnQsIHVzZSB4aHJcbiAgICByZXR1cm4geGhyKHVybCwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHN0YXJ0c1dpdGgodXJsLCBmaWxlUHJvdG9jb2wpKSB7XG4gICAgLy8gb24gc2VydmVyLCBpZiB1cmwgc3RhcnRzIHdpdGggJ2ZpbGU6Ly8nLCBzdHJpcCBpdCBhbmQgbG9hZCBmcm9tIGZpbGVcbiAgICByZXR1cm4gZmlsZSh1cmwuc2xpY2UoZmlsZVByb3RvY29sLmxlbmd0aCksIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmICh1cmwuaW5kZXhPZignOi8vJykgPCAwKSB7IC8vIFRPRE8gYmV0dGVyIHByb3RvY29sIGNoZWNrP1xuICAgIC8vIG9uIHNlcnZlciwgaWYgbm8gcHJvdG9jb2wgYXNzdW1lIGZpbGVcbiAgICByZXR1cm4gZmlsZSh1cmwsIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBmb3IgcmVndWxhciBVUkxzIG9uIHNlcnZlclxuICAgIHJldHVybiBodHRwKHVybCwgY2FsbGJhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIHhockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcbiAgdmFyIHR5cGUgPSByZXF1ZXN0LnJlc3BvbnNlVHlwZTtcbiAgcmV0dXJuIHR5cGUgJiYgdHlwZSAhPT0gJ3RleHQnID9cbiAgICByZXF1ZXN0LnJlc3BvbnNlIDogLy8gbnVsbCBvbiBlcnJvclxuICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0OyAvLyAnJyBvbiBlcnJvclxufVxuXG5mdW5jdGlvbiB4aHIodXJsLCBjYWxsYmFjaykge1xuICB2YXIgYXN5bmMgPSAhIWNhbGxiYWNrO1xuICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAvLyBJZiBJRSBkb2VzIG5vdCBzdXBwb3J0IENPUlMsIHVzZSBYRG9tYWluUmVxdWVzdCAoY29waWVkIGZyb20gZDMueGhyKVxuICBpZiAodGhpcy5YRG9tYWluUmVxdWVzdCAmJlxuICAgICAgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgL14oaHR0cChzKT86KT9cXC9cXC8vLnRlc3QodXJsKSkgcmVxdWVzdCA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuXG4gIGZ1bmN0aW9uIHJlc3BvbmQoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHJlcXVlc3Quc3RhdHVzO1xuICAgIGlmICghc3RhdHVzICYmIHhockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHx8IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0KSB7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHJlcXVlc3QsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhc3luYykge1xuICAgIGlmICgnb25sb2FkJyBpbiByZXF1ZXN0KSB7XG4gICAgICByZXF1ZXN0Lm9ubG9hZCA9IHJlcXVlc3Qub25lcnJvciA9IHJlc3BvbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPiAzKSByZXNwb25kKCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBcbiAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIGFzeW5jKTtcbiAgcmVxdWVzdC5zZW5kKCk7XG4gIFxuICBpZiAoIWFzeW5jICYmIHhockhhc1Jlc3BvbnNlKHJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbGUoZmlsZW5hbWUsIGNhbGxiYWNrKSB7XG4gIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmOCcpO1xuICB9XG4gIGZzLnJlYWRGaWxlKGZpbGVuYW1lLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGh0dHAodXJsLCBjYWxsYmFjaykge1xuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ3N5bmMtcmVxdWVzdCcpKCdHRVQnLCB1cmwpLmdldEJvZHkoKTtcbiAgfVxuICBcbiAgdmFyIG9wdGlvbnMgPSB7dXJsOiB1cmwsIGVuY29kaW5nOiBudWxsLCBnemlwOiB0cnVlfTtcbiAgcmVxdWlyZSgncmVxdWVzdCcpKG9wdGlvbnMsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgIGlmICghZXJyb3IgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3IgPSBlcnJvciB8fFxuICAgICAgICAnTG9hZCBmYWlsZWQgd2l0aCByZXNwb25zZSBjb2RlICcgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgJy4nO1xuICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCBzZWFyY2hTdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZyA9PSBudWxsID8gZmFsc2UgOiBzdHJpbmcubGFzdEluZGV4T2Yoc2VhcmNoU3RyaW5nLCAwKSA9PT0gMDtcbn1cblxubG9hZC5zYW5pdGl6ZVVybCA9IHNhbml0aXplVXJsO1xuXG5sb2FkLnVzZVhIUiA9ICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsb2FkO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhdGg6ICAgICAgIHJlcXVpcmUoJy4vcGF0aCcpLFxuICByZW5kZXI6ICAgICByZXF1aXJlKCcuL3JlbmRlcicpLFxuICBJdGVtOiAgICAgICByZXF1aXJlKCcuL3V0aWwvSXRlbScpLFxuICBib3VuZDogICAgICByZXF1aXJlKCcuL3V0aWwvYm91bmQnKSxcbiAgQm91bmRzOiAgICAgcmVxdWlyZSgnLi91dGlsL0JvdW5kcycpLFxuICBjYW52YXM6ICAgICByZXF1aXJlKCcuL3V0aWwvY2FudmFzJyksXG4gIEdyYWRpZW50OiAgIHJlcXVpcmUoJy4vdXRpbC9HcmFkaWVudCcpLFxuICB0b0pTT046ICAgICByZXF1aXJlKCcuL3V0aWwvc2NlbmUnKS50b0pTT04sXG4gIGZyb21KU09OOiAgIHJlcXVpcmUoJy4vdXRpbC9zY2VuZScpLmZyb21KU09OXG59OyIsInZhciBzZWdtZW50Q2FjaGUgPSB7fSxcbiAgICBiZXppZXJDYWNoZSA9IHt9LFxuICAgIGpvaW4gPSBbXS5qb2luO1xuXG4vLyBDb3BpZWQgZnJvbSBJbmtzY2FwZSBzdmd0b3BkZiwgdGhhbmtzIVxuZnVuY3Rpb24gc2VnbWVudHMoeCwgeSwgcngsIHJ5LCBsYXJnZSwgc3dlZXAsIHJvdGF0ZVgsIG94LCBveSkge1xuICB2YXIga2V5ID0gam9pbi5jYWxsKGFyZ3VtZW50cyk7XG4gIGlmIChzZWdtZW50Q2FjaGVba2V5XSkge1xuICAgIHJldHVybiBzZWdtZW50Q2FjaGVba2V5XTtcbiAgfVxuXG4gIHZhciB0aCA9IHJvdGF0ZVggKiAoTWF0aC5QSS8xODApO1xuICB2YXIgc2luX3RoID0gTWF0aC5zaW4odGgpO1xuICB2YXIgY29zX3RoID0gTWF0aC5jb3ModGgpO1xuICByeCA9IE1hdGguYWJzKHJ4KTtcbiAgcnkgPSBNYXRoLmFicyhyeSk7XG4gIHZhciBweCA9IGNvc190aCAqIChveCAtIHgpICogMC41ICsgc2luX3RoICogKG95IC0geSkgKiAwLjU7XG4gIHZhciBweSA9IGNvc190aCAqIChveSAtIHkpICogMC41IC0gc2luX3RoICogKG94IC0geCkgKiAwLjU7XG4gIHZhciBwbCA9IChweCpweCkgLyAocngqcngpICsgKHB5KnB5KSAvIChyeSpyeSk7XG4gIGlmIChwbCA+IDEpIHtcbiAgICBwbCA9IE1hdGguc3FydChwbCk7XG4gICAgcnggKj0gcGw7XG4gICAgcnkgKj0gcGw7XG4gIH1cblxuICB2YXIgYTAwID0gY29zX3RoIC8gcng7XG4gIHZhciBhMDEgPSBzaW5fdGggLyByeDtcbiAgdmFyIGExMCA9ICgtc2luX3RoKSAvIHJ5O1xuICB2YXIgYTExID0gKGNvc190aCkgLyByeTtcbiAgdmFyIHgwID0gYTAwICogb3ggKyBhMDEgKiBveTtcbiAgdmFyIHkwID0gYTEwICogb3ggKyBhMTEgKiBveTtcbiAgdmFyIHgxID0gYTAwICogeCArIGEwMSAqIHk7XG4gIHZhciB5MSA9IGExMCAqIHggKyBhMTEgKiB5O1xuXG4gIHZhciBkID0gKHgxLXgwKSAqICh4MS14MCkgKyAoeTEteTApICogKHkxLXkwKTtcbiAgdmFyIHNmYWN0b3Jfc3EgPSAxIC8gZCAtIDAuMjU7XG4gIGlmIChzZmFjdG9yX3NxIDwgMCkgc2ZhY3Rvcl9zcSA9IDA7XG4gIHZhciBzZmFjdG9yID0gTWF0aC5zcXJ0KHNmYWN0b3Jfc3EpO1xuICBpZiAoc3dlZXAgPT0gbGFyZ2UpIHNmYWN0b3IgPSAtc2ZhY3RvcjtcbiAgdmFyIHhjID0gMC41ICogKHgwICsgeDEpIC0gc2ZhY3RvciAqICh5MS15MCk7XG4gIHZhciB5YyA9IDAuNSAqICh5MCArIHkxKSArIHNmYWN0b3IgKiAoeDEteDApO1xuXG4gIHZhciB0aDAgPSBNYXRoLmF0YW4yKHkwLXljLCB4MC14Yyk7XG4gIHZhciB0aDEgPSBNYXRoLmF0YW4yKHkxLXljLCB4MS14Yyk7XG5cbiAgdmFyIHRoX2FyYyA9IHRoMS10aDA7XG4gIGlmICh0aF9hcmMgPCAwICYmIHN3ZWVwID09PSAxKXtcbiAgICB0aF9hcmMgKz0gMiAqIE1hdGguUEk7XG4gIH0gZWxzZSBpZiAodGhfYXJjID4gMCAmJiBzd2VlcCA9PT0gMCkge1xuICAgIHRoX2FyYyAtPSAyICogTWF0aC5QSTtcbiAgfVxuXG4gIHZhciBzZWdzID0gTWF0aC5jZWlsKE1hdGguYWJzKHRoX2FyYyAvIChNYXRoLlBJICogMC41ICsgMC4wMDEpKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaT0wOyBpPHNlZ3M7ICsraSkge1xuICAgIHZhciB0aDIgPSB0aDAgKyBpICogdGhfYXJjIC8gc2VncztcbiAgICB2YXIgdGgzID0gdGgwICsgKGkrMSkgKiB0aF9hcmMgLyBzZWdzO1xuICAgIHJlc3VsdFtpXSA9IFt4YywgeWMsIHRoMiwgdGgzLCByeCwgcnksIHNpbl90aCwgY29zX3RoXTtcbiAgfVxuXG4gIHJldHVybiAoc2VnbWVudENhY2hlW2tleV0gPSByZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBiZXppZXIocGFyYW1zKSB7XG4gIHZhciBrZXkgPSBqb2luLmNhbGwocGFyYW1zKTtcbiAgaWYgKGJlemllckNhY2hlW2tleV0pIHtcbiAgICByZXR1cm4gYmV6aWVyQ2FjaGVba2V5XTtcbiAgfVxuICBcbiAgdmFyIGN4ID0gcGFyYW1zWzBdLFxuICAgICAgY3kgPSBwYXJhbXNbMV0sXG4gICAgICB0aDAgPSBwYXJhbXNbMl0sXG4gICAgICB0aDEgPSBwYXJhbXNbM10sXG4gICAgICByeCA9IHBhcmFtc1s0XSxcbiAgICAgIHJ5ID0gcGFyYW1zWzVdLFxuICAgICAgc2luX3RoID0gcGFyYW1zWzZdLFxuICAgICAgY29zX3RoID0gcGFyYW1zWzddO1xuXG4gIHZhciBhMDAgPSBjb3NfdGggKiByeDtcbiAgdmFyIGEwMSA9IC1zaW5fdGggKiByeTtcbiAgdmFyIGExMCA9IHNpbl90aCAqIHJ4O1xuICB2YXIgYTExID0gY29zX3RoICogcnk7XG5cbiAgdmFyIGNvc190aDAgPSBNYXRoLmNvcyh0aDApO1xuICB2YXIgc2luX3RoMCA9IE1hdGguc2luKHRoMCk7XG4gIHZhciBjb3NfdGgxID0gTWF0aC5jb3ModGgxKTtcbiAgdmFyIHNpbl90aDEgPSBNYXRoLnNpbih0aDEpO1xuXG4gIHZhciB0aF9oYWxmID0gMC41ICogKHRoMSAtIHRoMCk7XG4gIHZhciBzaW5fdGhfaDIgPSBNYXRoLnNpbih0aF9oYWxmICogMC41KTtcbiAgdmFyIHQgPSAoOC8zKSAqIHNpbl90aF9oMiAqIHNpbl90aF9oMiAvIE1hdGguc2luKHRoX2hhbGYpO1xuICB2YXIgeDEgPSBjeCArIGNvc190aDAgLSB0ICogc2luX3RoMDtcbiAgdmFyIHkxID0gY3kgKyBzaW5fdGgwICsgdCAqIGNvc190aDA7XG4gIHZhciB4MyA9IGN4ICsgY29zX3RoMTtcbiAgdmFyIHkzID0gY3kgKyBzaW5fdGgxO1xuICB2YXIgeDIgPSB4MyArIHQgKiBzaW5fdGgxO1xuICB2YXIgeTIgPSB5MyAtIHQgKiBjb3NfdGgxO1xuXG4gIHJldHVybiAoYmV6aWVyQ2FjaGVba2V5XSA9IFtcbiAgICBhMDAgKiB4MSArIGEwMSAqIHkxLCAgYTEwICogeDEgKyBhMTEgKiB5MSxcbiAgICBhMDAgKiB4MiArIGEwMSAqIHkyLCAgYTEwICogeDIgKyBhMTEgKiB5MixcbiAgICBhMDAgKiB4MyArIGEwMSAqIHkzLCAgYTEwICogeDMgKyBhMTEgKiB5M1xuICBdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNlZ21lbnRzOiBzZWdtZW50cyxcbiAgYmV6aWVyOiBiZXppZXIsXG4gIGNhY2hlOiB7XG4gICAgc2VnbWVudHM6IHNlZ21lbnRDYWNoZSxcbiAgICBiZXppZXI6IGJlemllckNhY2hlXG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFyc2U6ICByZXF1aXJlKCcuL3BhcnNlJyksXG4gIHJlbmRlcjogcmVxdWlyZSgnLi9yZW5kZXInKVxufTtcbiIsIi8vIFBhdGggcGFyc2luZyBhbmQgcmVuZGVyaW5nIGNvZGUgYWRhcHRlZCBmcm9tIGZhYnJpYy5qcyAtLSBUaGFua3MhXG52YXIgY21kbGVuID0geyBtOjIsIGw6MiwgaDoxLCB2OjEsIGM6Niwgczo0LCBxOjQsIHQ6MiwgYTo3IH0sXG4gICAgcmVnZXhwID0gWy8oW01MSFZDU1FUQVptbGh2Y3NxdGF6XSkvZywgLyMjIy8sIC8oXFxkKShbLStdKS9nLCAvXFxzfCx8IyMjL107XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGF0aHN0cikge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICBwYXRoLFxuICAgICAgY3VycixcbiAgICAgIGNodW5rcyxcbiAgICAgIHBhcnNlZCwgcGFyYW0sXG4gICAgICBjbWQsIGxlbiwgaSwgaiwgbiwgbTtcblxuICAvLyBGaXJzdCwgYnJlYWsgcGF0aCBpbnRvIGNvbW1hbmQgc2VxdWVuY2VcbiAgcGF0aCA9IHBhdGhzdHJcbiAgICAuc2xpY2UoKVxuICAgIC5yZXBsYWNlKHJlZ2V4cFswXSwgJyMjIyQxJylcbiAgICAuc3BsaXQocmVnZXhwWzFdKVxuICAgIC5zbGljZSgxKTtcblxuICAvLyBOZXh0LCBwYXJzZSBlYWNoIGNvbW1hbmQgaW4gdHVyblxuICBmb3IgKGk9MCwgbj1wYXRoLmxlbmd0aDsgaTxuOyArK2kpIHtcbiAgICBjdXJyID0gcGF0aFtpXTtcbiAgICBjaHVua3MgPSBjdXJyXG4gICAgICAuc2xpY2UoMSlcbiAgICAgIC50cmltKClcbiAgICAgIC5yZXBsYWNlKHJlZ2V4cFsyXSwnJDEjIyMkMicpXG4gICAgICAuc3BsaXQocmVnZXhwWzNdKTtcbiAgICBjbWQgPSBjdXJyLmNoYXJBdCgwKTtcblxuICAgIHBhcnNlZCA9IFtjbWRdO1xuICAgIGZvciAoaj0wLCBtPWNodW5rcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgICBpZiAoKHBhcmFtID0gK2NodW5rc1tqXSkgPT09IHBhcmFtKSB7IC8vIG5vdCBOYU5cbiAgICAgICAgcGFyc2VkLnB1c2gocGFyYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxlbiA9IGNtZGxlbltjbWQudG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKHBhcnNlZC5sZW5ndGgtMSA+IGxlbikge1xuICAgICAgZm9yIChqPTEsIG09cGFyc2VkLmxlbmd0aDsgajxtOyBqKz1sZW4pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goW2NtZF0uY29uY2F0KHBhcnNlZC5zbGljZShqLCBqK2xlbikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChwYXJzZWQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGFyYyA9IHJlcXVpcmUoJy4vYXJjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZywgcGF0aCwgbCwgdCkge1xuICB2YXIgY3VycmVudCwgLy8gY3VycmVudCBpbnN0cnVjdGlvblxuICAgICAgcHJldmlvdXMgPSBudWxsLFxuICAgICAgeCA9IDAsIC8vIGN1cnJlbnQgeFxuICAgICAgeSA9IDAsIC8vIGN1cnJlbnQgeVxuICAgICAgY29udHJvbFggPSAwLCAvLyBjdXJyZW50IGNvbnRyb2wgcG9pbnQgeFxuICAgICAgY29udHJvbFkgPSAwLCAvLyBjdXJyZW50IGNvbnRyb2wgcG9pbnQgeVxuICAgICAgdGVtcFgsXG4gICAgICB0ZW1wWSxcbiAgICAgIHRlbXBDb250cm9sWCxcbiAgICAgIHRlbXBDb250cm9sWTtcblxuICBpZiAobCA9PSBudWxsKSBsID0gMDtcbiAgaWYgKHQgPT0gbnVsbCkgdCA9IDA7XG5cbiAgZy5iZWdpblBhdGgoKTtcblxuICBmb3IgKHZhciBpPTAsIGxlbj1wYXRoLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgIGN1cnJlbnQgPSBwYXRoW2ldO1xuXG4gICAgc3dpdGNoIChjdXJyZW50WzBdKSB7IC8vIGZpcnN0IGxldHRlclxuXG4gICAgICBjYXNlICdsJzogLy8gbGluZXRvLCByZWxhdGl2ZVxuICAgICAgICB4ICs9IGN1cnJlbnRbMV07XG4gICAgICAgIHkgKz0gY3VycmVudFsyXTtcbiAgICAgICAgZy5saW5lVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0wnOiAvLyBsaW5ldG8sIGFic29sdXRlXG4gICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgZy5saW5lVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2gnOiAvLyBob3Jpem9udGFsIGxpbmV0bywgcmVsYXRpdmVcbiAgICAgICAgeCArPSBjdXJyZW50WzFdO1xuICAgICAgICBnLmxpbmVUbyh4ICsgbCwgeSArIHQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnSCc6IC8vIGhvcml6b250YWwgbGluZXRvLCBhYnNvbHV0ZVxuICAgICAgICB4ID0gY3VycmVudFsxXTtcbiAgICAgICAgZy5saW5lVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3YnOiAvLyB2ZXJ0aWNhbCBsaW5ldG8sIHJlbGF0aXZlXG4gICAgICAgIHkgKz0gY3VycmVudFsxXTtcbiAgICAgICAgZy5saW5lVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1YnOiAvLyB2ZXJpY2FsIGxpbmV0bywgYWJzb2x1dGVcbiAgICAgICAgeSA9IGN1cnJlbnRbMV07XG4gICAgICAgIGcubGluZVRvKHggKyBsLCB5ICsgdCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtJzogLy8gbW92ZVRvLCByZWxhdGl2ZVxuICAgICAgICB4ICs9IGN1cnJlbnRbMV07XG4gICAgICAgIHkgKz0gY3VycmVudFsyXTtcbiAgICAgICAgZy5tb3ZlVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ00nOiAvLyBtb3ZlVG8sIGFic29sdXRlXG4gICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgZy5tb3ZlVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2MnOiAvLyBiZXppZXJDdXJ2ZVRvLCByZWxhdGl2ZVxuICAgICAgICB0ZW1wWCA9IHggKyBjdXJyZW50WzVdO1xuICAgICAgICB0ZW1wWSA9IHkgKyBjdXJyZW50WzZdO1xuICAgICAgICBjb250cm9sWCA9IHggKyBjdXJyZW50WzNdO1xuICAgICAgICBjb250cm9sWSA9IHkgKyBjdXJyZW50WzRdO1xuICAgICAgICBnLmJlemllckN1cnZlVG8oXG4gICAgICAgICAgeCArIGN1cnJlbnRbMV0gKyBsLCAvLyB4MVxuICAgICAgICAgIHkgKyBjdXJyZW50WzJdICsgdCwgLy8geTFcbiAgICAgICAgICBjb250cm9sWCArIGwsIC8vIHgyXG4gICAgICAgICAgY29udHJvbFkgKyB0LCAvLyB5MlxuICAgICAgICAgIHRlbXBYICsgbCxcbiAgICAgICAgICB0ZW1wWSArIHRcbiAgICAgICAgKTtcbiAgICAgICAgeCA9IHRlbXBYO1xuICAgICAgICB5ID0gdGVtcFk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdDJzogLy8gYmV6aWVyQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgeCA9IGN1cnJlbnRbNV07XG4gICAgICAgIHkgPSBjdXJyZW50WzZdO1xuICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbM107XG4gICAgICAgIGNvbnRyb2xZID0gY3VycmVudFs0XTtcbiAgICAgICAgZy5iZXppZXJDdXJ2ZVRvKFxuICAgICAgICAgIGN1cnJlbnRbMV0gKyBsLFxuICAgICAgICAgIGN1cnJlbnRbMl0gKyB0LFxuICAgICAgICAgIGNvbnRyb2xYICsgbCxcbiAgICAgICAgICBjb250cm9sWSArIHQsXG4gICAgICAgICAgeCArIGwsXG4gICAgICAgICAgeSArIHRcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3MnOiAvLyBzaG9ydGhhbmQgY3ViaWMgYmV6aWVyQ3VydmVUbywgcmVsYXRpdmVcbiAgICAgICAgLy8gdHJhbnNmb3JtIHRvIGFic29sdXRlIHgseVxuICAgICAgICB0ZW1wWCA9IHggKyBjdXJyZW50WzNdO1xuICAgICAgICB0ZW1wWSA9IHkgKyBjdXJyZW50WzRdO1xuICAgICAgICAvLyBjYWxjdWxhdGUgcmVmbGVjdGlvbiBvZiBwcmV2aW91cyBjb250cm9sIHBvaW50c1xuICAgICAgICBjb250cm9sWCA9IDIgKiB4IC0gY29udHJvbFg7XG4gICAgICAgIGNvbnRyb2xZID0gMiAqIHkgLSBjb250cm9sWTtcbiAgICAgICAgZy5iZXppZXJDdXJ2ZVRvKFxuICAgICAgICAgIGNvbnRyb2xYICsgbCxcbiAgICAgICAgICBjb250cm9sWSArIHQsXG4gICAgICAgICAgeCArIGN1cnJlbnRbMV0gKyBsLFxuICAgICAgICAgIHkgKyBjdXJyZW50WzJdICsgdCxcbiAgICAgICAgICB0ZW1wWCArIGwsXG4gICAgICAgICAgdGVtcFkgKyB0XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gc2V0IGNvbnRyb2wgcG9pbnQgdG8gMm5kIG9uZSBvZiB0aGlzIGNvbW1hbmRcbiAgICAgICAgLy8gdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQgaXMgYXNzdW1lZCB0byBiZSB0aGUgcmVmbGVjdGlvbiBvZlxuICAgICAgICAvLyB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnQgb24gdGhlIHByZXZpb3VzIGNvbW1hbmQgcmVsYXRpdmVcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgcG9pbnQuXG4gICAgICAgIGNvbnRyb2xYID0geCArIGN1cnJlbnRbMV07XG4gICAgICAgIGNvbnRyb2xZID0geSArIGN1cnJlbnRbMl07XG5cbiAgICAgICAgeCA9IHRlbXBYO1xuICAgICAgICB5ID0gdGVtcFk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdTJzogLy8gc2hvcnRoYW5kIGN1YmljIGJlemllckN1cnZlVG8sIGFic29sdXRlXG4gICAgICAgIHRlbXBYID0gY3VycmVudFszXTtcbiAgICAgICAgdGVtcFkgPSBjdXJyZW50WzRdO1xuICAgICAgICAvLyBjYWxjdWxhdGUgcmVmbGVjdGlvbiBvZiBwcmV2aW91cyBjb250cm9sIHBvaW50c1xuICAgICAgICBjb250cm9sWCA9IDIqeCAtIGNvbnRyb2xYO1xuICAgICAgICBjb250cm9sWSA9IDIqeSAtIGNvbnRyb2xZO1xuICAgICAgICBnLmJlemllckN1cnZlVG8oXG4gICAgICAgICAgY29udHJvbFggKyBsLFxuICAgICAgICAgIGNvbnRyb2xZICsgdCxcbiAgICAgICAgICBjdXJyZW50WzFdICsgbCxcbiAgICAgICAgICBjdXJyZW50WzJdICsgdCxcbiAgICAgICAgICB0ZW1wWCArIGwsXG4gICAgICAgICAgdGVtcFkgKyB0XG4gICAgICAgICk7XG4gICAgICAgIHggPSB0ZW1wWDtcbiAgICAgICAgeSA9IHRlbXBZO1xuICAgICAgICAvLyBzZXQgY29udHJvbCBwb2ludCB0byAybmQgb25lIG9mIHRoaXMgY29tbWFuZFxuICAgICAgICAvLyB0aGUgZmlyc3QgY29udHJvbCBwb2ludCBpcyBhc3N1bWVkIHRvIGJlIHRoZSByZWZsZWN0aW9uIG9mXG4gICAgICAgIC8vIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludCBvbiB0aGUgcHJldmlvdXMgY29tbWFuZCByZWxhdGl2ZVxuICAgICAgICAvLyB0byB0aGUgY3VycmVudCBwb2ludC5cbiAgICAgICAgY29udHJvbFggPSBjdXJyZW50WzFdO1xuICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbMl07XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3EnOiAvLyBxdWFkcmF0aWNDdXJ2ZVRvLCByZWxhdGl2ZVxuICAgICAgICAvLyB0cmFuc2Zvcm0gdG8gYWJzb2x1dGUgeCx5XG4gICAgICAgIHRlbXBYID0geCArIGN1cnJlbnRbM107XG4gICAgICAgIHRlbXBZID0geSArIGN1cnJlbnRbNF07XG5cbiAgICAgICAgY29udHJvbFggPSB4ICsgY3VycmVudFsxXTtcbiAgICAgICAgY29udHJvbFkgPSB5ICsgY3VycmVudFsyXTtcblxuICAgICAgICBnLnF1YWRyYXRpY0N1cnZlVG8oXG4gICAgICAgICAgY29udHJvbFggKyBsLFxuICAgICAgICAgIGNvbnRyb2xZICsgdCxcbiAgICAgICAgICB0ZW1wWCArIGwsXG4gICAgICAgICAgdGVtcFkgKyB0XG4gICAgICAgICk7XG4gICAgICAgIHggPSB0ZW1wWDtcbiAgICAgICAgeSA9IHRlbXBZO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUSc6IC8vIHF1YWRyYXRpY0N1cnZlVG8sIGFic29sdXRlXG4gICAgICAgIHRlbXBYID0gY3VycmVudFszXTtcbiAgICAgICAgdGVtcFkgPSBjdXJyZW50WzRdO1xuXG4gICAgICAgIGcucXVhZHJhdGljQ3VydmVUbyhcbiAgICAgICAgICBjdXJyZW50WzFdICsgbCxcbiAgICAgICAgICBjdXJyZW50WzJdICsgdCxcbiAgICAgICAgICB0ZW1wWCArIGwsXG4gICAgICAgICAgdGVtcFkgKyB0XG4gICAgICAgICk7XG4gICAgICAgIHggPSB0ZW1wWDtcbiAgICAgICAgeSA9IHRlbXBZO1xuICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbMV07XG4gICAgICAgIGNvbnRyb2xZID0gY3VycmVudFsyXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3QnOiAvLyBzaG9ydGhhbmQgcXVhZHJhdGljQ3VydmVUbywgcmVsYXRpdmVcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdG8gYWJzb2x1dGUgeCx5XG4gICAgICAgIHRlbXBYID0geCArIGN1cnJlbnRbMV07XG4gICAgICAgIHRlbXBZID0geSArIGN1cnJlbnRbMl07XG5cbiAgICAgICAgaWYgKHByZXZpb3VzWzBdLm1hdGNoKC9bUXFUdF0vKSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHByZXZpb3VzIGNvbW1hbmQgb3IgaWYgdGhlIHByZXZpb3VzIGNvbW1hbmQgd2FzIG5vdCBhIFEsIHEsIFQgb3IgdCxcbiAgICAgICAgICAvLyBhc3N1bWUgdGhlIGNvbnRyb2wgcG9pbnQgaXMgY29pbmNpZGVudCB3aXRoIHRoZSBjdXJyZW50IHBvaW50XG4gICAgICAgICAgY29udHJvbFggPSB4O1xuICAgICAgICAgIGNvbnRyb2xZID0geTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2aW91c1swXSA9PT0gJ3QnKSB7XG4gICAgICAgICAgLy8gY2FsY3VsYXRlIHJlZmxlY3Rpb24gb2YgcHJldmlvdXMgY29udHJvbCBwb2ludHMgZm9yIHRcbiAgICAgICAgICBjb250cm9sWCA9IDIgKiB4IC0gdGVtcENvbnRyb2xYO1xuICAgICAgICAgIGNvbnRyb2xZID0gMiAqIHkgLSB0ZW1wQ29udHJvbFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldmlvdXNbMF0gPT09ICdxJykge1xuICAgICAgICAgIC8vIGNhbGN1bGF0ZSByZWZsZWN0aW9uIG9mIHByZXZpb3VzIGNvbnRyb2wgcG9pbnRzIGZvciBxXG4gICAgICAgICAgY29udHJvbFggPSAyICogeCAtIGNvbnRyb2xYO1xuICAgICAgICAgIGNvbnRyb2xZID0gMiAqIHkgLSBjb250cm9sWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRlbXBDb250cm9sWCA9IGNvbnRyb2xYO1xuICAgICAgICB0ZW1wQ29udHJvbFkgPSBjb250cm9sWTtcblxuICAgICAgICBnLnF1YWRyYXRpY0N1cnZlVG8oXG4gICAgICAgICAgY29udHJvbFggKyBsLFxuICAgICAgICAgIGNvbnRyb2xZICsgdCxcbiAgICAgICAgICB0ZW1wWCArIGwsXG4gICAgICAgICAgdGVtcFkgKyB0XG4gICAgICAgICk7XG4gICAgICAgIHggPSB0ZW1wWDtcbiAgICAgICAgeSA9IHRlbXBZO1xuICAgICAgICBjb250cm9sWCA9IHggKyBjdXJyZW50WzFdO1xuICAgICAgICBjb250cm9sWSA9IHkgKyBjdXJyZW50WzJdO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnVCc6XG4gICAgICAgIHRlbXBYID0gY3VycmVudFsxXTtcbiAgICAgICAgdGVtcFkgPSBjdXJyZW50WzJdO1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSByZWZsZWN0aW9uIG9mIHByZXZpb3VzIGNvbnRyb2wgcG9pbnRzXG4gICAgICAgIGNvbnRyb2xYID0gMiAqIHggLSBjb250cm9sWDtcbiAgICAgICAgY29udHJvbFkgPSAyICogeSAtIGNvbnRyb2xZO1xuICAgICAgICBnLnF1YWRyYXRpY0N1cnZlVG8oXG4gICAgICAgICAgY29udHJvbFggKyBsLFxuICAgICAgICAgIGNvbnRyb2xZICsgdCxcbiAgICAgICAgICB0ZW1wWCArIGwsXG4gICAgICAgICAgdGVtcFkgKyB0XG4gICAgICAgICk7XG4gICAgICAgIHggPSB0ZW1wWDtcbiAgICAgICAgeSA9IHRlbXBZO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIGRyYXdBcmMoZywgeCArIGwsIHkgKyB0LCBbXG4gICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICBjdXJyZW50WzJdLFxuICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgY3VycmVudFs0XSxcbiAgICAgICAgICBjdXJyZW50WzVdLFxuICAgICAgICAgIGN1cnJlbnRbNl0gKyB4ICsgbCxcbiAgICAgICAgICBjdXJyZW50WzddICsgeSArIHRcbiAgICAgICAgXSk7XG4gICAgICAgIHggKz0gY3VycmVudFs2XTtcbiAgICAgICAgeSArPSBjdXJyZW50WzddO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnQSc6XG4gICAgICAgIGRyYXdBcmMoZywgeCArIGwsIHkgKyB0LCBbXG4gICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICBjdXJyZW50WzJdLFxuICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgY3VycmVudFs0XSxcbiAgICAgICAgICBjdXJyZW50WzVdLFxuICAgICAgICAgIGN1cnJlbnRbNl0gKyBsLFxuICAgICAgICAgIGN1cnJlbnRbN10gKyB0XG4gICAgICAgIF0pO1xuICAgICAgICB4ID0gY3VycmVudFs2XTtcbiAgICAgICAgeSA9IGN1cnJlbnRbN107XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ1onOlxuICAgICAgICBnLmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldmlvdXMgPSBjdXJyZW50O1xuICB9XG59O1xuXG5mdW5jdGlvbiBkcmF3QXJjKGcsIHgsIHksIGNvb3Jkcykge1xuICB2YXIgc2VnID0gYXJjLnNlZ21lbnRzKFxuICAgIGNvb3Jkc1s1XSwgLy8gZW5kIHhcbiAgICBjb29yZHNbNl0sIC8vIGVuZCB5XG4gICAgY29vcmRzWzBdLCAvLyByYWRpdXMgeFxuICAgIGNvb3Jkc1sxXSwgLy8gcmFkaXVzIHlcbiAgICBjb29yZHNbM10sIC8vIGxhcmdlIGZsYWdcbiAgICBjb29yZHNbNF0sIC8vIHN3ZWVwIGZsYWdcbiAgICBjb29yZHNbMl0sIC8vIHJvdGF0aW9uXG4gICAgeCwgeVxuICApO1xuICBmb3IgKHZhciBpPTA7IGk8c2VnLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJleiA9IGFyYy5iZXppZXIoc2VnW2ldKTtcbiAgICBnLmJlemllckN1cnZlVG8uYXBwbHkoZywgYmV6KTtcbiAgfVxufVxuIiwiZnVuY3Rpb24gSGFuZGxlcigpIHtcbiAgdGhpcy5fYWN0aXZlID0gbnVsbDtcbiAgdGhpcy5faGFuZGxlcnMgPSB7fTtcbn1cblxudmFyIHByb3RvdHlwZSA9IEhhbmRsZXIucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGVsLCBwYWQsIG9iaikge1xuICB0aGlzLl9lbCA9IGVsO1xuICB0aGlzLl9vYmogPSBvYmogfHwgbnVsbDtcbiAgcmV0dXJuIHRoaXMucGFkZGluZyhwYWQpO1xufTtcblxucHJvdG90eXBlLmVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2VsO1xufTtcblxucHJvdG90eXBlLnBhZGRpbmcgPSBmdW5jdGlvbihwYWQpIHtcbiAgdGhpcy5fcGFkZGluZyA9IHBhZCB8fCB7dG9wOjAsIGxlZnQ6MCwgYm90dG9tOjAsIHJpZ2h0OjB9O1xuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5zY2VuZSA9IGZ1bmN0aW9uKHNjZW5lKSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3NjZW5lO1xuICB0aGlzLl9zY2VuZSA9IHNjZW5lO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGFkZCBhbiBldmVudCBoYW5kbGVyXG4vLyBzdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZVxucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oLyp0eXBlLCBoYW5kbGVyKi8pIHt9O1xuXG4vLyByZW1vdmUgYW4gZXZlbnQgaGFuZGxlclxuLy8gc3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGVcbnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbigvKnR5cGUsIGhhbmRsZXIqLykge307XG5cbi8vIHJldHVybiBhbiBhcnJheSB3aXRoIGFsbCByZWdpc3RlcmVkIGV2ZW50IGhhbmRsZXJzXG5wcm90b3R5cGUuaGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGggPSB0aGlzLl9oYW5kbGVycywgYSA9IFtdLCBrO1xuICBmb3IgKGsgaW4gaCkgeyBhLnB1c2guYXBwbHkoYSwgaFtrXSk7IH1cbiAgcmV0dXJuIGE7XG59O1xuXG5wcm90b3R5cGUuZXZlbnROYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaSA9IG5hbWUuaW5kZXhPZignLicpO1xuICByZXR1cm4gaSA8IDAgPyBuYW1lIDogbmFtZS5zbGljZSgwLGkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIYW5kbGVyOyIsImZ1bmN0aW9uIFJlbmRlcmVyKCkge1xuICB0aGlzLl9lbCA9IG51bGw7XG4gIHRoaXMuX2JnY29sb3IgPSBudWxsO1xufVxuXG52YXIgcHJvdG90eXBlID0gUmVuZGVyZXIucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGVsLCB3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nKSB7XG4gIHRoaXMuX2VsID0gZWw7XG4gIHJldHVybiB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nKTtcbn07XG5cbi8vIFJldHVybnMgdGhlIHBhcmVudCBjb250YWluZXIgZWxlbWVudCBmb3IgYSB2aXN1YWxpemF0aW9uXG5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZWw7XG59O1xuXG4vLyBSZXR1cm5zIHRoZSBzY2VuZSBlbGVtZW50IChlLmcuLCBjYW52YXMgb3IgU1ZHKSBvZiB0aGUgdmlzdWFsaXphdGlvblxuLy8gU3ViY2xhc3NlcyBtdXN0IG92ZXJyaWRlIGlmIHRoZSBmaXJzdCBjaGlsZCBpcyBub3QgdGhlIHNjZW5lIGVsZW1lbnRcbnByb3RvdHlwZS5zY2VuZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZWwgJiYgdGhpcy5fZWwuZmlyc3RDaGlsZDtcbn07XG5cbnByb3RvdHlwZS5iYWNrZ3JvdW5kID0gZnVuY3Rpb24oYmdjb2xvcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuX2JnY29sb3I7XG4gIHRoaXMuX2JnY29sb3IgPSBiZ2NvbG9yO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nKSB7XG4gIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgdGhpcy5fcGFkZGluZyA9IHBhZGRpbmcgfHwge3RvcDowLCBsZWZ0OjAsIGJvdHRvbTowLCByaWdodDowfTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oLypzY2VuZSwgaXRlbXMqLykge1xuICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyZXI7IiwidmFyIERPTSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZG9tJyksXG4gICAgSGFuZGxlciA9IHJlcXVpcmUoJy4uL0hhbmRsZXInKSxcbiAgICBtYXJrcyA9IHJlcXVpcmUoJy4vbWFya3MnKTtcblxuZnVuY3Rpb24gQ2FudmFzSGFuZGxlcigpIHtcbiAgSGFuZGxlci5jYWxsKHRoaXMpO1xuICB0aGlzLl9kb3duID0gbnVsbDtcbiAgdGhpcy5fdG91Y2ggPSBudWxsO1xuICB0aGlzLl9maXJzdCA9IHRydWU7XG59XG5cbnZhciBiYXNlID0gSGFuZGxlci5wcm90b3R5cGU7XG52YXIgcHJvdG90eXBlID0gKENhbnZhc0hhbmRsZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlKSk7XG5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYW52YXNIYW5kbGVyO1xuXG5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGVsLCBwYWQsIG9iaikge1xuICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gIHZhciBjYW52YXMgPSB0aGlzLl9jYW52YXMgPSBET00uZmluZChlbCwgJ2NhbnZhcycpLFxuICAgICAgdGhhdCA9IHRoaXM7XG4gIHRoaXMuZXZlbnRzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgaWYgKHByb3RvdHlwZVt0eXBlXSkge1xuICAgICAgICBwcm90b3R5cGVbdHlwZV0uY2FsbCh0aGF0LCBldnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhhdC5maXJlKHR5cGUsIGV2dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBiYXNlLmluaXRpYWxpemUuY2FsbCh0aGlzLCBlbCwgcGFkLCBvYmopO1xufTtcblxucHJvdG90eXBlLmNhbnZhcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY2FudmFzO1xufTtcblxuLy8gcmV0cmlldmUgdGhlIGN1cnJlbnQgY2FudmFzIGNvbnRleHRcbnByb3RvdHlwZS5jb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbn07XG5cbi8vIHN1cHBvcnRlZCBldmVudHNcbnByb3RvdHlwZS5ldmVudHMgPSBbXG4gICdrZXlkb3duJyxcbiAgJ2tleXByZXNzJyxcbiAgJ2tleXVwJyxcbiAgJ21vdXNlZG93bicsXG4gICdtb3VzZXVwJyxcbiAgJ21vdXNlbW92ZScsXG4gICdtb3VzZW91dCcsXG4gICdtb3VzZW92ZXInLFxuICAnY2xpY2snLFxuICAnZGJsY2xpY2snLFxuICAnd2hlZWwnLFxuICAnbW91c2V3aGVlbCcsXG4gICd0b3VjaHN0YXJ0JyxcbiAgJ3RvdWNobW92ZScsXG4gICd0b3VjaGVuZCdcbl07XG5cbi8vIHRvIGtlZXAgZmlyZWZveCBoYXBweVxucHJvdG90eXBlLkRPTU1vdXNlU2Nyb2xsID0gZnVuY3Rpb24oZXZ0KSB7XG4gIHRoaXMuZmlyZSgnbW91c2V3aGVlbCcsIGV2dCk7XG59O1xuXG5wcm90b3R5cGUubW91c2Vtb3ZlID0gZnVuY3Rpb24oZXZ0KSB7XG4gIHZhciBhID0gdGhpcy5fYWN0aXZlLFxuICAgICAgcCA9IHRoaXMucGlja0V2ZW50KGV2dCk7XG5cbiAgaWYgKHAgPT09IGEpIHtcbiAgICAvLyBhY3RpdmUgaXRlbSBhbmQgcGlja2VkIGl0ZW0gYXJlIHRoZSBzYW1lXG4gICAgdGhpcy5maXJlKCdtb3VzZW1vdmUnLCBldnQpOyAvLyBmaXJlIG1vdmVcbiAgfSBlbHNlIHtcbiAgICAvLyBhY3RpdmUgaXRlbSBhbmQgcGlja2VkIGl0ZW0gYXJlIGRpZmZlcmVudFxuICAgIHRoaXMuZmlyZSgnbW91c2VvdXQnLCBldnQpOyAgLy8gZmlyZSBvdXQgZm9yIHByaW9yIGFjdGl2ZSBpdGVtXG4gICAgdGhpcy5fYWN0aXZlID0gcDsgICAgICAgICAgICAvLyBzZXQgbmV3IGFjdGl2ZSBpdGVtXG4gICAgdGhpcy5maXJlKCdtb3VzZW92ZXInLCBldnQpOyAvLyBmaXJlIG92ZXIgZm9yIG5ldyBhY3RpdmUgaXRlbVxuICAgIHRoaXMuZmlyZSgnbW91c2Vtb3ZlJywgZXZ0KTsgLy8gZmlyZSBtb3ZlIGZvciBuZXcgYWN0aXZlIGl0ZW1cbiAgfVxufTtcblxucHJvdG90eXBlLm1vdXNlb3V0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gIHRoaXMuZmlyZSgnbW91c2VvdXQnLCBldnQpO1xuICB0aGlzLl9hY3RpdmUgPSBudWxsO1xufTtcblxucHJvdG90eXBlLm1vdXNlZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICB0aGlzLl9kb3duID0gdGhpcy5fYWN0aXZlO1xuICB0aGlzLmZpcmUoJ21vdXNlZG93bicsIGV2dCk7XG59O1xuXG5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbihldnQpIHtcbiAgaWYgKHRoaXMuX2Rvd24gPT09IHRoaXMuX2FjdGl2ZSkge1xuICAgIHRoaXMuZmlyZSgnY2xpY2snLCBldnQpO1xuICAgIHRoaXMuX2Rvd24gPSBudWxsO1xuICB9XG59O1xuXG5wcm90b3R5cGUudG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2dCkge1xuICB0aGlzLl90b3VjaCA9IHRoaXMucGlja0V2ZW50KGV2dC5jaGFuZ2VkVG91Y2hlc1swXSk7XG5cbiAgaWYgKHRoaXMuX2ZpcnN0KSB7XG4gICAgdGhpcy5fYWN0aXZlID0gdGhpcy5fdG91Y2g7XG4gICAgdGhpcy5fZmlyc3QgPSBmYWxzZTtcbiAgfVxuXG4gIHRoaXMuZmlyZSgndG91Y2hzdGFydCcsIGV2dCwgdHJ1ZSk7XG59O1xuXG5wcm90b3R5cGUudG91Y2htb3ZlID0gZnVuY3Rpb24oZXZ0KSB7XG4gIHRoaXMuZmlyZSgndG91Y2htb3ZlJywgZXZ0LCB0cnVlKTtcbn07XG5cbnByb3RvdHlwZS50b3VjaGVuZCA9IGZ1bmN0aW9uKGV2dCkge1xuICB0aGlzLmZpcmUoJ3RvdWNoZW5kJywgZXZ0LCB0cnVlKTtcbiAgdGhpcy5fdG91Y2ggPSBudWxsO1xufTtcblxuLy8gZmlyZSBhbiBldmVudFxucHJvdG90eXBlLmZpcmUgPSBmdW5jdGlvbih0eXBlLCBldnQsIHRvdWNoKSB7XG4gIHZhciBhID0gdG91Y2ggPyB0aGlzLl90b3VjaCA6IHRoaXMuX2FjdGl2ZSxcbiAgICAgIGggPSB0aGlzLl9oYW5kbGVyc1t0eXBlXSwgaSwgbGVuO1xuICBpZiAoaCkge1xuICAgIGV2dC52ZWdhVHlwZSA9IHR5cGU7XG4gICAgZm9yIChpPTAsIGxlbj1oLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgICAgaFtpXS5oYW5kbGVyLmNhbGwodGhpcy5fb2JqLCBldnQsIGEpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gYWRkIGFuIGV2ZW50IGhhbmRsZXJcbnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGhhbmRsZXIpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLmV2ZW50TmFtZSh0eXBlKSxcbiAgICAgIGggPSB0aGlzLl9oYW5kbGVycztcbiAgKGhbbmFtZV0gfHwgKGhbbmFtZV0gPSBbXSkpLnB1c2goe1xuICAgIHR5cGU6IHR5cGUsXG4gICAgaGFuZGxlcjogaGFuZGxlclxuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyByZW1vdmUgYW4gZXZlbnQgaGFuZGxlclxucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKHR5cGUsIGhhbmRsZXIpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLmV2ZW50TmFtZSh0eXBlKSxcbiAgICAgIGggPSB0aGlzLl9oYW5kbGVyc1tuYW1lXSwgaTtcbiAgaWYgKCFoKSByZXR1cm47XG4gIGZvciAoaT1oLmxlbmd0aDsgLS1pPj0wOykge1xuICAgIGlmIChoW2ldLnR5cGUgIT09IHR5cGUpIGNvbnRpbnVlO1xuICAgIGlmICghaGFuZGxlciB8fCBoW2ldLmhhbmRsZXIgPT09IGhhbmRsZXIpIGguc3BsaWNlKGksIDEpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLnBpY2tFdmVudCA9IGZ1bmN0aW9uKGV2dCkge1xuICB2YXIgcmVjdCA9IHRoaXMuX2NhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHBhZCA9IHRoaXMuX3BhZGRpbmcsIHgsIHk7XG4gIHJldHVybiB0aGlzLnBpY2sodGhpcy5fc2NlbmUsXG4gICAgeCA9IChldnQuY2xpZW50WCAtIHJlY3QubGVmdCksXG4gICAgeSA9IChldnQuY2xpZW50WSAtIHJlY3QudG9wKSxcbiAgICB4IC0gcGFkLmxlZnQsIHkgLSBwYWQudG9wKTtcbn07XG5cbi8vIGZpbmQgdGhlIHNjZW5lZ3JhcGggaXRlbSBhdCB0aGUgY3VycmVudCBtb3VzZSBwb3NpdGlvblxuLy8geCwgeSAtLSB0aGUgYWJzb2x1dGUgeCwgeSBtb3VzZSBjb29yZGluYXRlcyBvbiB0aGUgY2FudmFzIGVsZW1lbnRcbi8vIGd4LCBneSAtLSB0aGUgcmVsYXRpdmUgY29vcmRpbmF0ZXMgd2l0aGluIHRoZSBjdXJyZW50IGdyb3VwXG5wcm90b3R5cGUucGljayA9IGZ1bmN0aW9uKHNjZW5lLCB4LCB5LCBneCwgZ3kpIHtcbiAgdmFyIGcgPSB0aGlzLmNvbnRleHQoKSxcbiAgICAgIG1hcmsgPSBtYXJrc1tzY2VuZS5tYXJrdHlwZV07XG4gIHJldHVybiBtYXJrLnBpY2suY2FsbCh0aGlzLCBnLCBzY2VuZSwgeCwgeSwgZ3gsIGd5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzSGFuZGxlcjtcbiIsInZhciBET00gPSByZXF1aXJlKCcuLi8uLi91dGlsL2RvbScpLFxuICAgIEJvdW5kcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQm91bmRzJyksXG4gICAgSW1hZ2VMb2FkZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsL0ltYWdlTG9hZGVyJyksXG4gICAgQ2FudmFzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9jYW52YXMnKSxcbiAgICBSZW5kZXJlciA9IHJlcXVpcmUoJy4uL1JlbmRlcmVyJyksXG4gICAgbWFya3MgPSByZXF1aXJlKCcuL21hcmtzJyk7XG5cbmZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKGxvYWRDb25maWcpIHtcbiAgUmVuZGVyZXIuY2FsbCh0aGlzKTtcbiAgdGhpcy5fbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKGxvYWRDb25maWcpO1xufVxuXG5DYW52YXNSZW5kZXJlci5SRVRJTkEgPSB0cnVlO1xuXG52YXIgYmFzZSA9IFJlbmRlcmVyLnByb3RvdHlwZTtcbnZhciBwcm90b3R5cGUgPSAoQ2FudmFzUmVuZGVyZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlKSk7XG5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYW52YXNSZW5kZXJlcjtcblxucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihlbCwgd2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICB0aGlzLl9jYW52YXMgPSBDYW52YXMuaW5zdGFuY2Uod2lkdGgsIGhlaWdodCk7XG4gIGlmIChlbCkge1xuICAgIERPTS5jbGVhcihlbCwgMCkuYXBwZW5kQ2hpbGQodGhpcy5fY2FudmFzKTtcbiAgICB0aGlzLl9jYW52YXMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtYXJrcycpO1xuICB9XG4gIHJldHVybiBiYXNlLmluaXRpYWxpemUuY2FsbCh0aGlzLCBlbCwgd2lkdGgsIGhlaWdodCwgcGFkZGluZyk7XG59O1xuXG5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICBiYXNlLnJlc2l6ZS5jYWxsKHRoaXMsIHdpZHRoLCBoZWlnaHQsIHBhZGRpbmcpO1xuICBDYW52YXMucmVzaXplKHRoaXMuX2NhbnZhcywgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCxcbiAgICB0aGlzLl9wYWRkaW5nLCBDYW52YXNSZW5kZXJlci5SRVRJTkEpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5jYW52YXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbn07XG5cbnByb3RvdHlwZS5jb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jYW52YXMgPyB0aGlzLl9jYW52YXMuZ2V0Q29udGV4dCgnMmQnKSA6IG51bGw7XG59O1xuXG5wcm90b3R5cGUucGVuZGluZ0ltYWdlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbG9hZGVyLnBlbmRpbmcoKTtcbn07XG5cbmZ1bmN0aW9uIGNsaXBUb0JvdW5kcyhnLCBpdGVtcykge1xuICBpZiAoIWl0ZW1zKSByZXR1cm4gbnVsbDtcblxuICB2YXIgYiA9IG5ldyBCb3VuZHMoKSwgaSwgbiwgaXRlbSwgbWFyaywgZ3JvdXA7XG4gIGZvciAoaT0wLCBuPWl0ZW1zLmxlbmd0aDsgaTxuOyArK2kpIHtcbiAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgbWFyayA9IGl0ZW0ubWFyaztcbiAgICBncm91cCA9IG1hcmsuZ3JvdXA7XG4gICAgaXRlbSA9IG1hcmtzW21hcmsubWFya3R5cGVdLm5lc3RlZCA/IG1hcmsgOiBpdGVtO1xuICAgIGIudW5pb24odHJhbnNsYXRlKGl0ZW0uYm91bmRzLCBncm91cCkpO1xuICAgIGlmIChpdGVtWydib3VuZHM6cHJldiddKSB7XG4gICAgICBiLnVuaW9uKHRyYW5zbGF0ZShpdGVtWydib3VuZHM6cHJldiddLCBncm91cCkpO1xuICAgIH1cbiAgfVxuICBiLnJvdW5kKCk7XG5cbiAgZy5iZWdpblBhdGgoKTtcbiAgZy5yZWN0KGIueDEsIGIueTEsIGIud2lkdGgoKSwgYi5oZWlnaHQoKSk7XG4gIGcuY2xpcCgpO1xuXG4gIHJldHVybiBiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGUoYm91bmRzLCBncm91cCkge1xuICBpZiAoZ3JvdXAgPT0gbnVsbCkgcmV0dXJuIGJvdW5kcztcbiAgdmFyIGIgPSBib3VuZHMuY2xvbmUoKTtcbiAgZm9yICg7IGdyb3VwICE9IG51bGw7IGdyb3VwID0gZ3JvdXAubWFyay5ncm91cCkge1xuICAgIGIudHJhbnNsYXRlKGdyb3VwLnggfHwgMCwgZ3JvdXAueSB8fCAwKTtcbiAgfVxuICByZXR1cm4gYjtcbn1cblxucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHNjZW5lLCBpdGVtcykge1xuICB2YXIgZyA9IHRoaXMuY29udGV4dCgpLFxuICAgICAgcCA9IHRoaXMuX3BhZGRpbmcsXG4gICAgICB3ID0gdGhpcy5fd2lkdGggKyBwLmxlZnQgKyBwLnJpZ2h0LFxuICAgICAgaCA9IHRoaXMuX2hlaWdodCArIHAudG9wICsgcC5ib3R0b20sXG4gICAgICBiO1xuXG4gIC8vIHNldHVwXG4gIHRoaXMuX3NjZW5lID0gc2NlbmU7IC8vIGNhY2hlIHNjZW5lIGZvciBhc3luYyByZWRyYXdcbiAgZy5zYXZlKCk7XG4gIGIgPSBjbGlwVG9Cb3VuZHMoZywgaXRlbXMpO1xuICB0aGlzLmNsZWFyKC1wLmxlZnQsIC1wLnRvcCwgdywgaCk7XG5cbiAgLy8gcmVuZGVyXG4gIHRoaXMuZHJhdyhnLCBzY2VuZSwgYik7XG4gIFxuICAvLyB0YWtlZG93blxuICBnLnJlc3RvcmUoKTtcbiAgdGhpcy5fc2NlbmUgPSBudWxsOyAvLyBjbGVhciBzY2VuZSBjYWNoZVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgsIHNjZW5lLCBib3VuZHMpIHtcbiAgdmFyIG1hcmsgPSBtYXJrc1tzY2VuZS5tYXJrdHlwZV07XG4gIG1hcmsuZHJhdy5jYWxsKHRoaXMsIGN0eCwgc2NlbmUsIGJvdW5kcyk7XG59O1xuXG5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gIHZhciBnID0gdGhpcy5jb250ZXh0KCk7XG4gIGcuY2xlYXJSZWN0KHgsIHksIHcsIGgpO1xuICBpZiAodGhpcy5fYmdjb2xvciAhPSBudWxsKSB7XG4gICAgZy5maWxsU3R5bGUgPSB0aGlzLl9iZ2NvbG9yO1xuICAgIGcuZmlsbFJlY3QoeCwgeSwgdywgaCk7IFxuICB9XG59O1xuXG5wcm90b3R5cGUubG9hZEltYWdlID0gZnVuY3Rpb24odXJpKSB7XG4gIHZhciByZW5kZXJlciA9IHRoaXMsXG4gICAgICBzY2VuZSA9IHRoaXMuX3NjZW5lO1xuICByZXR1cm4gdGhpcy5fbG9hZGVyLmxvYWRJbWFnZSh1cmksIGZ1bmN0aW9uKCkge1xuICAgIHJlbmRlcmVyLnJlbmRlckFzeW5jKHNjZW5lKTtcbiAgfSk7XG59O1xuXG5wcm90b3R5cGUucmVuZGVyQXN5bmMgPSBmdW5jdGlvbihzY2VuZSkge1xuICAvLyBUT0RPIG1ha2Ugc2FmZSBmb3IgbXVsdGlwbGUgc2NlbmUgcmVuZGVyaW5nP1xuICB2YXIgcmVuZGVyZXIgPSB0aGlzO1xuICBpZiAocmVuZGVyZXIuX2FzeW5jX2lkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHJlbmRlcmVyLl9hc3luY19pZCk7XG4gIH1cbiAgcmVuZGVyZXIuX2FzeW5jX2lkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUpO1xuICAgIGRlbGV0ZSByZW5kZXJlci5fYXN5bmNfaWQ7XG4gIH0sIDEwKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzUmVuZGVyZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgSGFuZGxlcjogIHJlcXVpcmUoJy4vQ2FudmFzSGFuZGxlcicpLFxuICBSZW5kZXJlcjogcmVxdWlyZSgnLi9DYW52YXNSZW5kZXJlcicpXG59OyIsInZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgaGFsZnBpID0gTWF0aC5QSSAvIDI7XG5cbmZ1bmN0aW9uIHBhdGgoZywgbykge1xuICB2YXIgeCA9IG8ueCB8fCAwLFxuICAgICAgeSA9IG8ueSB8fCAwLFxuICAgICAgaXIgPSBvLmlubmVyUmFkaXVzIHx8IDAsXG4gICAgICBvciA9IG8ub3V0ZXJSYWRpdXMgfHwgMCxcbiAgICAgIHNhID0gKG8uc3RhcnRBbmdsZSB8fCAwKSAtIGhhbGZwaSxcbiAgICAgIGVhID0gKG8uZW5kQW5nbGUgfHwgMCkgLSBoYWxmcGk7XG4gIGcuYmVnaW5QYXRoKCk7XG4gIGlmIChpciA9PT0gMCkgZy5tb3ZlVG8oeCwgeSk7XG4gIGVsc2UgZy5hcmMoeCwgeSwgaXIsIHNhLCBlYSwgMCk7XG4gIGcuYXJjKHgsIHksIG9yLCBlYSwgc2EsIDEpO1xuICBnLmNsb3NlUGF0aCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogdXRpbC5kcmF3QWxsKHBhdGgpLFxuICBwaWNrOiB1dGlsLnBpY2tQYXRoKHBhdGgpXG59OyIsInZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyksXG4gICAgcGFyc2UgPSByZXF1aXJlKCcuLi8uLi8uLi9wYXRoL3BhcnNlJyksXG4gICAgcmVuZGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vcGF0aC9yZW5kZXInKSxcbiAgICBhcmVhUGF0aCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvc3ZnJykucGF0aC5hcmVhO1xuXG5mdW5jdGlvbiBwYXRoKGcsIGl0ZW1zKSB7XG4gIHZhciBvID0gaXRlbXNbMF0sXG4gICAgICBwID0gby5wYXRoQ2FjaGUgfHwgKG8ucGF0aENhY2hlID0gcGFyc2UoYXJlYVBhdGgoaXRlbXMpKSk7XG4gIHJlbmRlcihnLCBwKTtcbn1cblxuZnVuY3Rpb24gcGljayhnLCBzY2VuZSwgeCwgeSwgZ3gsIGd5KSB7XG4gIHZhciBpdGVtcyA9IHNjZW5lLml0ZW1zLFxuICAgICAgYiA9IHNjZW5lLmJvdW5kcztcblxuICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggfHwgYiAmJiAhYi5jb250YWlucyhneCwgZ3kpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoZy5waXhlbHJhdGlvICE9IG51bGwgJiYgZy5waXhlbHJhdGlvICE9PSAxKSB7XG4gICAgeCAqPSBnLnBpeGVscmF0aW87XG4gICAgeSAqPSBnLnBpeGVscmF0aW87XG4gIH1cbiAgcmV0dXJuIGhpdChnLCBpdGVtcywgeCwgeSkgPyBpdGVtc1swXSA6IG51bGw7XG59XG5cbnZhciBoaXQgPSB1dGlsLnRlc3RQYXRoKHBhdGgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogdXRpbC5kcmF3T25lKHBhdGgpLFxuICBwaWNrOiBwaWNrLFxuICBuZXN0ZWQ6IHRydWVcbn07XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpLFxuICAgIHJlY3QgPSByZXF1aXJlKCcuL3JlY3QnKTtcblxuZnVuY3Rpb24gZHJhdyhnLCBzY2VuZSwgYm91bmRzKSB7XG4gIGlmICghc2NlbmUuaXRlbXMgfHwgIXNjZW5lLml0ZW1zLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHZhciBncm91cHMgPSBzY2VuZS5pdGVtcyxcbiAgICAgIHJlbmRlcmVyID0gdGhpcyxcbiAgICAgIGdyb3VwLCBpdGVtcywgYXhlcywgbGVnZW5kcywgZ3gsIGd5LCBpLCBuLCBqLCBtO1xuXG4gIHJlY3QuZHJhdy5jYWxsKHJlbmRlcmVyLCBnLCBzY2VuZSwgYm91bmRzKTtcblxuICBmb3IgKGk9MCwgbj1ncm91cHMubGVuZ3RoOyBpPG47ICsraSkge1xuICAgIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgIGF4ZXMgPSBncm91cC5heGlzSXRlbXMgfHwgW107XG4gICAgaXRlbXMgPSBncm91cC5pdGVtcyB8fCBbXTtcbiAgICBsZWdlbmRzID0gZ3JvdXAubGVnZW5kSXRlbXMgfHwgW107XG4gICAgZ3ggPSBncm91cC54IHx8IDA7XG4gICAgZ3kgPSBncm91cC55IHx8IDA7XG5cbiAgICAvLyByZW5kZXIgZ3JvdXAgY29udGVudHNcbiAgICBnLnNhdmUoKTtcbiAgICBnLnRyYW5zbGF0ZShneCwgZ3kpO1xuICAgIGlmIChncm91cC5jbGlwKSB7XG4gICAgICBnLmJlZ2luUGF0aCgpO1xuICAgICAgZy5yZWN0KDAsIDAsIGdyb3VwLndpZHRoIHx8IDAsIGdyb3VwLmhlaWdodCB8fCAwKTtcbiAgICAgIGcuY2xpcCgpO1xuICAgIH1cblxuICAgIGlmIChib3VuZHMpIGJvdW5kcy50cmFuc2xhdGUoLWd4LCAtZ3kpO1xuXG4gICAgZm9yIChqPTAsIG09YXhlcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgICBpZiAoYXhlc1tqXS5sYXllciA9PT0gJ2JhY2snKSB7XG4gICAgICAgIHJlbmRlcmVyLmRyYXcoZywgYXhlc1tqXSwgYm91bmRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChqPTAsIG09aXRlbXMubGVuZ3RoOyBqPG07ICsraikge1xuICAgICAgcmVuZGVyZXIuZHJhdyhnLCBpdGVtc1tqXSwgYm91bmRzKTtcbiAgICB9XG4gICAgZm9yIChqPTAsIG09YXhlcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgICBpZiAoYXhlc1tqXS5sYXllciAhPT0gJ2JhY2snKSB7XG4gICAgICAgIHJlbmRlcmVyLmRyYXcoZywgYXhlc1tqXSwgYm91bmRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChqPTAsIG09bGVnZW5kcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgICByZW5kZXJlci5kcmF3KGcsIGxlZ2VuZHNbal0sIGJvdW5kcyk7XG4gICAgfVxuICAgIFxuICAgIGlmIChib3VuZHMpIGJvdW5kcy50cmFuc2xhdGUoZ3gsIGd5KTtcbiAgICBnLnJlc3RvcmUoKTtcbiAgfSAgICBcbn1cblxuZnVuY3Rpb24gaGl0KGcsIG8pIHtcbiAgcmV0dXJuIG8uZmlsbCB8fCBvLnN0cm9rZTtcbn1cblxuZnVuY3Rpb24gcGljayhnLCBzY2VuZSwgeCwgeSwgZ3gsIGd5KSB7XG4gIGlmIChzY2VuZS5ib3VuZHMgJiYgIXNjZW5lLmJvdW5kcy5jb250YWlucyhneCwgZ3kpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGl0ZW1zID0gc2NlbmUuaXRlbXMgfHwgW10sXG4gICAgICBzdWJzY2VuZSwgZ3JvdXAsIGhpdHMsIGR4LCBkeSwgaSwgajtcblxuICBmb3IgKGk9aXRlbXMubGVuZ3RoOyAtLWk+PTA7KSB7XG4gICAgZ3JvdXAgPSBpdGVtc1tpXTtcbiAgICBkeCA9IGdyb3VwLnggfHwgMDtcbiAgICBkeSA9IGdyb3VwLnkgfHwgMDtcblxuICAgIGcuc2F2ZSgpO1xuICAgIGcudHJhbnNsYXRlKGR4LCBkeSk7XG4gICAgZm9yIChqPWdyb3VwLml0ZW1zLmxlbmd0aDsgLS1qID49IDA7KSB7XG4gICAgICBzdWJzY2VuZSA9IGdyb3VwLml0ZW1zW2pdO1xuICAgICAgaWYgKHN1YnNjZW5lLmludGVyYWN0aXZlID09PSBmYWxzZSkgY29udGludWU7XG4gICAgICBoaXRzID0gdGhpcy5waWNrKHN1YnNjZW5lLCB4LCB5LCBneC1keCwgZ3ktZHkpO1xuICAgICAgaWYgKGhpdHMpIHtcbiAgICAgICAgZy5yZXN0b3JlKCk7XG4gICAgICAgIHJldHVybiBoaXRzO1xuICAgICAgfVxuICAgIH1cbiAgICBnLnJlc3RvcmUoKTtcbiAgfVxuXG4gIHJldHVybiBzY2VuZS5pbnRlcmFjdGl2ZSAhPT0gZmFsc2UgPyBwaWNrU2VsZihnLCBzY2VuZSwgeCwgeSwgZ3gsIGd5KSA6IG51bGw7XG59XG5cbnZhciBwaWNrU2VsZiA9IHV0aWwucGljayhoaXQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogZHJhdyxcbiAgcGljazogcGlja1xufTtcbiIsInZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmZ1bmN0aW9uIGRyYXcoZywgc2NlbmUsIGJvdW5kcykge1xuICBpZiAoIXNjZW5lLml0ZW1zIHx8ICFzY2VuZS5pdGVtcy5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgcmVuZGVyZXIgPSB0aGlzLFxuICAgICAgaXRlbXMgPSBzY2VuZS5pdGVtcywgbztcblxuICBmb3IgKHZhciBpPTAsIGxlbj1pdGVtcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBvID0gaXRlbXNbaV07XG4gICAgaWYgKGJvdW5kcyAmJiAhYm91bmRzLmludGVyc2VjdHMoby5ib3VuZHMpKVxuICAgICAgY29udGludWU7IC8vIGJvdW5kcyBjaGVja1xuXG4gICAgaWYgKCEoby5pbWFnZSAmJiBvLmltYWdlLnVybCA9PT0gby51cmwpKSB7XG4gICAgICBvLmltYWdlID0gcmVuZGVyZXIubG9hZEltYWdlKG8udXJsKTtcbiAgICAgIG8uaW1hZ2UudXJsID0gby51cmw7XG4gICAgfVxuXG4gICAgdmFyIHggPSBvLnggfHwgMCxcbiAgICAgICAgeSA9IG8ueSB8fCAwLFxuICAgICAgICB3ID0gby53aWR0aCB8fCAoby5pbWFnZSAmJiBvLmltYWdlLndpZHRoKSB8fCAwLFxuICAgICAgICBoID0gby5oZWlnaHQgfHwgKG8uaW1hZ2UgJiYgby5pbWFnZS5oZWlnaHQpIHx8IDAsXG4gICAgICAgIG9wYWM7XG4gICAgeCA9IHggLSAoby5hbGlnbj09PSdjZW50ZXInID8gdy8yIDogby5hbGlnbj09PSdyaWdodCcgPyB3IDogMCk7XG4gICAgeSA9IHkgLSAoby5iYXNlbGluZT09PSdtaWRkbGUnID8gaC8yIDogby5iYXNlbGluZT09PSdib3R0b20nID8gaCA6IDApO1xuXG4gICAgaWYgKG8uaW1hZ2UubG9hZGVkKSB7XG4gICAgICBnLmdsb2JhbEFscGhhID0gKG9wYWMgPSBvLm9wYWNpdHkpICE9IG51bGwgPyBvcGFjIDogMTtcbiAgICAgIGcuZHJhd0ltYWdlKG8uaW1hZ2UsIHgsIHksIHcsIGgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogZHJhdyxcbiAgcGljazogdXRpbC5waWNrKClcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFyYzogICAgcmVxdWlyZSgnLi9hcmMnKSxcbiAgYXJlYTogICByZXF1aXJlKCcuL2FyZWEnKSxcbiAgZ3JvdXA6ICByZXF1aXJlKCcuL2dyb3VwJyksXG4gIGltYWdlOiAgcmVxdWlyZSgnLi9pbWFnZScpLFxuICBsaW5lOiAgIHJlcXVpcmUoJy4vbGluZScpLFxuICBwYXRoOiAgIHJlcXVpcmUoJy4vcGF0aCcpLFxuICByZWN0OiAgIHJlcXVpcmUoJy4vcmVjdCcpLFxuICBydWxlOiAgIHJlcXVpcmUoJy4vcnVsZScpLFxuICBzeW1ib2w6IHJlcXVpcmUoJy4vc3ltYm9sJyksXG4gIHRleHQ6ICAgcmVxdWlyZSgnLi90ZXh0Jylcbn07XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpLFxuICAgIHBhcnNlID0gcmVxdWlyZSgnLi4vLi4vLi4vcGF0aC9wYXJzZScpLFxuICAgIHJlbmRlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3BhdGgvcmVuZGVyJyksXG4gICAgbGluZVBhdGggPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3N2ZycpLnBhdGgubGluZTtcbiAgICBcbmZ1bmN0aW9uIHBhdGgoZywgaXRlbXMpIHtcbiAgdmFyIG8gPSBpdGVtc1swXSxcbiAgICAgIHAgPSBvLnBhdGhDYWNoZSB8fCAoby5wYXRoQ2FjaGUgPSBwYXJzZShsaW5lUGF0aChpdGVtcykpKTtcbiAgcmVuZGVyKGcsIHApO1xufVxuXG5mdW5jdGlvbiBwaWNrKGcsIHNjZW5lLCB4LCB5LCBneCwgZ3kpIHtcbiAgdmFyIGl0ZW1zID0gc2NlbmUuaXRlbXMsXG4gICAgICBiID0gc2NlbmUuYm91bmRzO1xuXG4gIGlmICghaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCB8fCBiICYmICFiLmNvbnRhaW5zKGd4LCBneSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChnLnBpeGVscmF0aW8gIT0gbnVsbCAmJiBnLnBpeGVscmF0aW8gIT09IDEpIHtcbiAgICB4ICo9IGcucGl4ZWxyYXRpbztcbiAgICB5ICo9IGcucGl4ZWxyYXRpbztcbiAgfVxuICByZXR1cm4gaGl0KGcsIGl0ZW1zLCB4LCB5KSA/IGl0ZW1zWzBdIDogbnVsbDtcbn1cblxudmFyIGhpdCA9IHV0aWwudGVzdFBhdGgocGF0aCwgZmFsc2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogdXRpbC5kcmF3T25lKHBhdGgpLFxuICBwaWNrOiBwaWNrLFxuICBuZXN0ZWQ6IHRydWVcbn07XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpLFxuICAgIHBhcnNlID0gcmVxdWlyZSgnLi4vLi4vLi4vcGF0aC9wYXJzZScpLFxuICAgIHJlbmRlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3BhdGgvcmVuZGVyJyk7XG5cbmZ1bmN0aW9uIHBhdGgoZywgbykge1xuICBpZiAoby5wYXRoID09IG51bGwpIHJldHVybiB0cnVlO1xuICB2YXIgcCA9IG8ucGF0aENhY2hlIHx8IChvLnBhdGhDYWNoZSA9IHBhcnNlKG8ucGF0aCkpO1xuICByZW5kZXIoZywgcCwgby54LCBvLnkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogdXRpbC5kcmF3QWxsKHBhdGgpLFxuICBwaWNrOiB1dGlsLnBpY2tQYXRoKHBhdGgpXG59O1xuIiwidmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuZnVuY3Rpb24gZHJhdyhnLCBzY2VuZSwgYm91bmRzKSB7XG4gIGlmICghc2NlbmUuaXRlbXMgfHwgIXNjZW5lLml0ZW1zLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHZhciBpdGVtcyA9IHNjZW5lLml0ZW1zLFxuICAgICAgbywgb3BhYywgeCwgeSwgdywgaDtcblxuICBmb3IgKHZhciBpPTAsIGxlbj1pdGVtcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBvID0gaXRlbXNbaV07XG4gICAgaWYgKGJvdW5kcyAmJiAhYm91bmRzLmludGVyc2VjdHMoby5ib3VuZHMpKVxuICAgICAgY29udGludWU7IC8vIGJvdW5kcyBjaGVja1xuXG4gICAgb3BhYyA9IG8ub3BhY2l0eSA9PSBudWxsID8gMSA6IG8ub3BhY2l0eTtcbiAgICBpZiAob3BhYyA9PT0gMCkgY29udGludWU7XG5cbiAgICB4ID0gby54IHx8IDA7XG4gICAgeSA9IG8ueSB8fCAwO1xuICAgIHcgPSBvLndpZHRoIHx8IDA7XG4gICAgaCA9IG8uaGVpZ2h0IHx8IDA7XG5cbiAgICBpZiAoby5maWxsICYmIHV0aWwuZmlsbChnLCBvLCBvcGFjKSkge1xuICAgICAgZy5maWxsUmVjdCh4LCB5LCB3LCBoKTtcbiAgICB9XG4gICAgaWYgKG8uc3Ryb2tlICYmIHV0aWwuc3Ryb2tlKGcsIG8sIG9wYWMpKSB7XG4gICAgICBnLnN0cm9rZVJlY3QoeCwgeSwgdywgaCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkcmF3OiBkcmF3LFxuICBwaWNrOiB1dGlsLnBpY2soKVxufTsiLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5mdW5jdGlvbiBkcmF3KGcsIHNjZW5lLCBib3VuZHMpIHtcbiAgaWYgKCFzY2VuZS5pdGVtcyB8fCAhc2NlbmUuaXRlbXMubGVuZ3RoKSByZXR1cm47XG5cbiAgdmFyIGl0ZW1zID0gc2NlbmUuaXRlbXMsXG4gICAgICBvLCBvcGFjLCB4MSwgeTEsIHgyLCB5MjtcblxuICBmb3IgKHZhciBpPTAsIGxlbj1pdGVtcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBvID0gaXRlbXNbaV07XG4gICAgaWYgKGJvdW5kcyAmJiAhYm91bmRzLmludGVyc2VjdHMoby5ib3VuZHMpKVxuICAgICAgY29udGludWU7IC8vIGJvdW5kcyBjaGVja1xuXG4gICAgb3BhYyA9IG8ub3BhY2l0eSA9PSBudWxsID8gMSA6IG8ub3BhY2l0eTtcbiAgICBpZiAob3BhYyA9PT0gMCkgY29udGludWU7XG4gICAgICBcbiAgICB4MSA9IG8ueCB8fCAwO1xuICAgIHkxID0gby55IHx8IDA7XG4gICAgeDIgPSBvLngyICE9IG51bGwgPyBvLngyIDogeDE7XG4gICAgeTIgPSBvLnkyICE9IG51bGwgPyBvLnkyIDogeTE7XG5cbiAgICBpZiAoby5zdHJva2UgJiYgdXRpbC5zdHJva2UoZywgbywgb3BhYykpIHtcbiAgICAgIGcuYmVnaW5QYXRoKCk7XG4gICAgICBnLm1vdmVUbyh4MSwgeTEpO1xuICAgICAgZy5saW5lVG8oeDIsIHkyKTtcbiAgICAgIGcuc3Ryb2tlKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cm9rZShnLCBvKSB7XG4gIHZhciB4MSA9IG8ueCB8fCAwLFxuICAgICAgeTEgPSBvLnkgfHwgMCxcbiAgICAgIHgyID0gby54MiAhPSBudWxsID8gby54MiA6IHgxLFxuICAgICAgeTIgPSBvLnkyICE9IG51bGwgPyBvLnkyIDogeTEsXG4gICAgICBsdyA9IG8uc3Ryb2tlV2lkdGgsXG4gICAgICBsYyA9IG8uc3Ryb2tlQ2FwO1xuXG4gIGcubGluZVdpZHRoID0gbHcgIT0gbnVsbCA/IGx3IDogMTtcbiAgZy5saW5lQ2FwICAgPSBsYyAhPSBudWxsID8gbGMgOiAnYnV0dCc7XG4gIGcuYmVnaW5QYXRoKCk7XG4gIGcubW92ZVRvKHgxLCB5MSk7XG4gIGcubGluZVRvKHgyLCB5Mik7XG59XG5cbmZ1bmN0aW9uIGhpdChnLCBvLCB4LCB5KSB7XG4gIGlmICghZy5pc1BvaW50SW5TdHJva2UpIHJldHVybiBmYWxzZTtcbiAgc3Ryb2tlKGcsIG8pO1xuICByZXR1cm4gZy5pc1BvaW50SW5TdHJva2UoeCwgeSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkcmF3OiBkcmF3LFxuICBwaWNrOiB1dGlsLnBpY2soaGl0KVxufTtcbiIsInZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbnZhciBzcXJ0MyA9IE1hdGguc3FydCgzKSxcbiAgICB0YW4zMCA9IE1hdGgudGFuKDMwICogTWF0aC5QSSAvIDE4MCk7XG5cbmZ1bmN0aW9uIHBhdGgoZywgbykge1xuICB2YXIgc2l6ZSA9IG8uc2l6ZSAhPSBudWxsID8gby5zaXplIDogMTAwLFxuICAgICAgeCA9IG8ueCwgeSA9IG8ueSwgciwgdCwgcngsIHJ5O1xuXG4gIGcuYmVnaW5QYXRoKCk7XG5cbiAgaWYgKG8uc2hhcGUgPT0gbnVsbCB8fCBvLnNoYXBlID09PSAnY2lyY2xlJykge1xuICAgIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIE1hdGguUEkpO1xuICAgIGcuYXJjKHgsIHksIHIsIDAsIDIqTWF0aC5QSSwgMCk7XG4gICAgZy5jbG9zZVBhdGgoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2l0Y2ggKG8uc2hhcGUpIHtcbiAgICBjYXNlICdjcm9zcyc6XG4gICAgICByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgICB0ID0gMypyO1xuICAgICAgZy5tb3ZlVG8oeC10LCB5LXIpO1xuICAgICAgZy5saW5lVG8oeC1yLCB5LXIpO1xuICAgICAgZy5saW5lVG8oeC1yLCB5LXQpO1xuICAgICAgZy5saW5lVG8oeCtyLCB5LXQpO1xuICAgICAgZy5saW5lVG8oeCtyLCB5LXIpO1xuICAgICAgZy5saW5lVG8oeCt0LCB5LXIpO1xuICAgICAgZy5saW5lVG8oeCt0LCB5K3IpO1xuICAgICAgZy5saW5lVG8oeCtyLCB5K3IpO1xuICAgICAgZy5saW5lVG8oeCtyLCB5K3QpO1xuICAgICAgZy5saW5lVG8oeC1yLCB5K3QpO1xuICAgICAgZy5saW5lVG8oeC1yLCB5K3IpO1xuICAgICAgZy5saW5lVG8oeC10LCB5K3IpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkaWFtb25kJzpcbiAgICAgIHJ5ID0gTWF0aC5zcXJ0KHNpemUgLyAoMiAqIHRhbjMwKSk7XG4gICAgICByeCA9IHJ5ICogdGFuMzA7XG4gICAgICBnLm1vdmVUbyh4LCB5LXJ5KTtcbiAgICAgIGcubGluZVRvKHgrcngsIHkpO1xuICAgICAgZy5saW5lVG8oeCwgeStyeSk7XG4gICAgICBnLmxpbmVUbyh4LXJ4LCB5KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc3F1YXJlJzpcbiAgICAgIHQgPSBNYXRoLnNxcnQoc2l6ZSk7XG4gICAgICByID0gdCAvIDI7XG4gICAgICBnLnJlY3QoeC1yLCB5LXIsIHQsIHQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0cmlhbmdsZS1kb3duJzpcbiAgICAgIHJ4ID0gTWF0aC5zcXJ0KHNpemUgLyBzcXJ0Myk7XG4gICAgICByeSA9IHJ4ICogc3FydDMgLyAyO1xuICAgICAgZy5tb3ZlVG8oeCwgeStyeSk7XG4gICAgICBnLmxpbmVUbyh4K3J4LCB5LXJ5KTtcbiAgICAgIGcubGluZVRvKHgtcngsIHktcnkpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0cmlhbmdsZS11cCc6XG4gICAgICByeCA9IE1hdGguc3FydChzaXplIC8gc3FydDMpO1xuICAgICAgcnkgPSByeCAqIHNxcnQzIC8gMjtcbiAgICAgIGcubW92ZVRvKHgsIHktcnkpO1xuICAgICAgZy5saW5lVG8oeCtyeCwgeStyeSk7XG4gICAgICBnLmxpbmVUbyh4LXJ4LCB5K3J5KTtcbiAgfVxuICBnLmNsb3NlUGF0aCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhdzogdXRpbC5kcmF3QWxsKHBhdGgpLFxuICBwaWNrOiB1dGlsLnBpY2tQYXRoKHBhdGgpXG59OyIsInZhciBCb3VuZHMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL0JvdW5kcycpLFxuICAgIHRleHRCb3VuZHMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL2JvdW5kJykudGV4dCxcbiAgICB0ZXh0ID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC90ZXh0JyksXG4gICAgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpLFxuICAgIHRlbXBCb3VuZHMgPSBuZXcgQm91bmRzKCk7XG5cbmZ1bmN0aW9uIGRyYXcoZywgc2NlbmUsIGJvdW5kcykge1xuICBpZiAoIXNjZW5lLml0ZW1zIHx8ICFzY2VuZS5pdGVtcy5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaXRlbXMgPSBzY2VuZS5pdGVtcyxcbiAgICAgIG8sIG9wYWMsIHgsIHksIHIsIHQsIHN0cjtcblxuICBmb3IgKHZhciBpPTAsIGxlbj1pdGVtcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBvID0gaXRlbXNbaV07XG4gICAgaWYgKGJvdW5kcyAmJiAhYm91bmRzLmludGVyc2VjdHMoby5ib3VuZHMpKVxuICAgICAgY29udGludWU7IC8vIGJvdW5kcyBjaGVja1xuXG4gICAgc3RyID0gdGV4dC52YWx1ZShvLnRleHQpO1xuICAgIGlmICghc3RyKSBjb250aW51ZTtcbiAgICBvcGFjID0gby5vcGFjaXR5ID09IG51bGwgPyAxIDogby5vcGFjaXR5O1xuICAgIGlmIChvcGFjID09PSAwKSBjb250aW51ZTtcblxuICAgIGcuZm9udCA9IHRleHQuZm9udChvKTtcbiAgICBnLnRleHRBbGlnbiA9IG8uYWxpZ24gfHwgJ2xlZnQnO1xuXG4gICAgeCA9IChvLnggfHwgMCk7XG4gICAgeSA9IChvLnkgfHwgMCk7XG4gICAgaWYgKChyID0gby5yYWRpdXMpKSB7XG4gICAgICB0ID0gKG8udGhldGEgfHwgMCkgLSBNYXRoLlBJLzI7XG4gICAgICB4ICs9IHIgKiBNYXRoLmNvcyh0KTtcbiAgICAgIHkgKz0gciAqIE1hdGguc2luKHQpO1xuICAgIH1cblxuICAgIGlmIChvLmFuZ2xlKSB7XG4gICAgICBnLnNhdmUoKTtcbiAgICAgIGcudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgZy5yb3RhdGUoby5hbmdsZSAqIE1hdGguUEkvMTgwKTtcbiAgICAgIHggPSB5ID0gMDsgLy8gcmVzZXQgeCwgeVxuICAgIH1cbiAgICB4ICs9IChvLmR4IHx8IDApO1xuICAgIHkgKz0gKG8uZHkgfHwgMCkgKyB0ZXh0Lm9mZnNldChvKTtcblxuICAgIGlmIChvLmZpbGwgJiYgdXRpbC5maWxsKGcsIG8sIG9wYWMpKSB7XG4gICAgICBnLmZpbGxUZXh0KHN0ciwgeCwgeSk7XG4gICAgfVxuICAgIGlmIChvLnN0cm9rZSAmJiB1dGlsLnN0cm9rZShnLCBvLCBvcGFjKSkge1xuICAgICAgZy5zdHJva2VUZXh0KHN0ciwgeCwgeSk7XG4gICAgfVxuICAgIGlmIChvLmFuZ2xlKSBnLnJlc3RvcmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoaXQoZywgbywgeCwgeSwgZ3gsIGd5KSB7XG4gIGlmIChvLmZvbnRTaXplIDw9IDApIHJldHVybiBmYWxzZTtcbiAgaWYgKCFvLmFuZ2xlKSByZXR1cm4gdHJ1ZTsgLy8gYm91bmRzIHN1ZmZpY2llbnQgaWYgbm8gcm90YXRpb25cblxuICAvLyBwcm9qZWN0IHBvaW50IGludG8gc3BhY2Ugb2YgdW5yb3RhdGVkIGJvdW5kc1xuICB2YXIgYiA9IHRleHRCb3VuZHMobywgdGVtcEJvdW5kcywgdHJ1ZSksXG4gICAgICBhID0gLW8uYW5nbGUgKiBNYXRoLlBJIC8gMTgwLFxuICAgICAgY29zID0gTWF0aC5jb3MoYSksXG4gICAgICBzaW4gPSBNYXRoLnNpbihhKSxcbiAgICAgIG94ID0gby54LFxuICAgICAgb3kgPSBvLnksXG4gICAgICBweCA9IGNvcypneCAtIHNpbipneSArIChveCAtIG94KmNvcyArIG95KnNpbiksXG4gICAgICBweSA9IHNpbipneCArIGNvcypneSArIChveSAtIG94KnNpbiAtIG95KmNvcyk7XG5cbiAgcmV0dXJuIGIuY29udGFpbnMocHgsIHB5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRyYXc6IGRyYXcsXG4gIHBpY2s6IHV0aWwucGljayhoaXQpXG59O1xuIiwiZnVuY3Rpb24gZHJhd1BhdGhPbmUocGF0aCwgZywgbywgaXRlbXMpIHtcbiAgaWYgKHBhdGgoZywgaXRlbXMpKSByZXR1cm47XG5cbiAgdmFyIG9wYWMgPSBvLm9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvLm9wYWNpdHk7XG4gIGlmIChvcGFjPT09MCkgcmV0dXJuO1xuXG4gIGlmIChvLmZpbGwgJiYgZmlsbChnLCBvLCBvcGFjKSkgeyBnLmZpbGwoKTsgfVxuICBpZiAoby5zdHJva2UgJiYgc3Ryb2tlKGcsIG8sIG9wYWMpKSB7IGcuc3Ryb2tlKCk7IH1cbn1cblxuZnVuY3Rpb24gZHJhd1BhdGhBbGwocGF0aCwgZywgc2NlbmUsIGJvdW5kcykge1xuICB2YXIgaSwgbGVuLCBpdGVtO1xuICBmb3IgKGk9MCwgbGVuPXNjZW5lLml0ZW1zLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgIGl0ZW0gPSBzY2VuZS5pdGVtc1tpXTtcbiAgICBpZiAoIWJvdW5kcyB8fCBib3VuZHMuaW50ZXJzZWN0cyhpdGVtLmJvdW5kcykpIHtcbiAgICAgIGRyYXdQYXRoT25lKHBhdGgsIGcsIGl0ZW0sIGl0ZW0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkcmF3QWxsKHBhdGhGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbihnLCBzY2VuZSwgYm91bmRzKSB7XG4gICAgZHJhd1BhdGhBbGwocGF0aEZ1bmMsIGcsIHNjZW5lLCBib3VuZHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkcmF3T25lKHBhdGhGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbihnLCBzY2VuZSwgYm91bmRzKSB7XG4gICAgaWYgKCFzY2VuZS5pdGVtcy5sZW5ndGgpIHJldHVybjtcbiAgICBpZiAoIWJvdW5kcyB8fCBib3VuZHMuaW50ZXJzZWN0cyhzY2VuZS5ib3VuZHMpKSB7XG4gICAgICBkcmF3UGF0aE9uZShwYXRoRnVuYywgZywgc2NlbmUuaXRlbXNbMF0sIHNjZW5lLml0ZW1zKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciB0cnVlRnVuYyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfTtcblxuZnVuY3Rpb24gcGljayh0ZXN0KSB7XG4gIGlmICghdGVzdCkgdGVzdCA9IHRydWVGdW5jO1xuXG4gIHJldHVybiBmdW5jdGlvbihnLCBzY2VuZSwgeCwgeSwgZ3gsIGd5KSB7XG4gICAgaWYgKCFzY2VuZS5pdGVtcy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgdmFyIG8sIGIsIGk7XG5cbiAgICBpZiAoZy5waXhlbHJhdGlvICE9IG51bGwgJiYgZy5waXhlbHJhdGlvICE9PSAxKSB7XG4gICAgICB4ICo9IGcucGl4ZWxyYXRpbztcbiAgICAgIHkgKj0gZy5waXhlbHJhdGlvO1xuICAgIH1cblxuICAgIGZvciAoaT1zY2VuZS5pdGVtcy5sZW5ndGg7IC0taSA+PSAwOykge1xuICAgICAgbyA9IHNjZW5lLml0ZW1zW2ldOyBiID0gby5ib3VuZHM7XG4gICAgICAvLyBmaXJzdCBoaXQgdGVzdCBhZ2FpbnN0IGJvdW5kaW5nIGJveFxuICAgICAgaWYgKChiICYmICFiLmNvbnRhaW5zKGd4LCBneSkpIHx8ICFiKSBjb250aW51ZTtcbiAgICAgIC8vIGlmIGluIGJvdW5kaW5nIGJveCwgcGVyZm9ybSBtb3JlIGNhcmVmdWwgdGVzdFxuICAgICAgaWYgKHRlc3QoZywgbywgeCwgeSwgZ3gsIGd5KSkgcmV0dXJuIG87XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXN0UGF0aChwYXRoLCBmaWxsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGcsIG8sIHgsIHkpIHtcbiAgICB2YXIgaXRlbSA9IEFycmF5LmlzQXJyYXkobykgPyBvWzBdIDogbyxcbiAgICAgICAgZmlsbCA9IChmaWxsZWQgPT0gbnVsbCkgPyBpdGVtLmZpbGwgOiBmaWxsZWQsXG4gICAgICAgIHN0cm9rZSA9IGl0ZW0uc3Ryb2tlICYmIGcuaXNQb2ludEluU3Ryb2tlLCBsdywgbGM7XG5cbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBsdyA9IGl0ZW0uc3Ryb2tlV2lkdGg7XG4gICAgICBsYyA9IGl0ZW0uc3Ryb2tlQ2FwO1xuICAgICAgZy5saW5lV2lkdGggPSBsdyAhPSBudWxsID8gbHcgOiAxO1xuICAgICAgZy5saW5lQ2FwICAgPSBsYyAhPSBudWxsID8gbGMgOiAnYnV0dCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGgoZywgbykgPyBmYWxzZSA6XG4gICAgICAoZmlsbCAmJiBnLmlzUG9pbnRJblBhdGgoeCwgeSkpIHx8XG4gICAgICAoc3Ryb2tlICYmIGcuaXNQb2ludEluU3Ryb2tlKHgsIHkpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGlja1BhdGgocGF0aCkge1xuICByZXR1cm4gcGljayh0ZXN0UGF0aChwYXRoKSk7XG59XG5cbmZ1bmN0aW9uIGZpbGwoZywgbywgb3BhY2l0eSkge1xuICBvcGFjaXR5ICo9IChvLmZpbGxPcGFjaXR5PT1udWxsID8gMSA6IG8uZmlsbE9wYWNpdHkpO1xuICBpZiAob3BhY2l0eSA+IDApIHtcbiAgICBnLmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICBnLmZpbGxTdHlsZSA9IGNvbG9yKGcsIG8sIG8uZmlsbCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cm9rZShnLCBvLCBvcGFjaXR5KSB7XG4gIHZhciBsdyA9IChsdyA9IG8uc3Ryb2tlV2lkdGgpICE9IG51bGwgPyBsdyA6IDEsIGxjO1xuICBpZiAobHcgPD0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gIG9wYWNpdHkgKj0gKG8uc3Ryb2tlT3BhY2l0eT09bnVsbCA/IDEgOiBvLnN0cm9rZU9wYWNpdHkpO1xuICBpZiAob3BhY2l0eSA+IDApIHtcbiAgICBnLmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICBnLnN0cm9rZVN0eWxlID0gY29sb3IoZywgbywgby5zdHJva2UpO1xuICAgIGcubGluZVdpZHRoID0gbHc7XG4gICAgZy5saW5lQ2FwID0gKGxjID0gby5zdHJva2VDYXApICE9IG51bGwgPyBsYyA6ICdidXR0JztcbiAgICBnLnZnTGluZURhc2goby5zdHJva2VEYXNoIHx8IG51bGwpO1xuICAgIGcudmdMaW5lRGFzaE9mZnNldChvLnN0cm9rZURhc2hPZmZzZXQgfHwgMCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbG9yKGcsIG8sIHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUuaWQpID9cbiAgICBncmFkaWVudChnLCB2YWx1ZSwgby5ib3VuZHMpIDpcbiAgICB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ3JhZGllbnQoZywgcCwgYikge1xuICB2YXIgdyA9IGIud2lkdGgoKSxcbiAgICAgIGggPSBiLmhlaWdodCgpLFxuICAgICAgeDEgPSBiLngxICsgcC54MSAqIHcsXG4gICAgICB5MSA9IGIueTEgKyBwLnkxICogaCxcbiAgICAgIHgyID0gYi54MSArIHAueDIgKiB3LFxuICAgICAgeTIgPSBiLnkxICsgcC55MiAqIGgsXG4gICAgICBncmFkID0gZy5jcmVhdGVMaW5lYXJHcmFkaWVudCh4MSwgeTEsIHgyLCB5MiksXG4gICAgICBzdG9wID0gcC5zdG9wcyxcbiAgICAgIGksIG47XG5cbiAgZm9yIChpPTAsIG49c3RvcC5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgZ3JhZC5hZGRDb2xvclN0b3Aoc3RvcFtpXS5vZmZzZXQsIHN0b3BbaV0uY29sb3IpO1xuICB9XG4gIHJldHVybiBncmFkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJhd09uZTogIGRyYXdPbmUsXG4gIGRyYXdBbGw6ICBkcmF3QWxsLFxuICBwaWNrOiAgICAgcGljayxcbiAgcGlja1BhdGg6IHBpY2tQYXRoLFxuICB0ZXN0UGF0aDogdGVzdFBhdGgsXG4gIHN0cm9rZTogICBzdHJva2UsXG4gIGZpbGw6ICAgICBmaWxsLFxuICBjb2xvcjogICAgY29sb3IsXG4gIGdyYWRpZW50OiBncmFkaWVudFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAnY2FudmFzJzogcmVxdWlyZSgnLi9jYW52YXMnKSxcbiAgJ3N2Zyc6ICAgIHJlcXVpcmUoJy4vc3ZnJylcbn07XG4iLCJ2YXIgRE9NID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9kb20nKSxcbiAgICBIYW5kbGVyID0gcmVxdWlyZSgnLi4vSGFuZGxlcicpO1xuXG5mdW5jdGlvbiBTVkdIYW5kbGVyKCkge1xuICBIYW5kbGVyLmNhbGwodGhpcyk7XG59XG5cbnZhciBiYXNlID0gSGFuZGxlci5wcm90b3R5cGU7XG52YXIgcHJvdG90eXBlID0gKFNWR0hhbmRsZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlKSk7XG5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTVkdIYW5kbGVyO1xuXG5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGVsLCBwYWQsIG9iaikge1xuICB0aGlzLl9zdmcgPSBET00uZmluZChlbCwgJ3N2ZycpO1xuICByZXR1cm4gYmFzZS5pbml0aWFsaXplLmNhbGwodGhpcywgZWwsIHBhZCwgb2JqKTtcbn07XG5cbnByb3RvdHlwZS5zdmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3N2Zztcbn07XG5cbi8vIHdyYXAgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBTVkcgRE9NXG5wcm90b3R5cGUubGlzdGVuZXIgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2dCkge1xuICAgIHZhciB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgICBpdGVtID0gdGFyZ2V0Ll9fZGF0YV9fO1xuICAgIGV2dC52ZWdhVHlwZSA9IGV2dC50eXBlO1xuICAgIGl0ZW0gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbVswXSA6IGl0ZW07XG4gICAgaGFuZGxlci5jYWxsKHRoYXQuX29iaiwgZXZ0LCBpdGVtKTtcbiAgfTtcbn07XG5cbi8vIGFkZCBhbiBldmVudCBoYW5kbGVyXG5wcm90b3R5cGUub24gPSBmdW5jdGlvbih0eXBlLCBoYW5kbGVyKSB7XG4gIHZhciBuYW1lID0gdGhpcy5ldmVudE5hbWUodHlwZSksXG4gICAgICBzdmcgPSB0aGlzLl9zdmcsXG4gICAgICBoID0gdGhpcy5faGFuZGxlcnMsXG4gICAgICB4ID0ge1xuICAgICAgICB0eXBlOiAgICAgdHlwZSxcbiAgICAgICAgaGFuZGxlcjogIGhhbmRsZXIsXG4gICAgICAgIGxpc3RlbmVyOiB0aGlzLmxpc3RlbmVyKGhhbmRsZXIpXG4gICAgICB9O1xuXG4gIChoW25hbWVdIHx8IChoW25hbWVdID0gW10pKS5wdXNoKHgpO1xuICBzdmcuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCB4Lmxpc3RlbmVyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyByZW1vdmUgYW4gZXZlbnQgaGFuZGxlclxucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKHR5cGUsIGhhbmRsZXIpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLmV2ZW50TmFtZSh0eXBlKSxcbiAgICAgIHN2ZyA9IHRoaXMuX3N2ZyxcbiAgICAgIGggPSB0aGlzLl9oYW5kbGVyc1tuYW1lXSwgaTtcbiAgaWYgKCFoKSByZXR1cm47XG4gIGZvciAoaT1oLmxlbmd0aDsgLS1pPj0wOykge1xuICAgIGlmIChoW2ldLnR5cGUgPT09IHR5cGUgJiYgIWhhbmRsZXIgfHwgaFtpXS5oYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICBzdmcucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoW2ldLmxpc3RlbmVyKTtcbiAgICAgIGguc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1ZHSGFuZGxlcjtcbiIsInZhciBJbWFnZUxvYWRlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvSW1hZ2VMb2FkZXInKSxcbiAgICBSZW5kZXJlciA9IHJlcXVpcmUoJy4uL1JlbmRlcmVyJyksXG4gICAgdGV4dCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvdGV4dCcpLFxuICAgIERPTSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZG9tJyksXG4gICAgU1ZHID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9zdmcnKSxcbiAgICBucyA9IFNWRy5tZXRhZGF0YS54bWxucyxcbiAgICBtYXJrcyA9IHJlcXVpcmUoJy4vbWFya3MnKTtcblxuZnVuY3Rpb24gU1ZHUmVuZGVyZXIobG9hZENvbmZpZykge1xuICBSZW5kZXJlci5jYWxsKHRoaXMpO1xuICB0aGlzLl9sb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIobG9hZENvbmZpZyk7XG4gIHRoaXMuX2RpcnR5SUQgPSAwO1xufVxuXG52YXIgYmFzZSA9IFJlbmRlcmVyLnByb3RvdHlwZTtcbnZhciBwcm90b3R5cGUgPSAoU1ZHUmVuZGVyZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlKSk7XG5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTVkdSZW5kZXJlcjtcblxucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihlbCwgd2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICBpZiAoZWwpIHtcbiAgICB0aGlzLl9zdmcgPSBET00uY2hpbGQoZWwsIDAsICdzdmcnLCBucywgJ21hcmtzJyk7XG4gICAgRE9NLmNsZWFyKGVsLCAxKTtcbiAgICAvLyBzZXQgdGhlIHN2ZyByb290IGdyb3VwXG4gICAgdGhpcy5fcm9vdCA9IERPTS5jaGlsZCh0aGlzLl9zdmcsIDAsICdnJywgbnMpO1xuICAgIERPTS5jbGVhcih0aGlzLl9zdmcsIDEpO1xuICB9XG5cbiAgLy8gY3JlYXRlIHRoZSBzdmcgZGVmaW5pdGlvbnMgY2FjaGVcbiAgdGhpcy5fZGVmcyA9IHtcbiAgICBjbGlwX2lkOiAgMSxcbiAgICBncmFkaWVudDoge30sXG4gICAgY2xpcHBpbmc6IHt9XG4gIH07XG5cbiAgLy8gc2V0IGJhY2tncm91bmQgY29sb3IgaWYgZGVmaW5lZFxuICB0aGlzLmJhY2tncm91bmQodGhpcy5fYmdjb2xvcik7XG5cbiAgcmV0dXJuIGJhc2UuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIGVsLCB3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nKTtcbn07XG5cbnByb3RvdHlwZS5iYWNrZ3JvdW5kID0gZnVuY3Rpb24oYmdjb2xvcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAmJiB0aGlzLl9zdmcpIHtcbiAgICB0aGlzLl9zdmcuc3R5bGUuc2V0UHJvcGVydHkoJ2JhY2tncm91bmQtY29sb3InLCBiZ2NvbG9yKTtcbiAgfVxuICByZXR1cm4gYmFzZS5iYWNrZ3JvdW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICBiYXNlLnJlc2l6ZS5jYWxsKHRoaXMsIHdpZHRoLCBoZWlnaHQsIHBhZGRpbmcpO1xuICBcbiAgaWYgKHRoaXMuX3N2Zykge1xuICAgIHZhciB3ID0gdGhpcy5fd2lkdGgsXG4gICAgICAgIGggPSB0aGlzLl9oZWlnaHQsXG4gICAgICAgIHAgPSB0aGlzLl9wYWRkaW5nO1xuICBcbiAgICB0aGlzLl9zdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHcgKyBwLmxlZnQgKyBwLnJpZ2h0KTtcbiAgICB0aGlzLl9zdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoICsgcC50b3AgKyBwLmJvdHRvbSk7XG4gICAgXG4gICAgdGhpcy5fcm9vdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJytwLmxlZnQrJywnK3AudG9wKycpJyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5zdmcgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9zdmcpIHJldHVybiBudWxsO1xuXG4gIHZhciBhdHRyID0ge1xuICAgICdjbGFzcyc6ICAnbWFya3MnLFxuICAgICd3aWR0aCc6ICB0aGlzLl93aWR0aCArIHRoaXMuX3BhZGRpbmcubGVmdCArIHRoaXMuX3BhZGRpbmcucmlnaHQsXG4gICAgJ2hlaWdodCc6IHRoaXMuX2hlaWdodCArIHRoaXMuX3BhZGRpbmcudG9wICsgdGhpcy5fcGFkZGluZy5ib3R0b20sXG4gIH07XG4gIGZvciAodmFyIGtleSBpbiBTVkcubWV0YWRhdGEpIHtcbiAgICBhdHRyW2tleV0gPSBTVkcubWV0YWRhdGFba2V5XTtcbiAgfVxuXG4gIHJldHVybiBET00ub3BlblRhZygnc3ZnJywgYXR0cikgKyB0aGlzLl9zdmcuaW5uZXJIVE1MICsgRE9NLmNsb3NlVGFnKCdzdmcnKTtcbn07XG5cbnByb3RvdHlwZS5pbWFnZVVSTCA9IGZ1bmN0aW9uKHVybCkge1xuICByZXR1cm4gdGhpcy5fbG9hZGVyLmltYWdlVVJMKHVybCk7XG59O1xuXG5cbi8vIC0tIFJlbmRlciBlbnRyeSBwb2ludCAtLVxuXG5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oc2NlbmUsIGl0ZW1zKSB7XG4gIGlmICh0aGlzLl9kaXJ0eUNoZWNrKGl0ZW1zKSkge1xuICAgIGlmICh0aGlzLl9kaXJ0eUFsbCkgdGhpcy5fcmVzZXREZWZzKCk7XG4gICAgdGhpcy5kcmF3KHRoaXMuX3Jvb3QsIHNjZW5lLCAtMSk7XG4gICAgRE9NLmNsZWFyKHRoaXMuX3Jvb3QsIDEpO1xuICB9XG4gIHRoaXMudXBkYXRlRGVmcygpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZWwsIHNjZW5lLCBpbmRleCkge1xuICB0aGlzLmRyYXdNYXJrKGVsLCBzY2VuZSwgaW5kZXgsIG1hcmtzW3NjZW5lLm1hcmt0eXBlXSk7XG59O1xuXG5cbi8vIC0tIE1hbmFnZSBTVkcgZGVmaW5pdGlvbnMgKCdkZWZzJykgYmxvY2sgLS1cblxucHJvdG90eXBlLnVwZGF0ZURlZnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN2ZyA9IHRoaXMuX3N2ZyxcbiAgICAgIGRlZnMgPSB0aGlzLl9kZWZzLFxuICAgICAgZWwgPSBkZWZzLmVsLFxuICAgICAgaW5kZXggPSAwLCBpZDtcblxuICBmb3IgKGlkIGluIGRlZnMuZ3JhZGllbnQpIHtcbiAgICBpZiAoIWVsKSBlbCA9IChkZWZzLmVsID0gRE9NLmNoaWxkKHN2ZywgMCwgJ2RlZnMnLCBucykpO1xuICAgIHVwZGF0ZUdyYWRpZW50KGVsLCBkZWZzLmdyYWRpZW50W2lkXSwgaW5kZXgrKyk7XG4gIH1cblxuICBmb3IgKGlkIGluIGRlZnMuY2xpcHBpbmcpIHtcbiAgICBpZiAoIWVsKSBlbCA9IChkZWZzLmVsID0gRE9NLmNoaWxkKHN2ZywgMCwgJ2RlZnMnLCBucykpO1xuICAgIHVwZGF0ZUNsaXBwaW5nKGVsLCBkZWZzLmNsaXBwaW5nW2lkXSwgaW5kZXgrKyk7XG4gIH1cblxuICAvLyBjbGVhbi11cFxuICBpZiAoZWwpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIHN2Zy5yZW1vdmVDaGlsZChlbCk7XG4gICAgICBkZWZzLmVsID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NLmNsZWFyKGVsLCBpbmRleCk7ICAgICAgXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVHcmFkaWVudChlbCwgZ3JhZCwgaW5kZXgpIHtcbiAgdmFyIGksIG4sIHN0b3A7XG5cbiAgZWwgPSBET00uY2hpbGQoZWwsIGluZGV4LCAnbGluZWFyR3JhZGllbnQnLCBucyk7XG4gIGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBncmFkLmlkKTtcbiAgZWwuc2V0QXR0cmlidXRlKCd4MScsIGdyYWQueDEpO1xuICBlbC5zZXRBdHRyaWJ1dGUoJ3gyJywgZ3JhZC54Mik7XG4gIGVsLnNldEF0dHJpYnV0ZSgneTEnLCBncmFkLnkxKTtcbiAgZWwuc2V0QXR0cmlidXRlKCd5MicsIGdyYWQueTIpO1xuICBcbiAgZm9yIChpPTAsIG49Z3JhZC5zdG9wcy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgc3RvcCA9IERPTS5jaGlsZChlbCwgaSwgJ3N0b3AnLCBucyk7XG4gICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ29mZnNldCcsIGdyYWQuc3RvcHNbaV0ub2Zmc2V0KTtcbiAgICBzdG9wLnNldEF0dHJpYnV0ZSgnc3RvcC1jb2xvcicsIGdyYWQuc3RvcHNbaV0uY29sb3IpO1xuICB9XG4gIERPTS5jbGVhcihlbCwgaSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaXBwaW5nKGVsLCBjbGlwLCBpbmRleCkge1xuICB2YXIgcmVjdDtcblxuICBlbCA9IERPTS5jaGlsZChlbCwgaW5kZXgsICdjbGlwUGF0aCcsIG5zKTtcbiAgZWwuc2V0QXR0cmlidXRlKCdpZCcsIGNsaXAuaWQpO1xuICByZWN0ID0gRE9NLmNoaWxkKGVsLCAwLCAncmVjdCcsIG5zKTtcbiAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCAwKTtcbiAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCAwKTtcbiAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgY2xpcC53aWR0aCk7XG4gIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBjbGlwLmhlaWdodCk7XG59XG5cbnByb3RvdHlwZS5fcmVzZXREZWZzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkZWYgPSB0aGlzLl9kZWZzO1xuICBkZWYuY2xpcF9pZCA9IDE7XG4gIGRlZi5ncmFkaWVudCA9IHt9O1xuICBkZWYuY2xpcHBpbmcgPSB7fTtcbn07XG5cblxuLy8gLS0gTWFuYWdlIHJlbmRlcmluZyBvZiBpdGVtcyBtYXJrZWQgYXMgZGlydHkgLS1cblxucHJvdG90eXBlLmlzRGlydHkgPSBmdW5jdGlvbihpdGVtKSB7XG4gIHJldHVybiB0aGlzLl9kaXJ0eUFsbCB8fCBpdGVtLmRpcnR5ID09PSB0aGlzLl9kaXJ0eUlEO1xufTtcblxucHJvdG90eXBlLl9kaXJ0eUNoZWNrID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgdGhpcy5fZGlydHlBbGwgPSB0cnVlO1xuICBpZiAoIWl0ZW1zKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaWQgPSArK3RoaXMuX2RpcnR5SUQsXG4gICAgICBpdGVtLCBtYXJrLCB0eXBlLCBtZGVmLCBpLCBuLCBvO1xuXG4gIGZvciAoaT0wLCBuPWl0ZW1zLmxlbmd0aDsgaTxuOyArK2kpIHtcbiAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgbWFyayA9IGl0ZW0ubWFyaztcbiAgICBpZiAobWFyay5tYXJrdHlwZSAhPT0gdHlwZSkge1xuICAgICAgLy8gbWVtb2l6ZSBtYXJrIGluc3RhbmNlIGxvb2t1cFxuICAgICAgdHlwZSA9IG1hcmsubWFya3R5cGU7XG4gICAgICBtZGVmID0gbWFya3NbdHlwZV07XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0uc3RhdHVzID09PSAnZXhpdCcpIHsgLy8gRVhJVFxuICAgICAgaWYgKGl0ZW0uX3N2Zykge1xuICAgICAgICBpZiAobWRlZi5uZXN0ICYmIGl0ZW0ubWFyay5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBpZiBuZXN0ZWQgbWFyayB3aXRoIHJlbWFpbmluZyBwb2ludHMsIHVwZGF0ZSBpbnN0ZWFkXG4gICAgICAgICAgdGhpcy5fdXBkYXRlKG1kZWYsIGl0ZW0uX3N2ZywgaXRlbS5tYXJrLml0ZW1zWzBdKTtcbiAgICAgICAgICBvID0gaXRlbS5tYXJrLml0ZW1zWzBdO1xuICAgICAgICAgIG8uX3N2ZyA9IGl0ZW0uX3N2ZztcbiAgICAgICAgICBvLl91cGRhdGUgPSBpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2UgcmVtb3ZlIGZyb20gRE9NXG4gICAgICAgICAgRE9NLnJlbW92ZShpdGVtLl9zdmcpO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW0uX3N2ZyA9IG51bGw7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpdGVtID0gKG1kZWYubmVzdCA/IG1hcmsuaXRlbXNbMF0gOiBpdGVtKTtcbiAgICBpZiAoaXRlbS5fdXBkYXRlID09PSBpZCkgeyAvLyBBbHJlYWR5IHByb2Nlc3NlZFxuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChpdGVtLl9zdmcpIHsgLy8gVVBEQVRFXG4gICAgICB0aGlzLl91cGRhdGUobWRlZiwgaXRlbS5fc3ZnLCBpdGVtKTtcbiAgICB9IGVsc2UgeyAvLyBFTlRFUlxuICAgICAgdGhpcy5fZGlydHlBbGwgPSBmYWxzZTtcbiAgICAgIGRpcnR5UGFyZW50cyhpdGVtLCBpZCk7XG4gICAgfVxuICAgIGl0ZW0uX3VwZGF0ZSA9IGlkO1xuICB9XG4gIHJldHVybiAhdGhpcy5fZGlydHlBbGw7XG59O1xuXG5mdW5jdGlvbiBkaXJ0eVBhcmVudHMoaXRlbSwgaWQpIHtcbiAgZm9yICg7IGl0ZW0gJiYgaXRlbS5kaXJ0eSAhPT0gaWQ7IGl0ZW09aXRlbS5tYXJrLmdyb3VwKSB7XG4gICAgaXRlbS5kaXJ0eSA9IGlkO1xuICAgIGlmIChpdGVtLm1hcmsgJiYgaXRlbS5tYXJrLmRpcnR5ICE9PSBpZCkge1xuICAgICAgaXRlbS5tYXJrLmRpcnR5ID0gaWQ7XG4gICAgfSBlbHNlIHJldHVybjtcbiAgfVxufVxuXG5cbi8vIC0tIENvbnN0cnVjdCAmIG1haW50YWluIHNjZW5lZ3JhcGggdG8gU1ZHIG1hcHBpbmcgLS0tXG5cbi8vIERyYXcgYSBtYXJrIGNvbnRhaW5lci5cbnByb3RvdHlwZS5kcmF3TWFyayA9IGZ1bmN0aW9uKGVsLCBzY2VuZSwgaW5kZXgsIG1kZWYpIHtcbiAgaWYgKCF0aGlzLmlzRGlydHkoc2NlbmUpKSByZXR1cm47XG5cbiAgdmFyIGl0ZW1zID0gbWRlZi5uZXN0ID9cbiAgICAgICAgKHNjZW5lLml0ZW1zICYmIHNjZW5lLml0ZW1zLmxlbmd0aCA/IFtzY2VuZS5pdGVtc1swXV0gOiBbXSkgOlxuICAgICAgICBzY2VuZS5pdGVtcyB8fCBbXSxcbiAgICAgIGV2ZW50cyA9IHNjZW5lLmludGVyYWN0aXZlID09PSBmYWxzZSA/ICdub25lJyA6IG51bGwsXG4gICAgICBpc0dyb3VwID0gKG1kZWYudGFnID09PSAnZycpLFxuICAgICAgY2xhc3NOYW1lID0gRE9NLmNzc0NsYXNzKHNjZW5lKSxcbiAgICAgIHAsIGksIG4sIGMsIGQsIGluc2VydDtcblxuICBwID0gRE9NLmNoaWxkKGVsLCBpbmRleCsxLCAnZycsIG5zLCBjbGFzc05hbWUpO1xuICBwLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xuICBzY2VuZS5fc3ZnID0gcDtcbiAgaWYgKCFpc0dyb3VwICYmIGV2ZW50cykge1xuICAgIHAuc3R5bGUuc2V0UHJvcGVydHkoJ3BvaW50ZXItZXZlbnRzJywgZXZlbnRzKTtcbiAgfVxuXG4gIGZvciAoaT0wLCBuPWl0ZW1zLmxlbmd0aDsgaTxuOyArK2kpIHtcbiAgICBpZiAodGhpcy5pc0RpcnR5KGQgPSBpdGVtc1tpXSkpIHtcbiAgICAgIGluc2VydCA9ICEodGhpcy5fZGlydHlBbGwgfHwgZC5fc3ZnKTtcbiAgICAgIGMgPSBiaW5kKHAsIG1kZWYsIGQsIGksIGluc2VydCk7XG4gICAgICB0aGlzLl91cGRhdGUobWRlZiwgYywgZCk7XG4gICAgICBpZiAoaXNHcm91cCkge1xuICAgICAgICBpZiAoaW5zZXJ0KSB0aGlzLl9kaXJ0eUFsbCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlY3Vyc2UoYywgZCk7XG4gICAgICAgIGlmIChpbnNlcnQpIHRoaXMuX2RpcnR5QWxsID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIERPTS5jbGVhcihwLCBpKTtcbiAgcmV0dXJuIHA7XG59O1xuXG4vLyBSZWN1cnNpdmVseSBwcm9jZXNzIGdyb3VwIGNvbnRlbnRzLlxucHJvdG90eXBlLl9yZWN1cnNlID0gZnVuY3Rpb24oZWwsIGdyb3VwKSB7XG4gIHZhciBpdGVtcyA9IGdyb3VwLml0ZW1zIHx8IFtdLFxuICAgICAgbGVnZW5kcyA9IGdyb3VwLmxlZ2VuZEl0ZW1zIHx8IFtdLFxuICAgICAgYXhlcyA9IGdyb3VwLmF4aXNJdGVtcyB8fCBbXSxcbiAgICAgIGlkeCA9IDAsIGosIG07XG5cbiAgZm9yIChqPTAsIG09YXhlcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgaWYgKGF4ZXNbal0ubGF5ZXIgPT09ICdiYWNrJykge1xuICAgICAgdGhpcy5kcmF3TWFyayhlbCwgYXhlc1tqXSwgaWR4KyssIG1hcmtzLmdyb3VwKTtcbiAgICB9XG4gIH1cbiAgZm9yIChqPTAsIG09aXRlbXMubGVuZ3RoOyBqPG07ICsraikge1xuICAgIHRoaXMuZHJhdyhlbCwgaXRlbXNbal0sIGlkeCsrKTtcbiAgfVxuICBmb3IgKGo9MCwgbT1heGVzLmxlbmd0aDsgajxtOyArK2opIHtcbiAgICBpZiAoYXhlc1tqXS5sYXllciAhPT0gJ2JhY2snKSB7XG4gICAgICB0aGlzLmRyYXdNYXJrKGVsLCBheGVzW2pdLCBpZHgrKywgbWFya3MuZ3JvdXApO1xuICAgIH1cbiAgfVxuICBmb3IgKGo9MCwgbT1sZWdlbmRzLmxlbmd0aDsgajxtOyArK2opIHtcbiAgICB0aGlzLmRyYXdNYXJrKGVsLCBsZWdlbmRzW2pdLCBpZHgrKywgbWFya3MuZ3JvdXApO1xuICB9XG5cbiAgLy8gcmVtb3ZlIGFueSBleHRyYW5lb3VzIERPTSBlbGVtZW50c1xuICBET00uY2xlYXIoZWwsIDEgKyBpZHgpO1xufTtcblxuLy8gQmluZCBhIHNjZW5lZ3JhcGggaXRlbSB0byBhbiBTVkcgRE9NIGVsZW1lbnQuXG4vLyBDcmVhdGUgbmV3IFNWRyBlbGVtZW50cyBhcyBuZWVkZWQuXG5mdW5jdGlvbiBiaW5kKGVsLCBtZGVmLCBpdGVtLCBpbmRleCwgaW5zZXJ0KSB7XG4gIC8vIGNyZWF0ZSBzdmcgZWxlbWVudCwgYmluZCBpdGVtIGRhdGEgZm9yIEQzIGNvbXBhdGliaWxpdHlcbiAgdmFyIG5vZGUgPSBET00uY2hpbGQoZWwsIGluZGV4LCBtZGVmLnRhZywgbnMsIG51bGwsIGluc2VydCk7XG4gIG5vZGUuX19kYXRhX18gPSBpdGVtO1xuICBub2RlLl9fdmFsdWVzX18gPSB7ZmlsbDogJ2RlZmF1bHQnfTtcblxuICAvLyBjcmVhdGUgYmFja2dyb3VuZCByZWN0XG4gIGlmIChtZGVmLnRhZyA9PT0gJ2cnKSB7XG4gICAgdmFyIGJnID0gRE9NLmNoaWxkKG5vZGUsIDAsICdyZWN0JywgbnMsICdiYWNrZ3JvdW5kJyk7XG4gICAgYmcuX19kYXRhX18gPSBpdGVtO1xuICB9XG5cbiAgLy8gYWRkIHBvaW50ZXIgZnJvbSBzY2VuZWdyYXBoIGl0ZW0gdG8gc3ZnIGVsZW1lbnRcbiAgcmV0dXJuIChpdGVtLl9zdmcgPSBub2RlKTtcbn1cblxuXG4vLyAtLSBTZXQgYXR0cmlidXRlcyAmIHN0eWxlcyBvbiBTVkcgZWxlbWVudHMgLS0tXG5cbnZhciBocmVmID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmxvY2F0aW9uLmhyZWYgOiAnJyksXG4gICAgZWxlbWVudCA9IG51bGwsIC8vIHRlbXAgdmFyIGZvciBjdXJyZW50IFNWRyBlbGVtZW50XG4gICAgdmFsdWVzID0gbnVsbDsgIC8vIHRlbXAgdmFyIGZvciBjdXJyZW50IHZhbHVlcyBoYXNoXG5cbi8vIEV4dHJhIGNvbmZpZ3VyYXRpb24gZm9yIGNlcnRhaW4gbWFyayB0eXBlc1xudmFyIG1hcmtfZXh0cmFzID0ge1xuICBncm91cDogZnVuY3Rpb24obWRlZiwgZWwsIGl0ZW0pIHtcbiAgICBlbGVtZW50ID0gZWwuY2hpbGROb2Rlc1swXTtcbiAgICB2YWx1ZXMgPSBlbC5fX3ZhbHVlc19fOyAvLyB1c2UgcGFyZW50J3MgdmFsdWVzIGhhc2hcbiAgICBtZGVmLmJhY2tncm91bmQoZW1pdCwgaXRlbSwgdGhpcyk7XG5cbiAgICB2YXIgdmFsdWUgPSBpdGVtLm1hcmsuaW50ZXJhY3RpdmUgPT09IGZhbHNlID8gJ25vbmUnIDogbnVsbDtcbiAgICBpZiAodmFsdWUgIT09IHZhbHVlcy5ldmVudHMpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJ3BvaW50ZXItZXZlbnRzJywgdmFsdWUpO1xuICAgICAgdmFsdWVzLmV2ZW50cyA9IHZhbHVlO1xuICAgIH1cbiAgfSxcbiAgdGV4dDogZnVuY3Rpb24obWRlZiwgZWwsIGl0ZW0pIHtcbiAgICB2YXIgc3RyID0gdGV4dC52YWx1ZShpdGVtLnRleHQpO1xuICAgIGlmIChzdHIgIT09IHZhbHVlcy50ZXh0KSB7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IHN0cjtcbiAgICAgIHZhbHVlcy50ZXh0ID0gc3RyO1xuICAgIH1cbiAgICBzdHIgPSB0ZXh0LmZvbnQoaXRlbSk7XG4gICAgaWYgKHN0ciAhPT0gdmFsdWVzLmZvbnQpIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCdmb250Jywgc3RyKTtcbiAgICAgIHZhbHVlcy5mb250ID0gc3RyO1xuICAgIH1cbiAgfVxufTtcblxucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbihtZGVmLCBlbCwgaXRlbSkge1xuICAvLyBzZXQgZG9tIGVsZW1lbnQgYW5kIHZhbHVlcyBjYWNoZVxuICAvLyBwcm92aWRlcyBhY2Nlc3MgdG8gZW1pdCBtZXRob2RcbiAgZWxlbWVudCA9IGVsO1xuICB2YWx1ZXMgPSBlbC5fX3ZhbHVlc19fO1xuXG4gIC8vIGFwcGx5IHN2ZyBhdHRyaWJ1dGVzXG4gIG1kZWYuYXR0cihlbWl0LCBpdGVtLCB0aGlzKTtcblxuICAvLyBzb21lIG1hcmtzIG5lZWQgc3BlY2lhbCB0cmVhdG1lbnRcbiAgdmFyIGV4dHJhID0gbWFya19leHRyYXNbbWRlZi50eXBlXTtcbiAgaWYgKGV4dHJhKSBleHRyYShtZGVmLCBlbCwgaXRlbSk7XG5cbiAgLy8gYXBwbHkgc3ZnIGNzcyBzdHlsZXNcbiAgLy8gbm90ZTogZWxlbWVudCBtYXkgYmUgbW9kaWZpZWQgYnkgJ2V4dHJhJyBtZXRob2RcbiAgdGhpcy5zdHlsZShlbGVtZW50LCBpdGVtKTtcbn07XG5cbmZ1bmN0aW9uIGVtaXQobmFtZSwgdmFsdWUsIG5zKSB7XG4gIC8vIGVhcmx5IGV4aXQgaWYgdmFsdWUgaXMgdW5jaGFuZ2VkXG4gIGlmICh2YWx1ZSA9PT0gdmFsdWVzW25hbWVdKSByZXR1cm47XG5cbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAvLyBpZiB2YWx1ZSBpcyBwcm92aWRlZCwgdXBkYXRlIERPTSBhdHRyaWJ1dGVcbiAgICBpZiAobnMpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnMsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBlbHNlIHJlbW92ZSBET00gYXR0cmlidXRlXG4gICAgaWYgKG5zKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZU5TKG5zLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gbm90ZSBjdXJyZW50IHZhbHVlIGZvciBmdXR1cmUgY29tcGFyaXNvblxuICB2YWx1ZXNbbmFtZV0gPSB2YWx1ZTtcbn1cblxucHJvdG90eXBlLnN0eWxlID0gZnVuY3Rpb24oZWwsIG8pIHtcbiAgaWYgKG8gPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgaSwgbiwgcHJvcCwgbmFtZSwgdmFsdWU7XG5cbiAgZm9yIChpPTAsIG49U1ZHLnN0eWxlUHJvcGVydGllcy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgcHJvcCA9IFNWRy5zdHlsZVByb3BlcnRpZXNbaV07XG4gICAgdmFsdWUgPSBvW3Byb3BdO1xuICAgIGlmICh2YWx1ZSA9PT0gdmFsdWVzW3Byb3BdKSBjb250aW51ZTtcblxuICAgIG5hbWUgPSBTVkcuc3R5bGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ2ZpbGwnKSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsICdub25lJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbHVlLmlkKSB7XG4gICAgICAgIC8vIGVuc3VyZSBkZWZpbml0aW9uIGlzIGluY2x1ZGVkXG4gICAgICAgIHRoaXMuX2RlZnMuZ3JhZGllbnRbdmFsdWUuaWRdID0gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gJ3VybCgnICsgaHJlZiArICcjJyArIHZhbHVlLmlkICsgJyknO1xuICAgICAgfVxuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUrJycpO1xuICAgIH1cblxuICAgIHZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR1JlbmRlcmVyO1xuIiwidmFyIFJlbmRlcmVyID0gcmVxdWlyZSgnLi4vUmVuZGVyZXInKSxcbiAgICBJbWFnZUxvYWRlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvSW1hZ2VMb2FkZXInKSxcbiAgICBTVkcgPSByZXF1aXJlKCcuLi8uLi91dGlsL3N2ZycpLFxuICAgIHRleHQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3RleHQnKSxcbiAgICBET00gPSByZXF1aXJlKCcuLi8uLi91dGlsL2RvbScpLFxuICAgIG9wZW5UYWcgPSBET00ub3BlblRhZyxcbiAgICBjbG9zZVRhZyA9IERPTS5jbG9zZVRhZyxcbiAgICBNQVJLUyA9IHJlcXVpcmUoJy4vbWFya3MnKTtcblxuZnVuY3Rpb24gU1ZHU3RyaW5nUmVuZGVyZXIobG9hZENvbmZpZykge1xuICBSZW5kZXJlci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuX2xvYWRlciA9IG5ldyBJbWFnZUxvYWRlcihsb2FkQ29uZmlnKTtcblxuICB0aGlzLl90ZXh0ID0ge1xuICAgIGhlYWQ6ICcnLFxuICAgIHJvb3Q6ICcnLFxuICAgIGZvb3Q6ICcnLFxuICAgIGRlZnM6ICcnLFxuICAgIGJvZHk6ICcnXG4gIH07XG5cbiAgdGhpcy5fZGVmcyA9IHtcbiAgICBjbGlwX2lkOiAgMSxcbiAgICBncmFkaWVudDoge30sXG4gICAgY2xpcHBpbmc6IHt9XG4gIH07XG59XG5cbnZhciBiYXNlID0gUmVuZGVyZXIucHJvdG90eXBlO1xudmFyIHByb3RvdHlwZSA9IChTVkdTdHJpbmdSZW5kZXJlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGJhc2UpKTtcbnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNWR1N0cmluZ1JlbmRlcmVyO1xuXG5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICBiYXNlLnJlc2l6ZS5jYWxsKHRoaXMsIHdpZHRoLCBoZWlnaHQsIHBhZGRpbmcpO1xuICB2YXIgcCA9IHRoaXMuX3BhZGRpbmcsXG4gICAgICB0ID0gdGhpcy5fdGV4dDtcblxuICB2YXIgYXR0ciA9IHtcbiAgICAnY2xhc3MnOiAgJ21hcmtzJyxcbiAgICAnd2lkdGgnOiAgdGhpcy5fd2lkdGggKyBwLmxlZnQgKyBwLnJpZ2h0LFxuICAgICdoZWlnaHQnOiB0aGlzLl9oZWlnaHQgKyBwLnRvcCArIHAuYm90dG9tLFxuICB9O1xuICBmb3IgKHZhciBrZXkgaW4gU1ZHLm1ldGFkYXRhKSB7XG4gICAgYXR0cltrZXldID0gU1ZHLm1ldGFkYXRhW2tleV07XG4gIH1cblxuICB0LmhlYWQgPSBvcGVuVGFnKCdzdmcnLCBhdHRyKTtcbiAgdC5yb290ID0gb3BlblRhZygnZycsIHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIHAubGVmdCArICcsJyArIHAudG9wICsgJyknXG4gIH0pO1xuICB0LmZvb3QgPSBjbG9zZVRhZygnZycpICsgY2xvc2VUYWcoJ3N2ZycpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLnN2ZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IHRoaXMuX3RleHQ7XG4gIHJldHVybiB0LmhlYWQgKyB0LmRlZnMgKyB0LnJvb3QgKyB0LmJvZHkgKyB0LmZvb3Q7XG59O1xuXG5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oc2NlbmUpIHtcbiAgdGhpcy5fdGV4dC5ib2R5ID0gdGhpcy5tYXJrKHNjZW5lKTtcbiAgdGhpcy5fdGV4dC5kZWZzID0gdGhpcy5idWlsZERlZnMoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fZGVmcy5jbGlwX2lkID0gMDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90b3R5cGUuYnVpbGREZWZzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhbGwgPSB0aGlzLl9kZWZzLFxuICAgICAgZGVmcyA9ICcnLFxuICAgICAgaSwgaWQsIGRlZiwgc3RvcHM7XG5cbiAgZm9yIChpZCBpbiBhbGwuZ3JhZGllbnQpIHtcbiAgICBkZWYgPSBhbGwuZ3JhZGllbnRbaWRdO1xuICAgIHN0b3BzID0gZGVmLnN0b3BzO1xuXG4gICAgZGVmcyArPSBvcGVuVGFnKCdsaW5lYXJHcmFkaWVudCcsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHgxOiBkZWYueDEsXG4gICAgICB4MjogZGVmLngyLFxuICAgICAgeTE6IGRlZi55MSxcbiAgICAgIHkyOiBkZWYueTJcbiAgICB9KTtcbiAgICBcbiAgICBmb3IgKGk9MDsgaTxzdG9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgZGVmcyArPSBvcGVuVGFnKCdzdG9wJywge1xuICAgICAgICBvZmZzZXQ6IHN0b3BzW2ldLm9mZnNldCxcbiAgICAgICAgJ3N0b3AtY29sb3InOiBzdG9wc1tpXS5jb2xvclxuICAgICAgfSkgKyBjbG9zZVRhZygnc3RvcCcpO1xuICAgIH1cbiAgICBcbiAgICBkZWZzICs9IGNsb3NlVGFnKCdsaW5lYXJHcmFkaWVudCcpO1xuICB9XG4gIFxuICBmb3IgKGlkIGluIGFsbC5jbGlwcGluZykge1xuICAgIGRlZiA9IGFsbC5jbGlwcGluZ1tpZF07XG5cbiAgICBkZWZzICs9IG9wZW5UYWcoJ2NsaXBQYXRoJywge2lkOiBpZH0pO1xuXG4gICAgZGVmcyArPSBvcGVuVGFnKCdyZWN0Jywge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogZGVmLndpZHRoLFxuICAgICAgaGVpZ2h0OiBkZWYuaGVpZ2h0XG4gICAgfSkgKyBjbG9zZVRhZygncmVjdCcpO1xuXG4gICAgZGVmcyArPSBjbG9zZVRhZygnY2xpcFBhdGgnKTtcbiAgfVxuICBcbiAgcmV0dXJuIChkZWZzLmxlbmd0aCA+IDApID8gb3BlblRhZygnZGVmcycpICsgZGVmcyArIGNsb3NlVGFnKCdkZWZzJykgOiAnJztcbn07XG5cbnByb3RvdHlwZS5pbWFnZVVSTCA9IGZ1bmN0aW9uKHVybCkge1xuICByZXR1cm4gdGhpcy5fbG9hZGVyLmltYWdlVVJMKHVybCk7XG59O1xuXG52YXIgb2JqZWN0O1xuXG5mdW5jdGlvbiBlbWl0KG5hbWUsIHZhbHVlLCBucywgcHJlZml4ZWQpIHtcbiAgb2JqZWN0W3ByZWZpeGVkIHx8IG5hbWVdID0gdmFsdWU7XG59XG5cbnByb3RvdHlwZS5hdHRyaWJ1dGVzID0gZnVuY3Rpb24oYXR0ciwgaXRlbSkge1xuICBvYmplY3QgPSB7fTtcbiAgYXR0cihlbWl0LCBpdGVtLCB0aGlzKTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbnByb3RvdHlwZS5tYXJrID0gZnVuY3Rpb24oc2NlbmUpIHtcbiAgdmFyIG1kZWYgPSBNQVJLU1tzY2VuZS5tYXJrdHlwZV0sXG4gICAgICB0YWcgID0gbWRlZi50YWcsXG4gICAgICBhdHRyID0gbWRlZi5hdHRyLFxuICAgICAgbmVzdCA9IG1kZWYubmVzdCB8fCBmYWxzZSxcbiAgICAgIGRhdGEgPSBuZXN0ID9cbiAgICAgICAgICAoc2NlbmUuaXRlbXMgJiYgc2NlbmUuaXRlbXMubGVuZ3RoID8gW3NjZW5lLml0ZW1zWzBdXSA6IFtdKSA6XG4gICAgICAgICAgKHNjZW5lLml0ZW1zIHx8IFtdKSxcbiAgICAgIGRlZnMgPSB0aGlzLl9kZWZzLFxuICAgICAgc3RyID0gJycsXG4gICAgICBzdHlsZSwgaSwgaXRlbTtcblxuICBpZiAodGFnICE9PSAnZycgJiYgc2NlbmUuaW50ZXJhY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgc3R5bGUgPSAnc3R5bGU9XCJwb2ludGVyLWV2ZW50czogbm9uZTtcIic7XG4gIH1cblxuICAvLyByZW5kZXIgb3BlbmluZyBncm91cCB0YWdcbiAgc3RyICs9IG9wZW5UYWcoJ2cnLCB7XG4gICAgJ2NsYXNzJzogRE9NLmNzc0NsYXNzKHNjZW5lKVxuICB9LCBzdHlsZSk7XG5cbiAgLy8gcmVuZGVyIGNvbnRhaW5lZCBlbGVtZW50c1xuICBmb3IgKGk9MDsgaTxkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgaXRlbSA9IGRhdGFbaV07XG4gICAgc3R5bGUgPSAodGFnICE9PSAnZycpID8gc3R5bGVzKGl0ZW0sIHNjZW5lLCB0YWcsIGRlZnMpIDogbnVsbDtcbiAgICBzdHIgKz0gb3BlblRhZyh0YWcsIHRoaXMuYXR0cmlidXRlcyhhdHRyLCBpdGVtKSwgc3R5bGUpO1xuICAgIGlmICh0YWcgPT09ICd0ZXh0Jykge1xuICAgICAgc3RyICs9IGVzY2FwZV90ZXh0KHRleHQudmFsdWUoaXRlbS50ZXh0KSk7XG4gICAgfSBlbHNlIGlmICh0YWcgPT09ICdnJykge1xuICAgICAgc3RyICs9IG9wZW5UYWcoJ3JlY3QnLFxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMobWRlZi5iYWNrZ3JvdW5kLCBpdGVtKSxcbiAgICAgICAgc3R5bGVzKGl0ZW0sIHNjZW5lLCAnYmdyZWN0JywgZGVmcykpICsgY2xvc2VUYWcoJ3JlY3QnKTtcbiAgICAgIHN0ciArPSB0aGlzLm1hcmtHcm91cChpdGVtKTtcbiAgICB9XG4gICAgc3RyICs9IGNsb3NlVGFnKHRhZyk7XG4gIH1cblxuICAvLyByZW5kZXIgY2xvc2luZyBncm91cCB0YWdcbiAgcmV0dXJuIHN0ciArIGNsb3NlVGFnKCdnJyk7XG59O1xuXG5wcm90b3R5cGUubWFya0dyb3VwID0gZnVuY3Rpb24oc2NlbmUpIHtcbiAgdmFyIHN0ciA9ICcnLFxuICAgICAgYXhlcyA9IHNjZW5lLmF4aXNJdGVtcyB8fCBbXSxcbiAgICAgIGl0ZW1zID0gc2NlbmUuaXRlbXMgfHwgW10sXG4gICAgICBsZWdlbmRzID0gc2NlbmUubGVnZW5kSXRlbXMgfHwgW10sXG4gICAgICBqLCBtO1xuXG4gIGZvciAoaj0wLCBtPWF4ZXMubGVuZ3RoOyBqPG07ICsraikge1xuICAgIGlmIChheGVzW2pdLmxheWVyID09PSAnYmFjaycpIHtcbiAgICAgIHN0ciArPSB0aGlzLm1hcmsoYXhlc1tqXSk7XG4gICAgfVxuICB9XG4gIGZvciAoaj0wLCBtPWl0ZW1zLmxlbmd0aDsgajxtOyArK2opIHtcbiAgICBzdHIgKz0gdGhpcy5tYXJrKGl0ZW1zW2pdKTtcbiAgfVxuICBmb3IgKGo9MCwgbT1heGVzLmxlbmd0aDsgajxtOyArK2opIHtcbiAgICBpZiAoYXhlc1tqXS5sYXllciAhPT0gJ2JhY2snKSB7XG4gICAgICBzdHIgKz0gdGhpcy5tYXJrKGF4ZXNbal0pO1xuICAgIH1cbiAgfVxuICBmb3IgKGo9MCwgbT1sZWdlbmRzLmxlbmd0aDsgajxtOyArK2opIHtcbiAgICBzdHIgKz0gdGhpcy5tYXJrKGxlZ2VuZHNbal0pO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbmZ1bmN0aW9uIHN0eWxlcyhvLCBtYXJrLCB0YWcsIGRlZnMpIHtcbiAgaWYgKG8gPT0gbnVsbCkgcmV0dXJuICcnO1xuICB2YXIgaSwgbiwgcHJvcCwgbmFtZSwgdmFsdWUsIHMgPSAnJztcblxuICBpZiAodGFnID09PSAnYmdyZWN0JyAmJiBtYXJrLmludGVyYWN0aXZlID09PSBmYWxzZSkge1xuICAgIHMgKz0gJ3BvaW50ZXItZXZlbnRzOiBub25lOyc7XG4gIH1cblxuICBpZiAodGFnID09PSAndGV4dCcpIHtcbiAgICBzICs9ICdmb250OiAnICsgdGV4dC5mb250KG8pICsgJzsnO1xuICB9XG5cbiAgZm9yIChpPTAsIG49U1ZHLnN0eWxlUHJvcGVydGllcy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgcHJvcCA9IFNWRy5zdHlsZVByb3BlcnRpZXNbaV07XG4gICAgbmFtZSA9IFNWRy5zdHlsZXNbcHJvcF07XG4gICAgdmFsdWUgPSBvW3Byb3BdO1xuXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIGlmIChuYW1lID09PSAnZmlsbCcpIHtcbiAgICAgICAgcyArPSAocy5sZW5ndGggPyAnICcgOiAnJykgKyAnZmlsbDogbm9uZTsnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFsdWUuaWQpIHtcbiAgICAgICAgLy8gZW5zdXJlIGRlZmluaXRpb24gaXMgaW5jbHVkZWRcbiAgICAgICAgZGVmcy5ncmFkaWVudFt2YWx1ZS5pZF0gPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAndXJsKCMnICsgdmFsdWUuaWQgKyAnKSc7XG4gICAgICB9XG4gICAgICBzICs9IChzLmxlbmd0aCA/ICcgJyA6ICcnKSArIG5hbWUgKyAnOiAnICsgdmFsdWUgKyAnOyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHMgPyAnc3R5bGU9XCInICsgcyArICdcIicgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVfdGV4dChzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTVkdTdHJpbmdSZW5kZXJlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBIYW5kbGVyOiAgcmVxdWlyZSgnLi9TVkdIYW5kbGVyJyksXG4gIFJlbmRlcmVyOiByZXF1aXJlKCcuL1NWR1JlbmRlcmVyJyksXG4gIHN0cmluZzoge1xuICAgIFJlbmRlcmVyIDogcmVxdWlyZSgnLi9TVkdTdHJpbmdSZW5kZXJlcicpXG4gIH1cbn07IiwidmFyIHRleHQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3RleHQnKSxcbiAgICBTVkcgPSByZXF1aXJlKCcuLi8uLi91dGlsL3N2ZycpLFxuICAgIHRleHRBbGlnbiA9IFNWRy50ZXh0QWxpZ24sXG4gICAgcGF0aCA9IFNWRy5wYXRoO1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVJdGVtKG8pIHtcbiAgcmV0dXJuIHRyYW5zbGF0ZShvLnggfHwgMCwgby55IHx8IDApO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGUoeCwgeSkge1xuICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhcmM6IHtcbiAgICB0YWc6ICAncGF0aCcsXG4gICAgdHlwZTogJ2FyYycsXG4gICAgYXR0cjogZnVuY3Rpb24oZW1pdCwgbykge1xuICAgICAgZW1pdCgndHJhbnNmb3JtJywgdHJhbnNsYXRlSXRlbShvKSk7XG4gICAgICBlbWl0KCdkJywgcGF0aC5hcmMobykpO1xuICAgIH1cbiAgfSxcbiAgYXJlYToge1xuICAgIHRhZzogICdwYXRoJyxcbiAgICB0eXBlOiAnYXJlYScsXG4gICAgbmVzdDogdHJ1ZSxcbiAgICBhdHRyOiBmdW5jdGlvbihlbWl0LCBvKSB7XG4gICAgICB2YXIgaXRlbXMgPSBvLm1hcmsuaXRlbXM7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoKSBlbWl0KCdkJywgcGF0aC5hcmVhKGl0ZW1zKSk7XG4gICAgfVxuICB9LFxuICBncm91cDoge1xuICAgIHRhZzogICdnJyxcbiAgICB0eXBlOiAnZ3JvdXAnLFxuICAgIGF0dHI6IGZ1bmN0aW9uKGVtaXQsIG8sIHJlbmRlcmVyKSB7XG4gICAgICB2YXIgaWQgPSBudWxsLCBkZWZzLCBjO1xuICAgICAgZW1pdCgndHJhbnNmb3JtJywgdHJhbnNsYXRlSXRlbShvKSk7XG4gICAgICBpZiAoby5jbGlwKSB7XG4gICAgICAgIGRlZnMgPSByZW5kZXJlci5fZGVmcztcbiAgICAgICAgaWQgPSBvLmNsaXBfaWQgfHwgKG8uY2xpcF9pZCA9ICdjbGlwJyArIGRlZnMuY2xpcF9pZCsrKTtcbiAgICAgICAgYyA9IGRlZnMuY2xpcHBpbmdbaWRdIHx8IChkZWZzLmNsaXBwaW5nW2lkXSA9IHtpZDogaWR9KTtcbiAgICAgICAgYy53aWR0aCA9IG8ud2lkdGggfHwgMDtcbiAgICAgICAgYy5oZWlnaHQgPSBvLmhlaWdodCB8fCAwO1xuICAgICAgfVxuICAgICAgZW1pdCgnY2xpcC1wYXRoJywgaWQgPyAoJ3VybCgjJyArIGlkICsgJyknKSA6IG51bGwpO1xuICAgIH0sXG4gICAgYmFja2dyb3VuZDogZnVuY3Rpb24oZW1pdCwgbykge1xuICAgICAgZW1pdCgnY2xhc3MnLCAnYmFja2dyb3VuZCcpO1xuICAgICAgZW1pdCgnd2lkdGgnLCBvLndpZHRoIHx8IDApO1xuICAgICAgZW1pdCgnaGVpZ2h0Jywgby5oZWlnaHQgfHwgMCk7XG4gICAgfVxuICB9LFxuICBpbWFnZToge1xuICAgIHRhZzogICdpbWFnZScsXG4gICAgdHlwZTogJ2ltYWdlJyxcbiAgICBhdHRyOiBmdW5jdGlvbihlbWl0LCBvLCByZW5kZXJlcikge1xuICAgICAgdmFyIHggPSBvLnggfHwgMCxcbiAgICAgICAgICB5ID0gby55IHx8IDAsXG4gICAgICAgICAgdyA9IG8ud2lkdGggfHwgMCxcbiAgICAgICAgICBoID0gby5oZWlnaHQgfHwgMCxcbiAgICAgICAgICB1cmwgPSByZW5kZXJlci5pbWFnZVVSTChvLnVybCk7XG5cbiAgICAgIHggPSB4IC0gKG8uYWxpZ24gPT09ICdjZW50ZXInID8gdy8yIDogby5hbGlnbiA9PT0gJ3JpZ2h0JyA/IHcgOiAwKTtcbiAgICAgIHkgPSB5IC0gKG8uYmFzZWxpbmUgPT09ICdtaWRkbGUnID8gaC8yIDogby5iYXNlbGluZSA9PT0gJ2JvdHRvbScgPyBoIDogMCk7XG5cbiAgICAgIGVtaXQoJ2hyZWYnLCB1cmwsICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ3hsaW5rOmhyZWYnKTtcbiAgICAgIGVtaXQoJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZSh4LCB5KSk7XG4gICAgICBlbWl0KCd3aWR0aCcsIHcpO1xuICAgICAgZW1pdCgnaGVpZ2h0JywgaCk7XG4gICAgfVxuICB9LFxuICBsaW5lOiB7XG4gICAgdGFnOiAgJ3BhdGgnLFxuICAgIHR5cGU6ICdsaW5lJyxcbiAgICBuZXN0OiB0cnVlLFxuICAgIGF0dHI6IGZ1bmN0aW9uKGVtaXQsIG8pIHtcbiAgICAgIHZhciBpdGVtcyA9IG8ubWFyay5pdGVtcztcbiAgICAgIGlmIChpdGVtcy5sZW5ndGgpIGVtaXQoJ2QnLCBwYXRoLmxpbmUoaXRlbXMpKTtcbiAgICB9XG4gIH0sXG4gIHBhdGg6IHtcbiAgICB0YWc6ICAncGF0aCcsXG4gICAgdHlwZTogJ3BhdGgnLFxuICAgIGF0dHI6IGZ1bmN0aW9uKGVtaXQsIG8pIHtcbiAgICAgIGVtaXQoJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZUl0ZW0obykpO1xuICAgICAgZW1pdCgnZCcsIG8ucGF0aCk7XG4gICAgfVxuICB9LFxuICByZWN0OiB7XG4gICAgdGFnOiAgJ3JlY3QnLFxuICAgIHR5cGU6ICdyZWN0JyxcbiAgICBuZXN0OiBmYWxzZSxcbiAgICBhdHRyOiBmdW5jdGlvbihlbWl0LCBvKSB7XG4gICAgICBlbWl0KCd0cmFuc2Zvcm0nLCB0cmFuc2xhdGVJdGVtKG8pKTtcbiAgICAgIGVtaXQoJ3dpZHRoJywgby53aWR0aCB8fCAwKTtcbiAgICAgIGVtaXQoJ2hlaWdodCcsIG8uaGVpZ2h0IHx8IDApO1xuICAgIH1cbiAgfSxcbiAgcnVsZToge1xuICAgIHRhZzogICdsaW5lJyxcbiAgICB0eXBlOiAncnVsZScsXG4gICAgYXR0cjogZnVuY3Rpb24oZW1pdCwgbykge1xuICAgICAgZW1pdCgndHJhbnNmb3JtJywgdHJhbnNsYXRlSXRlbShvKSk7XG4gICAgICBlbWl0KCd4MicsIG8ueDIgIT0gbnVsbCA/IG8ueDIgLSAoby54fHwwKSA6IDApO1xuICAgICAgZW1pdCgneTInLCBvLnkyICE9IG51bGwgPyBvLnkyIC0gKG8ueXx8MCkgOiAwKTtcbiAgICB9XG4gIH0sXG4gIHN5bWJvbDoge1xuICAgIHRhZzogICdwYXRoJyxcbiAgICB0eXBlOiAnc3ltYm9sJyxcbiAgICBhdHRyOiBmdW5jdGlvbihlbWl0LCBvKSB7XG4gICAgICBlbWl0KCd0cmFuc2Zvcm0nLCB0cmFuc2xhdGVJdGVtKG8pKTtcbiAgICAgIGVtaXQoJ2QnLCBwYXRoLnN5bWJvbChvKSk7XG4gICAgfVxuICB9LFxuICB0ZXh0OiB7XG4gICAgdGFnOiAgJ3RleHQnLFxuICAgIHR5cGU6ICd0ZXh0JyxcbiAgICBuZXN0OiBmYWxzZSxcbiAgICBhdHRyOiBmdW5jdGlvbihlbWl0LCBvKSB7XG4gICAgICB2YXIgZHggPSAoby5keCB8fCAwKSxcbiAgICAgICAgICBkeSA9IChvLmR5IHx8IDApICsgdGV4dC5vZmZzZXQobyksXG4gICAgICAgICAgeCA9IChvLnggfHwgMCksXG4gICAgICAgICAgeSA9IChvLnkgfHwgMCksXG4gICAgICAgICAgYSA9IG8uYW5nbGUgfHwgMCxcbiAgICAgICAgICByID0gby5yYWRpdXMgfHwgMCwgdDtcblxuICAgICAgaWYgKHIpIHtcbiAgICAgICAgdCA9IChvLnRoZXRhIHx8IDApIC0gTWF0aC5QSS8yO1xuICAgICAgICB4ICs9IHIgKiBNYXRoLmNvcyh0KTtcbiAgICAgICAgeSArPSByICogTWF0aC5zaW4odCk7XG4gICAgICB9XG5cbiAgICAgIGVtaXQoJ3RleHQtYW5jaG9yJywgdGV4dEFsaWduW28uYWxpZ25dIHx8ICdzdGFydCcpO1xuICAgICAgXG4gICAgICBpZiAoYSkge1xuICAgICAgICB0ID0gdHJhbnNsYXRlKHgsIHkpICsgJyByb3RhdGUoJythKycpJztcbiAgICAgICAgaWYgKGR4IHx8IGR5KSB0ICs9ICcgJyArIHRyYW5zbGF0ZShkeCwgZHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHRyYW5zbGF0ZSh4K2R4LCB5K2R5KTtcbiAgICAgIH1cbiAgICAgIGVtaXQoJ3RyYW5zZm9ybScsIHQpO1xuICAgIH1cbiAgfVxufTtcbiIsImZ1bmN0aW9uIEJvdW5kcyhiKSB7XG4gIHRoaXMuY2xlYXIoKTtcbiAgaWYgKGIpIHRoaXMudW5pb24oYik7XG59XG5cbnZhciBwcm90b3R5cGUgPSBCb3VuZHMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBCb3VuZHModGhpcyk7XG59O1xuXG5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy54MSA9ICtOdW1iZXIuTUFYX1ZBTFVFO1xuICB0aGlzLnkxID0gK051bWJlci5NQVhfVkFMVUU7XG4gIHRoaXMueDIgPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgdGhpcy55MiA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbiAgdGhpcy54MiA9IHgyO1xuICB0aGlzLnkyID0geTI7XG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgaWYgKHggPCB0aGlzLngxKSB0aGlzLngxID0geDtcbiAgaWYgKHkgPCB0aGlzLnkxKSB0aGlzLnkxID0geTtcbiAgaWYgKHggPiB0aGlzLngyKSB0aGlzLngyID0geDtcbiAgaWYgKHkgPiB0aGlzLnkyKSB0aGlzLnkyID0geTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90b3R5cGUuZXhwYW5kID0gZnVuY3Rpb24oZCkge1xuICB0aGlzLngxIC09IGQ7XG4gIHRoaXMueTEgLT0gZDtcbiAgdGhpcy54MiArPSBkO1xuICB0aGlzLnkyICs9IGQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLnJvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueDEgPSBNYXRoLmZsb29yKHRoaXMueDEpO1xuICB0aGlzLnkxID0gTWF0aC5mbG9vcih0aGlzLnkxKTtcbiAgdGhpcy54MiA9IE1hdGguY2VpbCh0aGlzLngyKTtcbiAgdGhpcy55MiA9IE1hdGguY2VpbCh0aGlzLnkyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24oZHgsIGR5KSB7XG4gIHRoaXMueDEgKz0gZHg7XG4gIHRoaXMueDIgKz0gZHg7XG4gIHRoaXMueTEgKz0gZHk7XG4gIHRoaXMueTIgKz0gZHk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uKGFuZ2xlLCB4LCB5KSB7XG4gIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICBjeCA9IHggLSB4KmNvcyArIHkqc2luLFxuICAgICAgY3kgPSB5IC0geCpzaW4gLSB5KmNvcyxcbiAgICAgIHgxID0gdGhpcy54MSwgeDIgPSB0aGlzLngyLFxuICAgICAgeTEgPSB0aGlzLnkxLCB5MiA9IHRoaXMueTI7XG5cbiAgcmV0dXJuIHRoaXMuY2xlYXIoKVxuICAgIC5hZGQoY29zKngxIC0gc2luKnkxICsgY3gsICBzaW4qeDEgKyBjb3MqeTEgKyBjeSlcbiAgICAuYWRkKGNvcyp4MSAtIHNpbip5MiArIGN4LCAgc2luKngxICsgY29zKnkyICsgY3kpXG4gICAgLmFkZChjb3MqeDIgLSBzaW4qeTEgKyBjeCwgIHNpbip4MiArIGNvcyp5MSArIGN5KVxuICAgIC5hZGQoY29zKngyIC0gc2luKnkyICsgY3gsICBzaW4qeDIgKyBjb3MqeTIgKyBjeSk7XG59O1xuXG5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbihiKSB7XG4gIGlmIChiLngxIDwgdGhpcy54MSkgdGhpcy54MSA9IGIueDE7XG4gIGlmIChiLnkxIDwgdGhpcy55MSkgdGhpcy55MSA9IGIueTE7XG4gIGlmIChiLngyID4gdGhpcy54MikgdGhpcy54MiA9IGIueDI7XG4gIGlmIChiLnkyID4gdGhpcy55MikgdGhpcy55MiA9IGIueTI7XG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG90eXBlLmVuY2xvc2VzID0gZnVuY3Rpb24oYikge1xuICByZXR1cm4gYiAmJiAoXG4gICAgdGhpcy54MSA8PSBiLngxICYmXG4gICAgdGhpcy54MiA+PSBiLngyICYmXG4gICAgdGhpcy55MSA8PSBiLnkxICYmXG4gICAgdGhpcy55MiA+PSBiLnkyXG4gICk7XG59O1xuXG5wcm90b3R5cGUuaW50ZXJzZWN0cyA9IGZ1bmN0aW9uKGIpIHtcbiAgcmV0dXJuIGIgJiYgIShcbiAgICB0aGlzLngyIDwgYi54MSB8fFxuICAgIHRoaXMueDEgPiBiLngyIHx8XG4gICAgdGhpcy55MiA8IGIueTEgfHxcbiAgICB0aGlzLnkxID4gYi55MlxuICApO1xufTtcblxucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gIShcbiAgICB4IDwgdGhpcy54MSB8fFxuICAgIHggPiB0aGlzLngyIHx8XG4gICAgeSA8IHRoaXMueTEgfHxcbiAgICB5ID4gdGhpcy55MlxuICApO1xufTtcblxucHJvdG90eXBlLndpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLngyIC0gdGhpcy54MTtcbn07XG5cbnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMueTIgLSB0aGlzLnkxO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb3VuZHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGIpIHtcbiAgZnVuY3Rpb24gbm9vcCgpIHsgfVxuICBmdW5jdGlvbiBhZGQoeCx5KSB7IGIuYWRkKHgsIHkpOyB9XG5cbiAgcmV0dXJuIHtcbiAgICBib3VuZHM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGI7XG4gICAgICByZXR1cm4gKGIgPSBfLCB0aGlzKTtcbiAgICB9LFxuICAgIGJlZ2luUGF0aDogbm9vcCxcbiAgICBjbG9zZVBhdGg6IG5vb3AsXG4gICAgbW92ZVRvOiBhZGQsXG4gICAgbGluZVRvOiBhZGQsXG4gICAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgIGIuYWRkKHgxLCB5MSk7XG4gICAgICBiLmFkZCh4MiwgeTIpO1xuICAgIH0sXG4gICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgICAgYi5hZGQoeDEsIHkxKTtcbiAgICAgIGIuYWRkKHgyLCB5Mik7XG4gICAgICBiLmFkZCh4MywgeTMpO1xuICAgIH1cbiAgfTtcbn07XG4iLCJ2YXIgZ3JhZGllbnRfaWQgPSAwO1xuXG5mdW5jdGlvbiBHcmFkaWVudCh0eXBlKSB7XG4gIHRoaXMuaWQgPSAnZ3JhZGllbnRfJyArIChncmFkaWVudF9pZCsrKTtcbiAgdGhpcy50eXBlID0gdHlwZSB8fCAnbGluZWFyJztcbiAgdGhpcy5zdG9wcyA9IFtdO1xuICB0aGlzLngxID0gMDtcbiAgdGhpcy54MiA9IDE7XG4gIHRoaXMueTEgPSAwO1xuICB0aGlzLnkyID0gMDtcbn1cblxudmFyIHByb3RvdHlwZSA9IEdyYWRpZW50LnByb3RvdHlwZTtcblxucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbihvZmZzZXQsIGNvbG9yKSB7XG4gIHRoaXMuc3RvcHMucHVzaCh7XG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgY29sb3I6IGNvbG9yXG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhZGllbnQ7IiwidmFyIGxvYWQgPSByZXF1aXJlKCdkYXRhbGliL3NyYy9pbXBvcnQvbG9hZCcpO1xuXG5mdW5jdGlvbiBJbWFnZUxvYWRlcihsb2FkQ29uZmlnKSB7XG4gIHRoaXMuX3BlbmRpbmcgPSAwO1xuICB0aGlzLl9jb25maWcgPSBsb2FkQ29uZmlnIHx8IEltYWdlTG9hZGVyLkNvbmZpZzsgXG59XG5cbi8vIE92ZXJyaWRhYmxlIGdsb2JhbCBkZWZhdWx0IGxvYWQgY29uZmlndXJhdGlvblxuSW1hZ2VMb2FkZXIuQ29uZmlnID0gbnVsbDtcblxudmFyIHByb3RvdHlwZSA9IEltYWdlTG9hZGVyLnByb3RvdHlwZTtcblxucHJvdG90eXBlLnBlbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3BlbmRpbmc7XG59O1xuXG5wcm90b3R5cGUucGFyYW1zID0gZnVuY3Rpb24odXJpKSB7XG4gIHZhciBwID0ge3VybDogdXJpfSwgaztcbiAgZm9yIChrIGluIHRoaXMuX2NvbmZpZykgeyBwW2tdID0gdGhpcy5fY29uZmlnW2tdOyB9XG4gIHJldHVybiBwO1xufTtcblxucHJvdG90eXBlLmltYWdlVVJMID0gZnVuY3Rpb24odXJpKSB7XG4gIHJldHVybiBsb2FkLnNhbml0aXplVXJsKHRoaXMucGFyYW1zKHVyaSkpO1xufTtcblxuZnVuY3Rpb24gYnJvd3Nlcih1cmksIGNhbGxiYWNrKSB7XG4gIHZhciB1cmwgPSBsb2FkLnNhbml0aXplVXJsKHRoaXMucGFyYW1zKHVyaSkpO1xuICBpZiAoIXVybCkgeyAvLyBlcnJvclxuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sodXJpLCBudWxsKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsb2FkZXIgPSB0aGlzLFxuICAgICAgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblxuICBsb2FkZXIuX3BlbmRpbmcgKz0gMTtcblxuICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBsb2FkZXIuX3BlbmRpbmcgLT0gMTtcbiAgICBpbWFnZS5sb2FkZWQgPSB0cnVlO1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobnVsbCwgaW1hZ2UpO1xuICB9O1xuICBpbWFnZS5zcmMgPSB1cmw7XG5cbiAgcmV0dXJuIGltYWdlO1xufVxuXG5mdW5jdGlvbiBzZXJ2ZXIodXJpLCBjYWxsYmFjaykge1xuICB2YXIgbG9hZGVyID0gdGhpcyxcbiAgICAgIGltYWdlID0gbmV3ICgodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snY2FudmFzJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydjYW52YXMnXSA6IG51bGwpLkltYWdlKSgpO1xuXG4gIGxvYWRlci5fcGVuZGluZyArPSAxO1xuXG4gIGxvYWQodGhpcy5wYXJhbXModXJpKSwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgbG9hZGVyLl9wZW5kaW5nIC09IDE7XG4gICAgaWYgKGVycikge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGltYWdlLnNyYyA9IGRhdGE7XG4gICAgaW1hZ2UubG9hZGVkID0gdHJ1ZTtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKG51bGwsIGltYWdlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGltYWdlO1xufVxuXG5wcm90b3R5cGUubG9hZEltYWdlID0gZnVuY3Rpb24odXJpLCBjYWxsYmFjaykge1xuICByZXR1cm4gbG9hZC51c2VYSFIgP1xuICAgIGJyb3dzZXIuY2FsbCh0aGlzLCB1cmksIGNhbGxiYWNrKSA6XG4gICAgc2VydmVyLmNhbGwodGhpcywgdXJpLCBjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEltYWdlTG9hZGVyO1xuIiwiZnVuY3Rpb24gSXRlbShtYXJrKSB7XG4gIHRoaXMubWFyayA9IG1hcms7XG59XG5cbnZhciBwcm90b3R5cGUgPSBJdGVtLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmhhc1Byb3BlcnR5U2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJvcHMgPSB0aGlzLm1hcmsuZGVmLnByb3BlcnRpZXM7XG4gIHJldHVybiBwcm9wcyAmJiBwcm9wc1tuYW1lXSAhPSBudWxsO1xufTtcblxucHJvdG90eXBlLmNvdXNpbiA9IGZ1bmN0aW9uKG9mZnNldCwgaW5kZXgpIHtcbiAgaWYgKG9mZnNldCA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAtMTtcbiAgdmFyIG1hcmsgPSB0aGlzLm1hcmssXG4gICAgICBncm91cCA9IG1hcmsuZ3JvdXAsXG4gICAgICBpaWR4ID0gaW5kZXg9PW51bGwgPyBtYXJrLml0ZW1zLmluZGV4T2YodGhpcykgOiBpbmRleCxcbiAgICAgIG1pZHggPSBncm91cC5pdGVtcy5pbmRleE9mKG1hcmspICsgb2Zmc2V0O1xuICByZXR1cm4gZ3JvdXAuaXRlbXNbbWlkeF0uaXRlbXNbaWlkeF07XG59O1xuXG5wcm90b3R5cGUuc2libGluZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xuICBpZiAob2Zmc2V0ID09PSAwKSByZXR1cm4gdGhpcztcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IC0xO1xuICB2YXIgbWFyayA9IHRoaXMubWFyayxcbiAgICAgIGlpZHggPSBtYXJrLml0ZW1zLmluZGV4T2YodGhpcykgKyBvZmZzZXQ7XG4gIHJldHVybiBtYXJrLml0ZW1zW2lpZHhdO1xufTtcblxucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbSA9IHRoaXMsXG4gICAgICBsaXN0ID0gaXRlbS5tYXJrLml0ZW1zLFxuICAgICAgaSA9IGxpc3QuaW5kZXhPZihpdGVtKTtcbiAgaWYgKGkgPj0gMCkge1xuICAgIGlmIChpPT09bGlzdC5sZW5ndGgtMSkge1xuICAgICAgbGlzdC5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtO1xufTtcblxucHJvdG90eXBlLnRvdWNoID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnBhdGhDYWNoZSkgdGhpcy5wYXRoQ2FjaGUgPSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJdGVtOyIsInZhciBCb3VuZHNDb250ZXh0ID0gcmVxdWlyZSgnLi9Cb3VuZHNDb250ZXh0JyksXG4gICAgQm91bmRzID0gcmVxdWlyZSgnLi9Cb3VuZHMnKSxcbiAgICBjYW52YXMgPSByZXF1aXJlKCcuL2NhbnZhcycpLFxuICAgIHN2ZyA9IHJlcXVpcmUoJy4vc3ZnJyksXG4gICAgdGV4dCA9IHJlcXVpcmUoJy4vdGV4dCcpLFxuICAgIHBhdGhzID0gcmVxdWlyZSgnLi4vcGF0aCcpLFxuICAgIHBhcnNlID0gcGF0aHMucGFyc2UsXG4gICAgZHJhd1BhdGggPSBwYXRocy5yZW5kZXIsXG4gICAgYXJlYVBhdGggPSBzdmcucGF0aC5hcmVhLFxuICAgIGxpbmVQYXRoID0gc3ZnLnBhdGgubGluZSxcbiAgICBoYWxmcGkgPSBNYXRoLlBJIC8gMixcbiAgICBzcXJ0MyA9IE1hdGguc3FydCgzKSxcbiAgICB0YW4zMCA9IE1hdGgudGFuKDMwICogTWF0aC5QSSAvIDE4MCksXG4gICAgZzJEID0gbnVsbCxcbiAgICBiYyA9IEJvdW5kc0NvbnRleHQoKTtcblxuZnVuY3Rpb24gY29udGV4dCgpIHtcbiAgcmV0dXJuIGcyRCB8fCAoZzJEID0gY2FudmFzLmluc3RhbmNlKDEsMSkuZ2V0Q29udGV4dCgnMmQnKSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZUJvdW5kcyhvLCBib3VuZHMpIHtcbiAgaWYgKG8uc3Ryb2tlICYmIG8ub3BhY2l0eSAhPT0gMCAmJiBvLnN0b2tlT3BhY2l0eSAhPT0gMCkge1xuICAgIGJvdW5kcy5leHBhbmQoby5zdHJva2VXaWR0aCAhPSBudWxsID8gby5zdHJva2VXaWR0aCA6IDEpO1xuICB9XG4gIHJldHVybiBib3VuZHM7XG59XG5cbmZ1bmN0aW9uIHBhdGhCb3VuZHMobywgcGF0aCwgYm91bmRzLCB4LCB5KSB7XG4gIGlmIChwYXRoID09IG51bGwpIHtcbiAgICBib3VuZHMuc2V0KDAsIDAsIDAsIDApO1xuICB9IGVsc2Uge1xuICAgIGRyYXdQYXRoKGJjLmJvdW5kcyhib3VuZHMpLCBwYXRoLCB4LCB5KTtcbiAgICBzdHJva2VCb3VuZHMobywgYm91bmRzKTtcbiAgfVxuICByZXR1cm4gYm91bmRzO1xufVxuXG5mdW5jdGlvbiBwYXRoKG8sIGJvdW5kcykge1xuICB2YXIgcCA9IG8ucGF0aCA/IG8ucGF0aENhY2hlIHx8IChvLnBhdGhDYWNoZSA9IHBhcnNlKG8ucGF0aCkpIDogbnVsbDtcbiAgcmV0dXJuIHBhdGhCb3VuZHMobywgcCwgYm91bmRzLCBvLngsIG8ueSk7XG59XG5cbmZ1bmN0aW9uIGFyZWEobWFyaywgYm91bmRzKSB7XG4gIGlmIChtYXJrLml0ZW1zLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGJvdW5kcztcbiAgdmFyIGl0ZW1zID0gbWFyay5pdGVtcyxcbiAgICAgIGl0ZW0gPSBpdGVtc1swXSxcbiAgICAgIHAgPSBpdGVtLnBhdGhDYWNoZSB8fCAoaXRlbS5wYXRoQ2FjaGUgPSBwYXJzZShhcmVhUGF0aChpdGVtcykpKTtcbiAgcmV0dXJuIHBhdGhCb3VuZHMoaXRlbSwgcCwgYm91bmRzKTtcbn1cblxuZnVuY3Rpb24gbGluZShtYXJrLCBib3VuZHMpIHtcbiAgaWYgKG1hcmsuaXRlbXMubGVuZ3RoID09PSAwKSByZXR1cm4gYm91bmRzO1xuICB2YXIgaXRlbXMgPSBtYXJrLml0ZW1zLFxuICAgICAgaXRlbSA9IGl0ZW1zWzBdLFxuICAgICAgcCA9IGl0ZW0ucGF0aENhY2hlIHx8IChpdGVtLnBhdGhDYWNoZSA9IHBhcnNlKGxpbmVQYXRoKGl0ZW1zKSkpO1xuICByZXR1cm4gcGF0aEJvdW5kcyhpdGVtLCBwLCBib3VuZHMpO1xufVxuXG5mdW5jdGlvbiByZWN0KG8sIGJvdW5kcykge1xuICB2YXIgeCwgeTtcbiAgcmV0dXJuIHN0cm9rZUJvdW5kcyhvLCBib3VuZHMuc2V0KFxuICAgIHggPSBvLnggfHwgMCxcbiAgICB5ID0gby55IHx8IDAsXG4gICAgKHggKyBvLndpZHRoKSB8fCAwLFxuICAgICh5ICsgby5oZWlnaHQpIHx8IDBcbiAgKSk7XG59XG5cbmZ1bmN0aW9uIGltYWdlKG8sIGJvdW5kcykge1xuICB2YXIgeCA9IG8ueCB8fCAwLFxuICAgICAgeSA9IG8ueSB8fCAwLFxuICAgICAgdyA9IG8ud2lkdGggfHwgMCxcbiAgICAgIGggPSBvLmhlaWdodCB8fCAwO1xuICB4ID0geCAtIChvLmFsaWduID09PSAnY2VudGVyJyA/IHcvMiA6IChvLmFsaWduID09PSAncmlnaHQnID8gdyA6IDApKTtcbiAgeSA9IHkgLSAoby5iYXNlbGluZSA9PT0gJ21pZGRsZScgPyBoLzIgOiAoby5iYXNlbGluZSA9PT0gJ2JvdHRvbScgPyBoIDogMCkpO1xuICByZXR1cm4gYm91bmRzLnNldCh4LCB5LCB4K3csIHkraCk7XG59XG5cbmZ1bmN0aW9uIHJ1bGUobywgYm91bmRzKSB7XG4gIHZhciB4MSwgeTE7XG4gIHJldHVybiBzdHJva2VCb3VuZHMobywgYm91bmRzLnNldChcbiAgICB4MSA9IG8ueCB8fCAwLFxuICAgIHkxID0gby55IHx8IDAsXG4gICAgby54MiAhPSBudWxsID8gby54MiA6IHgxLFxuICAgIG8ueTIgIT0gbnVsbCA/IG8ueTIgOiB5MVxuICApKTtcbn1cblxuZnVuY3Rpb24gYXJjKG8sIGJvdW5kcykge1xuICB2YXIgY3ggPSBvLnggfHwgMCxcbiAgICAgIGN5ID0gby55IHx8IDAsXG4gICAgICBpciA9IG8uaW5uZXJSYWRpdXMgfHwgMCxcbiAgICAgIG9yID0gby5vdXRlclJhZGl1cyB8fCAwLFxuICAgICAgc2EgPSAoby5zdGFydEFuZ2xlIHx8IDApIC0gaGFsZnBpLFxuICAgICAgZWEgPSAoby5lbmRBbmdsZSB8fCAwKSAtIGhhbGZwaSxcbiAgICAgIHhtaW4gPSBJbmZpbml0eSwgeG1heCA9IC1JbmZpbml0eSxcbiAgICAgIHltaW4gPSBJbmZpbml0eSwgeW1heCA9IC1JbmZpbml0eSxcbiAgICAgIGEsIGksIG4sIHgsIHksIGl4LCBpeSwgb3gsIG95O1xuXG4gIHZhciBhbmdsZXMgPSBbc2EsIGVhXSxcbiAgICAgIHMgPSBzYSAtIChzYSAlIGhhbGZwaSk7XG4gIGZvciAoaT0wOyBpPDQgJiYgczxlYTsgKytpLCBzKz1oYWxmcGkpIHtcbiAgICBhbmdsZXMucHVzaChzKTtcbiAgfVxuXG4gIGZvciAoaT0wLCBuPWFuZ2xlcy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgYSA9IGFuZ2xlc1tpXTtcbiAgICB4ID0gTWF0aC5jb3MoYSk7IGl4ID0gaXIqeDsgb3ggPSBvcip4O1xuICAgIHkgPSBNYXRoLnNpbihhKTsgaXkgPSBpcip5OyBveSA9IG9yKnk7XG4gICAgeG1pbiA9IE1hdGgubWluKHhtaW4sIGl4LCBveCk7XG4gICAgeG1heCA9IE1hdGgubWF4KHhtYXgsIGl4LCBveCk7XG4gICAgeW1pbiA9IE1hdGgubWluKHltaW4sIGl5LCBveSk7XG4gICAgeW1heCA9IE1hdGgubWF4KHltYXgsIGl5LCBveSk7XG4gIH1cblxuICByZXR1cm4gc3Ryb2tlQm91bmRzKG8sIGJvdW5kcy5zZXQoXG4gICAgY3ggKyB4bWluLFxuICAgIGN5ICsgeW1pbixcbiAgICBjeCArIHhtYXgsXG4gICAgY3kgKyB5bWF4XG4gICkpO1xufVxuXG5mdW5jdGlvbiBzeW1ib2wobywgYm91bmRzKSB7XG4gIHZhciBzaXplID0gby5zaXplICE9IG51bGwgPyBvLnNpemUgOiAxMDAsXG4gICAgICB4ID0gby54IHx8IDAsXG4gICAgICB5ID0gby55IHx8IDAsXG4gICAgICByLCB0LCByeCwgcnk7XG5cbiAgc3dpdGNoIChvLnNoYXBlKSB7XG4gICAgY2FzZSAnY3Jvc3MnOlxuICAgICAgdCA9IDMgKiBNYXRoLnNxcnQoc2l6ZSAvIDUpIC8gMjtcbiAgICAgIGJvdW5kcy5zZXQoeC10LCB5LXQsIHgrdCwgeSt0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZGlhbW9uZCc6XG4gICAgICByeSA9IE1hdGguc3FydChzaXplIC8gKDIgKiB0YW4zMCkpO1xuICAgICAgcnggPSByeSAqIHRhbjMwO1xuICAgICAgYm91bmRzLnNldCh4LXJ4LCB5LXJ5LCB4K3J4LCB5K3J5KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc3F1YXJlJzpcbiAgICAgIHQgPSBNYXRoLnNxcnQoc2l6ZSk7XG4gICAgICByID0gdCAvIDI7XG4gICAgICBib3VuZHMuc2V0KHgtciwgeS1yLCB4K3IsIHkrcik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RyaWFuZ2xlLWRvd24nOlxuICAgICAgcnggPSBNYXRoLnNxcnQoc2l6ZSAvIHNxcnQzKTtcbiAgICAgIHJ5ID0gcnggKiBzcXJ0MyAvIDI7XG4gICAgICBib3VuZHMuc2V0KHgtcngsIHktcnksIHgrcngsIHkrcnkpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0cmlhbmdsZS11cCc6XG4gICAgICByeCA9IE1hdGguc3FydChzaXplIC8gc3FydDMpO1xuICAgICAgcnkgPSByeCAqIHNxcnQzIC8gMjtcbiAgICAgIGJvdW5kcy5zZXQoeC1yeCwgeS1yeSwgeCtyeCwgeStyeSk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByID0gTWF0aC5zcXJ0KHNpemUvTWF0aC5QSSk7XG4gICAgICBib3VuZHMuc2V0KHgtciwgeS1yLCB4K3IsIHkrcik7XG4gIH1cblxuICByZXR1cm4gc3Ryb2tlQm91bmRzKG8sIGJvdW5kcyk7XG59XG5cbmZ1bmN0aW9uIHRleHRNYXJrKG8sIGJvdW5kcywgbm9Sb3RhdGUpIHtcbiAgdmFyIGcgPSBjb250ZXh0KCksXG4gICAgICBoID0gdGV4dC5zaXplKG8pLFxuICAgICAgYSA9IG8uYWxpZ24sXG4gICAgICByID0gby5yYWRpdXMgfHwgMCxcbiAgICAgIHggPSAoby54IHx8IDApLFxuICAgICAgeSA9IChvLnkgfHwgMCksXG4gICAgICBkeCA9IChvLmR4IHx8IDApLFxuICAgICAgZHkgPSAoby5keSB8fCAwKSArIHRleHQub2Zmc2V0KG8pIC0gTWF0aC5yb3VuZCgwLjgqaCksIC8vIHVzZSA0LzUgb2Zmc2V0XG4gICAgICB3LCB0O1xuXG4gIGlmIChyKSB7XG4gICAgdCA9IChvLnRoZXRhIHx8IDApIC0gTWF0aC5QSS8yO1xuICAgIHggKz0gciAqIE1hdGguY29zKHQpO1xuICAgIHkgKz0gciAqIE1hdGguc2luKHQpO1xuICB9XG5cbiAgLy8gaG9yaXpvbnRhbCBhbGlnbm1lbnRcbiAgZy5mb250ID0gdGV4dC5mb250KG8pO1xuICB3ID0gZy5tZWFzdXJlVGV4dCh0ZXh0LnZhbHVlKG8udGV4dCkpLndpZHRoO1xuICBpZiAoYSA9PT0gJ2NlbnRlcicpIHtcbiAgICBkeCAtPSAodyAvIDIpO1xuICB9IGVsc2UgaWYgKGEgPT09ICdyaWdodCcpIHtcbiAgICBkeCAtPSB3O1xuICB9IGVsc2Uge1xuICAgIC8vIGxlZnQgYnkgZGVmYXVsdCwgZG8gbm90aGluZ1xuICB9XG5cbiAgYm91bmRzLnNldChkeCs9eCwgZHkrPXksIGR4K3csIGR5K2gpO1xuICBpZiAoby5hbmdsZSAmJiAhbm9Sb3RhdGUpIHtcbiAgICBib3VuZHMucm90YXRlKG8uYW5nbGUqTWF0aC5QSS8xODAsIHgsIHkpO1xuICB9XG4gIHJldHVybiBib3VuZHMuZXhwYW5kKG5vUm90YXRlID8gMCA6IDEpO1xufVxuXG5mdW5jdGlvbiBncm91cChnLCBib3VuZHMsIGluY2x1ZGVMZWdlbmRzKSB7XG4gIHZhciBheGVzID0gZy5heGlzSXRlbXMgfHwgW10sXG4gICAgICBpdGVtcyA9IGcuaXRlbXMgfHwgW10sXG4gICAgICBsZWdlbmRzID0gZy5sZWdlbmRJdGVtcyB8fCBbXSxcbiAgICAgIGosIG07XG5cbiAgZm9yIChqPTAsIG09YXhlcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgYm91bmRzLnVuaW9uKGF4ZXNbal0uYm91bmRzKTtcbiAgfVxuICBmb3IgKGo9MCwgbT1pdGVtcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgYm91bmRzLnVuaW9uKGl0ZW1zW2pdLmJvdW5kcyk7XG4gIH1cbiAgaWYgKGluY2x1ZGVMZWdlbmRzKSB7XG4gICAgZm9yIChqPTAsIG09bGVnZW5kcy5sZW5ndGg7IGo8bTsgKytqKSB7XG4gICAgICBib3VuZHMudW5pb24obGVnZW5kc1tqXS5ib3VuZHMpO1xuICAgIH1cbiAgfVxuICBpZiAoZy53aWR0aCB8fCBnLmhlaWdodCkge1xuICAgIHN0cm9rZUJvdW5kcyhnLCBib3VuZHNcbiAgICAgIC5hZGQoMCwgMClcbiAgICAgIC5hZGQoZy53aWR0aCB8fCAwLCBnLmhlaWdodCB8fCAwKSk7XG4gIH1cbiAgcmV0dXJuIGJvdW5kcy50cmFuc2xhdGUoZy54IHx8IDAsIGcueSB8fCAwKTtcbn1cblxudmFyIG1ldGhvZHMgPSB7XG4gIGdyb3VwOiAgZ3JvdXAsXG4gIHN5bWJvbDogc3ltYm9sLFxuICBpbWFnZTogIGltYWdlLFxuICByZWN0OiAgIHJlY3QsXG4gIHJ1bGU6ICAgcnVsZSxcbiAgYXJjOiAgICBhcmMsXG4gIHRleHQ6ICAgdGV4dE1hcmssXG4gIHBhdGg6ICAgcGF0aCxcbiAgYXJlYTogICBhcmVhLFxuICBsaW5lOiAgIGxpbmVcbn07XG5tZXRob2RzLmFyZWEubmVzdCA9IHRydWU7XG5tZXRob2RzLmxpbmUubmVzdCA9IHRydWU7XG5cbmZ1bmN0aW9uIGl0ZW1Cb3VuZHMoaXRlbSwgZnVuYywgb3B0KSB7XG4gIHZhciB0eXBlID0gaXRlbS5tYXJrLm1hcmt0eXBlO1xuICBmdW5jID0gZnVuYyB8fCBtZXRob2RzW3R5cGVdO1xuICBpZiAoZnVuYy5uZXN0KSBpdGVtID0gaXRlbS5tYXJrO1xuXG4gIHZhciBjdXJyID0gaXRlbS5ib3VuZHMsXG4gICAgICBwcmV2ID0gaXRlbVsnYm91bmRzOnByZXYnXSB8fCAoaXRlbVsnYm91bmRzOnByZXYnXSA9IG5ldyBCb3VuZHMoKSk7XG5cbiAgaWYgKGN1cnIpIHtcbiAgICBwcmV2LmNsZWFyKCkudW5pb24oY3Vycik7XG4gICAgY3Vyci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIGl0ZW0uYm91bmRzID0gbmV3IEJvdW5kcygpO1xuICB9XG4gIGZ1bmMoaXRlbSwgaXRlbS5ib3VuZHMsIG9wdCk7XG4gIGlmICghY3VycikgcHJldi5jbGVhcigpLnVuaW9uKGl0ZW0uYm91bmRzKTtcbiAgcmV0dXJuIGl0ZW0uYm91bmRzO1xufVxuXG52YXIgRFVNTVlfSVRFTSA9IHttYXJrOiBudWxsfTtcblxuZnVuY3Rpb24gbWFya0JvdW5kcyhtYXJrLCBib3VuZHMsIG9wdCkge1xuICB2YXIgdHlwZSAgPSBtYXJrLm1hcmt0eXBlLFxuICAgICAgZnVuYyAgPSBtZXRob2RzW3R5cGVdLFxuICAgICAgaXRlbXMgPSBtYXJrLml0ZW1zLFxuICAgICAgaGFzaSAgPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGgsXG4gICAgICBpLCBuLCBvLCBiO1xuXG4gIGlmIChmdW5jLm5lc3QpIHtcbiAgICBvID0gaGFzaSA/IGl0ZW1zWzBdXG4gICAgICA6IChEVU1NWV9JVEVNLm1hcmsgPSBtYXJrLCBEVU1NWV9JVEVNKTsgLy8gbm8gaXRlbXMsIHNvIGZha2UgaXRcbiAgICBiID0gaXRlbUJvdW5kcyhvLCBmdW5jLCBvcHQpO1xuICAgIGJvdW5kcyA9IGJvdW5kcyAmJiBib3VuZHMudW5pb24oYikgfHwgYjtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG5cbiAgYm91bmRzID0gYm91bmRzIHx8IG1hcmsuYm91bmRzICYmIG1hcmsuYm91bmRzLmNsZWFyKCkgfHwgbmV3IEJvdW5kcygpO1xuICBpZiAoaGFzaSkgeyAgXG4gICAgZm9yIChpPTAsIG49aXRlbXMubGVuZ3RoOyBpPG47ICsraSkge1xuICAgICAgYm91bmRzLnVuaW9uKGl0ZW1Cb3VuZHMoaXRlbXNbaV0sIGZ1bmMsIG9wdCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKG1hcmsuYm91bmRzID0gYm91bmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1hcms6ICBtYXJrQm91bmRzLFxuICBpdGVtOiAgaXRlbUJvdW5kcyxcbiAgdGV4dDogIHRleHRNYXJrLFxuICBncm91cDogZ3JvdXBcbn07XG4iLCJmdW5jdGlvbiBpbnN0YW5jZSh3LCBoKSB7XG4gIHcgPSB3IHx8IDE7XG4gIGggPSBoIHx8IDE7XG4gIHZhciBjYW52YXM7XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCkge1xuICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IHc7XG4gICAgY2FudmFzLmhlaWdodCA9IGg7XG4gIH0gZWxzZSB7XG4gICAgdmFyIENhbnZhcyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydjYW52YXMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2NhbnZhcyddIDogbnVsbCk7XG4gICAgaWYgKCFDYW52YXMucHJvdG90eXBlKSByZXR1cm4gbnVsbDtcbiAgICBjYW52YXMgPSBuZXcgQ2FudmFzKHcsIGgpO1xuICB9XG4gIHJldHVybiBsaW5lRGFzaChjYW52YXMpO1xufVxuXG5mdW5jdGlvbiByZXNpemUoY2FudmFzLCB3LCBoLCBwLCByZXRpbmEpIHtcbiAgdmFyIGcgPSB0aGlzLl9jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSwgXG4gICAgICBzID0gMTtcblxuICBjYW52YXMud2lkdGggPSB3ICsgcC5sZWZ0ICsgcC5yaWdodDtcbiAgY2FudmFzLmhlaWdodCA9IGggKyBwLnRvcCArIHAuYm90dG9tO1xuXG4gIC8vIGlmIGJyb3dzZXIgY2FudmFzLCBhdHRlbXB0IHRvIG1vZGlmeSBmb3IgcmV0aW5hIGRpc3BsYXlcbiAgaWYgKHJldGluYSAmJiB0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICBjYW52YXMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudClcbiAge1xuICAgIGcucGl4ZWxyYXRpbyA9IChzID0gcGl4ZWxSYXRpbyhjYW52YXMpIHx8IDEpO1xuICB9XG5cbiAgZy5zZXRUcmFuc2Zvcm0ocywgMCwgMCwgcywgcypwLmxlZnQsIHMqcC50b3ApO1xuICByZXR1cm4gY2FudmFzO1xufVxuXG5mdW5jdGlvbiBwaXhlbFJhdGlvKGNhbnZhcykge1xuICB2YXIgZyA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIC8vIGdldCBjYW52YXMgcGl4ZWwgZGF0YVxuICB2YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdyAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxLFxuICAgICAgYmFja2luZ1N0b3JlUmF0aW8gPSAoXG4gICAgICAgIGcud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICBnLm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgZy5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgZy5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICBnLmJhY2tpbmdTdG9yZVBpeGVsUmF0aW8pIHx8IDEsXG4gICAgICByYXRpbyA9IGRldmljZVBpeGVsUmF0aW8gLyBiYWNraW5nU3RvcmVSYXRpbztcblxuICBpZiAoZGV2aWNlUGl4ZWxSYXRpbyAhPT0gYmFja2luZ1N0b3JlUmF0aW8pIHtcbiAgICAvLyBzZXQgYWN0dWFsIGFuZCB2aXNpYmxlIGNhbnZhcyBzaXplXG4gICAgdmFyIHcgPSBjYW52YXMud2lkdGgsXG4gICAgICAgIGggPSBjYW52YXMuaGVpZ2h0O1xuICAgIGNhbnZhcy53aWR0aCA9IHcgKiByYXRpbztcbiAgICBjYW52YXMuaGVpZ2h0ID0gaCAqIHJhdGlvO1xuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiByYXRpbztcbn1cblxuZnVuY3Rpb24gbGluZURhc2goY2FudmFzKSB7XG4gIHZhciBnID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGlmIChnLnZnTGluZURhc2gpIHJldHVybjsgLy8gYWxyZWFkeSBpbml0aWFsaXplZCFcblxuICB2YXIgTk9PUCA9IGZ1bmN0aW9uKCkge30sXG4gICAgICBOT0RBU0ggPSBbXTtcbiAgXG4gIGlmIChnLnNldExpbmVEYXNoKSB7XG4gICAgZy52Z0xpbmVEYXNoID0gZnVuY3Rpb24oZGFzaCkgeyB0aGlzLnNldExpbmVEYXNoKGRhc2ggfHwgTk9EQVNIKTsgfTtcbiAgICBnLnZnTGluZURhc2hPZmZzZXQgPSBmdW5jdGlvbihvZmYpIHsgdGhpcy5saW5lRGFzaE9mZnNldCA9IG9mZjsgfTtcbiAgfSBlbHNlIGlmIChnLndlYmtpdExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgXHRnLnZnTGluZURhc2ggPSBmdW5jdGlvbihkYXNoKSB7IHRoaXMud2Via2l0TGluZURhc2ggPSBkYXNoIHx8IE5PREFTSDsgfTtcbiAgICBnLnZnTGluZURhc2hPZmZzZXQgPSBmdW5jdGlvbihvZmYpIHsgdGhpcy53ZWJraXRMaW5lRGFzaE9mZnNldCA9IG9mZjsgfTtcbiAgfSBlbHNlIGlmIChnLm1vekRhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgIGcudmdMaW5lRGFzaCA9IGZ1bmN0aW9uKGRhc2gpIHsgdGhpcy5tb3pEYXNoID0gZGFzaDsgfTtcbiAgICBnLnZnTGluZURhc2hPZmZzZXQgPSBOT09QO1xuICB9IGVsc2Uge1xuICAgIGcudmdMaW5lRGFzaCA9IE5PT1A7XG4gICAgZy52Z0xpbmVEYXNoT2Zmc2V0ID0gTk9PUDtcbiAgfVxuICByZXR1cm4gY2FudmFzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5zdGFuY2U6ICAgaW5zdGFuY2UsXG4gIHJlc2l6ZTogICAgIHJlc2l6ZSxcbiAgbGluZURhc2g6ICAgbGluZURhc2hcbn07XG4iLCIvLyBjcmVhdGUgYSBuZXcgRE9NIGVsZW1lbnRcbmZ1bmN0aW9uIGNyZWF0ZShkb2MsIHRhZywgbnMpIHtcbiAgcmV0dXJuIG5zID8gZG9jLmNyZWF0ZUVsZW1lbnROUyhucywgdGFnKSA6IGRvYy5jcmVhdGVFbGVtZW50KHRhZyk7XG59XG5cbi8vIHJlbW92ZSBlbGVtZW50IGZyb20gRE9NXG4vLyByZWN1cnNpdmVseSByZW1vdmUgcGFyZW50IGVsZW1lbnRzIGlmIGVtcHR5XG5mdW5jdGlvbiByZW1vdmUoZWwpIHtcbiAgaWYgKCFlbCkgcmV0dXJuO1xuICB2YXIgcCA9IGVsLnBhcmVudE5vZGU7XG4gIGlmIChwKSB7XG4gICAgcC5yZW1vdmVDaGlsZChlbCk7XG4gICAgaWYgKCFwLmNoaWxkTm9kZXMgfHwgIXAuY2hpbGROb2Rlcy5sZW5ndGgpIHJlbW92ZShwKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gZmluZCBmaXJzdCBjaGlsZCBlbGVtZW50IHdpdGggbWF0Y2hpbmcgdGFnXG4gIGZpbmQ6IGZ1bmN0aW9uKGVsLCB0YWcpIHtcbiAgICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKHZhciBpPTAsIG49ZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgICBpZiAoZWwuY2hpbGROb2Rlc1tpXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZykge1xuICAgICAgICByZXR1cm4gZWwuY2hpbGROb2Rlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8vIHJldHJpZXZlIGNoaWxkIGVsZW1lbnQgYXQgZ2l2ZW4gaW5kZXhcbiAgLy8gY3JlYXRlICYgaW5zZXJ0IGlmIGRvZXNuJ3QgZXhpc3Qgb3IgaWYgdGFnL2NsYXNzTmFtZSBkbyBub3QgbWF0Y2hcbiAgY2hpbGQ6IGZ1bmN0aW9uKGVsLCBpbmRleCwgdGFnLCBucywgY2xhc3NOYW1lLCBpbnNlcnQpIHtcbiAgICB2YXIgYSwgYjtcbiAgICBhID0gYiA9IGVsLmNoaWxkTm9kZXNbaW5kZXhdO1xuICAgIGlmICghYSB8fCBpbnNlcnQgfHxcbiAgICAgICAgYS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IHRhZy50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgIGNsYXNzTmFtZSAmJiBhLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSAhPSBjbGFzc05hbWUpIHtcbiAgICAgIGEgPSBjcmVhdGUoZWwub3duZXJEb2N1bWVudCwgdGFnLCBucyk7XG4gICAgICBlbC5pbnNlcnRCZWZvcmUoYSwgYik7XG4gICAgICBpZiAoY2xhc3NOYW1lKSBhLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfSxcbiAgLy8gcmVtb3ZlIGFsbCBjaGlsZCBlbGVtZW50cyBhdCBvciBhYm92ZSB0aGUgZ2l2ZW4gaW5kZXhcbiAgY2xlYXI6IGZ1bmN0aW9uKGVsLCBpbmRleCkge1xuICAgIHZhciBjdXJyID0gZWwuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGN1cnIgPiBpbmRleCkge1xuICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuY2hpbGROb2Rlc1stLWN1cnJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9LFxuICByZW1vdmU6IHJlbW92ZSxcbiAgLy8gZ2VuZXJhdGUgY3NzIGNsYXNzIG5hbWUgZm9yIG1hcmtcbiAgY3NzQ2xhc3M6IGZ1bmN0aW9uKG1hcmspIHtcbiAgICByZXR1cm4gJ21hcmstJyArIG1hcmsubWFya3R5cGUgKyAobWFyay5uYW1lID8gJyAnK21hcmsubmFtZSA6ICcnKTtcbiAgfSxcbiAgLy8gZ2VuZXJhdGUgc3RyaW5nIGZvciBhbiBvcGVuaW5nIHhtbCB0YWdcbiAgLy8gdGFnOiB0aGUgbmFtZSBvZiB0aGUgeG1sIHRhZ1xuICAvLyBhdHRyOiBoYXNoIG9mIGF0dHJpYnV0ZSBuYW1lLXZhbHVlIHBhaXJzIHRvIGluY2x1ZGVcbiAgLy8gcmF3OiBhZGRpdGlvbmFsIHJhdyBzdHJpbmcgdG8gaW5jbHVkZSBpbiB0YWcgbWFya3VwXG4gIG9wZW5UYWc6IGZ1bmN0aW9uKHRhZywgYXR0ciwgcmF3KSB7XG4gICAgdmFyIHMgPSAnPCcgKyB0YWcsIGtleSwgdmFsO1xuICAgIGlmIChhdHRyKSB7XG4gICAgICBmb3IgKGtleSBpbiBhdHRyKSB7XG4gICAgICAgIHZhbCA9IGF0dHJba2V5XTtcbiAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgcyArPSAnICcgKyBrZXkgKyAnPVwiJyArIHZhbCArICdcIic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJhdykgcyArPSAnICcgKyByYXc7XG4gICAgcmV0dXJuIHMgKyAnPic7XG4gIH0sXG4gIC8vIGdlbmVyYXRlIHN0cmluZyBmb3IgY2xvc2luZyB4bWwgdGFnXG4gIC8vIHRhZzogdGhlIG5hbWUgb2YgdGhlIHhtbCB0YWdcbiAgY2xvc2VUYWc6IGZ1bmN0aW9uKHRhZykge1xuICAgIHJldHVybiAnPC8nICsgdGFnICsgJz4nO1xuICB9XG59O1xuIiwidmFyIGJvdW5kID0gcmVxdWlyZSgnLi4vdXRpbC9ib3VuZCcpO1xuXG52YXIgc2V0cyA9IFtcbiAgJ2l0ZW1zJyxcbiAgJ2F4aXNJdGVtcycsXG4gICdsZWdlbmRJdGVtcydcbl07XG5cbnZhciBrZXlzID0gW1xuICAnbWFya3R5cGUnLCAnbmFtZScsICdpbnRlcmFjdGl2ZScsICdjbGlwJyxcbiAgJ2l0ZW1zJywgJ2F4aXNJdGVtcycsICdsZWdlbmRJdGVtcycsICdsYXllcicsXG4gICd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2FsaWduJywgJ2Jhc2VsaW5lJywgICAgICAgICAgICAgLy8gbGF5b3V0XG4gICdmaWxsJywgJ2ZpbGxPcGFjaXR5JywgJ29wYWNpdHknLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlsbFxuICAnc3Ryb2tlJywgJ3N0cm9rZU9wYWNpdHknLCAnc3Ryb2tlV2lkdGgnLCAnc3Ryb2tlQ2FwJywgICAgICAgIC8vIHN0cm9rZVxuICAnc3Ryb2tlRGFzaCcsICdzdHJva2VEYXNoT2Zmc2V0JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0cm9rZSBkYXNoXG4gICdzdGFydEFuZ2xlJywgJ2VuZEFuZ2xlJywgJ2lubmVyUmFkaXVzJywgJ291dGVyUmFkaXVzJywgICAgICAgLy8gYXJjXG4gICdpbnRlcnBvbGF0ZScsICd0ZW5zaW9uJywgJ29yaWVudCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlYSwgbGluZVxuICAndXJsJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGltYWdlXG4gICdwYXRoJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGF0aFxuICAneDInLCAneTInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJ1bGVcbiAgJ3NpemUnLCAnc2hhcGUnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzeW1ib2xcbiAgJ3RleHQnLCAnYW5nbGUnLCAndGhldGEnLCAncmFkaXVzJywgJ2R4JywgJ2R5JywgICAgICAgICAgICAgICAvLyB0ZXh0XG4gICdmb250JywgJ2ZvbnRTaXplJywgJ2ZvbnRXZWlnaHQnLCAnZm9udFN0eWxlJywgJ2ZvbnRWYXJpYW50JyAgLy8gZm9udFxuXTtcblxuZnVuY3Rpb24gdG9KU09OKHNjZW5lLCBpbmRlbnQpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHNjZW5lLCBrZXlzLCBpbmRlbnQpO1xufVxuXG5mdW5jdGlvbiBmcm9tSlNPTihqc29uKSB7XG4gIHZhciBzY2VuZSA9ICh0eXBlb2YganNvbiA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGpzb24pIDoganNvbik7XG4gIHJldHVybiBpbml0aWFsaXplKHNjZW5lKTtcbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZShzY2VuZSkge1xuICB2YXIgdHlwZSA9IHNjZW5lLm1hcmt0eXBlLFxuICAgICAgaSwgbiwgcywgbSwgaXRlbXM7XG5cbiAgZm9yIChzPTAsIG09c2V0cy5sZW5ndGg7IHM8bTsgKytzKSB7XG4gICAgaWYgKChpdGVtcyA9IHNjZW5lW3NldHNbc11dKSkge1xuICAgICAgZm9yIChpPTAsIG49aXRlbXMubGVuZ3RoOyBpPG47ICsraSkge1xuICAgICAgICBpdGVtc1tpXVt0eXBlID8gJ21hcmsnIDogJ2dyb3VwJ10gPSBzY2VuZTtcbiAgICAgICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09ICdncm91cCcpIHtcbiAgICAgICAgICBpbml0aWFsaXplKGl0ZW1zW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlKSBib3VuZC5tYXJrKHNjZW5lKTtcbiAgcmV0dXJuIHNjZW5lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9KU09OOiAgIHRvSlNPTixcbiAgZnJvbUpTT046IGZyb21KU09OXG59OyIsInZhciBkM19zdmcgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snZDMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2QzJ10gOiBudWxsKS5zdmc7XG5cbmZ1bmN0aW9uIHgobykgICAgIHsgcmV0dXJuIG8ueCB8fCAwOyB9XG5mdW5jdGlvbiB5KG8pICAgICB7IHJldHVybiBvLnkgfHwgMDsgfVxuZnVuY3Rpb24geHcobykgICAgeyByZXR1cm4gKG8ueCB8fCAwKSArIChvLndpZHRoIHx8IDApOyB9XG5mdW5jdGlvbiB5aChvKSAgICB7IHJldHVybiAoby55IHx8IDApICsgKG8uaGVpZ2h0IHx8IDApOyB9XG5mdW5jdGlvbiBzaXplKG8pICB7IHJldHVybiBvLnNpemUgPT0gbnVsbCA/IDEwMCA6IG8uc2l6ZTsgfVxuZnVuY3Rpb24gc2hhcGUobykgeyByZXR1cm4gby5zaGFwZSB8fCAnY2lyY2xlJzsgfVxuXG52YXIgYXJlYXYgPSBkM19zdmcuYXJlYSgpLngoeCkueTEoeSkueTAoeWgpLFxuICAgIGFyZWFoID0gZDNfc3ZnLmFyZWEoKS55KHkpLngxKHgpLngwKHh3KSxcbiAgICBsaW5lICA9IGQzX3N2Zy5saW5lKCkueCh4KS55KHkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWV0YWRhdGE6IHtcbiAgICAndmVyc2lvbic6ICcxLjEnLFxuICAgICd4bWxucyc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgJ3htbG5zOnhsaW5rJzogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gIH0sXG4gIHBhdGg6IHtcbiAgICBhcmM6IGQzX3N2Zy5hcmMoKSxcbiAgICBzeW1ib2w6IGQzX3N2Zy5zeW1ib2woKS50eXBlKHNoYXBlKS5zaXplKHNpemUpLFxuICAgIGFyZWE6IGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgICB2YXIgbyA9IGl0ZW1zWzBdO1xuICAgICAgcmV0dXJuIChvLm9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gYXJlYWggOiBhcmVhdilcbiAgICAgICAgLmludGVycG9sYXRlKG8uaW50ZXJwb2xhdGUgfHwgJ2xpbmVhcicpXG4gICAgICAgIC50ZW5zaW9uKG8udGVuc2lvbiB8fCAwLjcpXG4gICAgICAgIChpdGVtcyk7XG4gICAgfSxcbiAgICBsaW5lOiBmdW5jdGlvbihpdGVtcykge1xuICAgICAgdmFyIG8gPSBpdGVtc1swXTtcbiAgICAgIHJldHVybiBsaW5lXG4gICAgICAgIC5pbnRlcnBvbGF0ZShvLmludGVycG9sYXRlIHx8ICdsaW5lYXInKVxuICAgICAgICAudGVuc2lvbihvLnRlbnNpb24gfHwgMC43KVxuICAgICAgICAoaXRlbXMpO1xuICAgIH1cbiAgfSxcbiAgdGV4dEFsaWduOiB7XG4gICAgJ2xlZnQnOiAgICdzdGFydCcsXG4gICAgJ2NlbnRlcic6ICdtaWRkbGUnLFxuICAgICdyaWdodCc6ICAnZW5kJ1xuICB9LFxuICB0ZXh0QmFzZWxpbmU6IHtcbiAgICAndG9wJzogICAgJ2JlZm9yZS1lZGdlJyxcbiAgICAnYm90dG9tJzogJ2FmdGVyLWVkZ2UnLFxuICAgICdtaWRkbGUnOiAnY2VudHJhbCdcbiAgfSxcbiAgc3R5bGVzOiB7XG4gICAgJ2ZpbGwnOiAgICAgICAgICAgICAnZmlsbCcsXG4gICAgJ2ZpbGxPcGFjaXR5JzogICAgICAnZmlsbC1vcGFjaXR5JyxcbiAgICAnc3Ryb2tlJzogICAgICAgICAgICdzdHJva2UnLFxuICAgICdzdHJva2VXaWR0aCc6ICAgICAgJ3N0cm9rZS13aWR0aCcsXG4gICAgJ3N0cm9rZU9wYWNpdHknOiAgICAnc3Ryb2tlLW9wYWNpdHknLFxuICAgICdzdHJva2VDYXAnOiAgICAgICAgJ3N0cm9rZS1saW5lY2FwJyxcbiAgICAnc3Ryb2tlRGFzaCc6ICAgICAgICdzdHJva2UtZGFzaGFycmF5JyxcbiAgICAnc3Ryb2tlRGFzaE9mZnNldCc6ICdzdHJva2UtZGFzaG9mZnNldCcsXG4gICAgJ29wYWNpdHknOiAgICAgICAgICAnb3BhY2l0eSdcbiAgfSxcbiAgc3R5bGVQcm9wZXJ0aWVzOiBbXG4gICAgJ2ZpbGwnLFxuICAgICdmaWxsT3BhY2l0eScsXG4gICAgJ3N0cm9rZScsXG4gICAgJ3N0cm9rZVdpZHRoJyxcbiAgICAnc3Ryb2tlT3BhY2l0eScsXG4gICAgJ3N0cm9rZUNhcCcsXG4gICAgJ3N0cm9rZURhc2gnLFxuICAgICdzdHJva2VEYXNoT2Zmc2V0JyxcbiAgICAnb3BhY2l0eSdcbiAgXVxufTtcbiIsImZ1bmN0aW9uIHNpemUoaXRlbSkge1xuICByZXR1cm4gaXRlbS5mb250U2l6ZSAhPSBudWxsID8gaXRlbS5mb250U2l6ZSA6IDExO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2l6ZTogc2l6ZSxcbiAgdmFsdWU6IGZ1bmN0aW9uKHMpIHtcbiAgICByZXR1cm4gcyAhPSBudWxsID8gU3RyaW5nKHMpIDogJyc7XG4gIH0sXG4gIGZvbnQ6IGZ1bmN0aW9uKGl0ZW0sIHF1b3RlKSB7XG4gICAgdmFyIGZvbnQgPSBpdGVtLmZvbnQ7XG4gICAgaWYgKHF1b3RlICYmIGZvbnQpIHtcbiAgICAgIGZvbnQgPSBTdHJpbmcoZm9udCkucmVwbGFjZSgvXFxcIi9nLCAnXFwnJyk7XG4gICAgfVxuICAgIHJldHVybiAnJyArXG4gICAgICAoaXRlbS5mb250U3R5bGUgPyBpdGVtLmZvbnRTdHlsZSArICcgJyA6ICcnKSArXG4gICAgICAoaXRlbS5mb250VmFyaWFudCA/IGl0ZW0uZm9udFZhcmlhbnQgKyAnICcgOiAnJykgK1xuICAgICAgKGl0ZW0uZm9udFdlaWdodCA/IGl0ZW0uZm9udFdlaWdodCArICcgJyA6ICcnKSArXG4gICAgICBzaXplKGl0ZW0pICsgJ3B4ICcgK1xuICAgICAgKGZvbnQgfHwgJ3NhbnMtc2VyaWYnKTtcbiAgfSxcbiAgb2Zmc2V0OiBmdW5jdGlvbihpdGVtKSB7XG4gICAgLy8gcGVyZm9ybSBvdXIgb3duIGZvbnQgYmFzZWxpbmUgY2FsY3VsYXRpb25cbiAgICAvLyB3aHk/IG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBTVkcgMS4xICdhbGlnbm1lbnQtYmFzZWxpbmUnIDooXG4gICAgdmFyIGJhc2VsaW5lID0gaXRlbS5iYXNlbGluZSxcbiAgICAgICAgaCA9IHNpemUoaXRlbSk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoXG4gICAgICBiYXNlbGluZSA9PT0gJ3RvcCcgICAgPyAgMC45MypoIDpcbiAgICAgIGJhc2VsaW5lID09PSAnbWlkZGxlJyA/ICAwLjMwKmggOlxuICAgICAgYmFzZWxpbmUgPT09ICdib3R0b20nID8gLTAuMjEqaCA6IDBcbiAgICApO1xuICB9XG59O1xuIl19
