{
  "name": "vega-scenegraph",
  "version": "1.0.12",
  "description": "Vega scenegraph and renderers.",
  "repository": {
    "type": "git",
    "url": "http://github.com/vega/vega-scenegraph.git"
  },
  "author": {
    "name": "Jeffrey Heer",
    "url": "http://idl.cs.washington.edu"
  },
  "license": "BSD-3-Clause",
  "dependencies": {
    "d3": "^3.5.6",
    "datalib": "^1.4.6",
    "canvas": "^1.2.9"
  },
  "optionalDependencies": {
    "canvas": "^1.2.9"
  },
  "devDependencies": {
    "browserify": "^10.2.6",
    "browserify-shim": "^3.8.9",
    "browserify-versionify": "^1.0.4",
    "chai": "^3.0.0",
    "istanbul": "latest",
    "jsdom": "^3.0.0",
    "jshint": "^2.8.0",
    "mocha": "^2.2.5",
    "tv4": "^1.1.12",
    "uglify-js": "^2.4.24",
    "watchify": "^3.2.3"
  },
  "main": "src/index.js",
  "scripts": {
    "lint": "jshint src/",
    "test": "npm run schema && mocha --timeout 5000 --recursive test/",
    "cover": "npm run schema && istanbul cover _mocha -- --timeout 5000 --recursive test/",
    "build": "browserify src/index.js -d -s vg.scene -o vega-scenegraph.js",
    "postbuild": "uglifyjs vega-scenegraph.js -cm > vega-scenegraph.min.js",
    "schema": "node scripts/schema.js > vega-scenegraph-schema.json",
    "watch": "watchify src/index.js -v -d -s vg.scene -o vega-scenegraph.js"
  },
  "browserify": {
    "transform": [
      "browserify-shim"
    ]
  },
  "browserify-shim": {
    "d3": "global:d3",
    "canvas": "global:canvas"
  },
  "readme": "# vega-scenegraph\n\n[Vega](http://gihub.com/vega/vega) scenegraph and renderers.\n\nRenderers and event handlers for Vega's [mark-based](https://github.com/vega/vega/wiki/Marks) scenegraph. This module supports both pixel-based (canvas) and vector graphics (SVG) output. Renderers can either (re-)draw a complete scene or perform incremental re-rendering for a set of provided \"dirty\" items. A fast SVG string renderer is also provided to generate static SVG outside the browser environment.\n\nThe [node-canvas](https://github.com/Automattic/node-canvas) library is used for server-side canvas rendering and bounds calculation. Node-canvas requires the native Cairo graphics library and compiles native code as part of the installation process. In some instances this may result in installation hiccups. Should you run into issues, you are likely to resolve them more quickly if you first search for help regarding node-canvas (as opposed to vega-scenegraph) installation.\n\n### Scenegraph Definition\n\nThe Vega scenegraph is a hierarchical (tree) data structure. The levels of the tree alternate between an enclosing _mark_ definition and contained sets of mark instances called _items_.\n\nFor example, here is a simple scenegraph containing three rectangles:\n```\n{\n  \"marktype\": \"rect\",\n  \"items\": [\n    {\"x\": 0, \"y\": 0, \"width\": 50, \"height\": 50, \"fill\": \"steelblue\"},\n    {\"x\": 100, \"y\": 50, \"width\": 50, \"height\": 50, \"fill\": \"firebrick\"},\n    {\"x\": 50, \"y\": 100, \"width\": 50, \"height\": 50, \"fill\": \"forestgreen\"}\n  ]\n}\n```\n\nThe supported mark types are rectangles (`rect`), plotting symbols (`symbol`), general paths or polygons (`path`), circular arcs (`arc`), filled areas (`area`), lines (`line`), images (`image`), text labels (`text`), and chart gridlines or rules (`rule`). Each item has a set of supported properties (`x`, `y`, `width`, `fill`, and so on) appropriate to the mark type.\n\nScenegraphs may also contain `group` marks, which serve as containers for other marks. Groups may also include specialized subsets for axes and legends.\n\nFor example, a top-level group mark may look like:\n```\n{\n  \"marktype\": \"group\",\n  \"items\": [\n    {\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": 200,\n      \"height\": 200,\n      \"items\": [...], // array of contained mark instances\n      \"axisItems\": [...], // special array for axis groups\n      \"legendItems\": [...] // special array for legend groups\n    }\n  ]\n}\n```\n\nIn this example, the group _mark_ contains only a single group _item_. In practice a group mark may contain any number of group items, for example to describe a scene with multiple layers or sub-plots.\n\nFor more information regarding supported mark properties, please see the [Vega marks documentation](https://github.com/vega/vega/wiki/Marks).\n\n### Scenegraph Serialization\n\nThe top-level export of this package includes `fromJSON` and `toJSON` methods to support scenegraph serialization. The `fromJSON` method expects a JSON string as input (similar to the examples listed above). It will then add additional parent pointers to the tree structure. For example, each item will have a `mark` property pointing to it's parent mark, and each mark will have a `group` property pointing to it's parent group (if any). The `toJSON` method maps a scenegraph instance to a JSON string, stripping any parent pointers or other non-standard properties.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vega/vega-scenegraph/issues"
  },
  "homepage": "https://github.com/vega/vega-scenegraph",
  "_id": "vega-scenegraph@1.0.12",
  "_from": "vega-scenegraph@^1.0.10"
}
