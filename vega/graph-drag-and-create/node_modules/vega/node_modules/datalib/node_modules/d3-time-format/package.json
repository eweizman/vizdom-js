{
  "name": "d3-time-format",
  "version": "0.1.1",
  "description": "A JavaScript time formatter and parser inspired by strftime and strptime.",
  "keywords": [
    "d3",
    "time",
    "format",
    "strftime",
    "strptime"
  ],
  "homepage": "https://github.com/d3/d3-time-format",
  "license": "BSD-3-Clause",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "main": "build/timeFormat",
  "jsnext:main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/d3/d3-time-format.git"
  },
  "scripts": {
    "pretest": "mkdir -p build && d3-bundler --polyfill-map --format=umd --name=timeFormat -- index.js > build/timeFormat.js",
    "test": "TZ=America/Los_Angeles faucet `find test -name '*-test.js'`",
    "prepublish": "npm run test && uglifyjs build/timeFormat.js -c -m -o build/timeFormat.min.js && rm -f build/timeFormat.zip && zip -j build/timeFormat.zip -- LICENSE README.md build/timeFormat.js build/timeFormat.min.js"
  },
  "devDependencies": {
    "d3-bundler": "~0.2.5",
    "d3-time": "~0.0.2",
    "faucet": "0.0",
    "tape": "4",
    "uglify-js": "2"
  },
  "readme": "# d3-time-format\n\nThis module provides a JavaScript implementation of the venerable [strptime](http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html) and [strftime](http://pubs.opengroup.org/onlinepubs/007908799/xsh/strftime.html) functions from the C standard library, and can be used to parse or format [dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) in a variety of locale-specific representations. To format a date, create a [*format* function](#_format) from a [format specifier](#locale_format) (a string with the desired format *directives*, indicated by `%`); then pass a date to the format function, which returns a string. For example, to convert the current date to a human-readable string:\n\n```js\nvar f = format(\"%B %d, %Y\");\nf(new Date); // \"June 30, 2015\"\n```\n\nFormat functions also support parsing as [*format*.parse](#format_parse), so to convert a string back to a date:\n\n```js\nvar f = format(\"%B %d, %Y\");\nf.parse(\"June 30, 2015\"); // Tue Jun 30 2015 00:00:00 GMT-0700 (PDT)\n```\n\nYou can implement more elaborate conditional time formats, too. For example, here’s a [multi-scale time format](http://bl.ocks.org/mbostock/4149176) using [time intervals](https://github.com/d3/d3-time):\n\n```js\nvar formatMillisecond = format(\".%L\"),\n    formatSecond = format(\":%S\"),\n    formatMinute = format(\"%I:%M\"),\n    formatHour = format(\"%I %p\"),\n    formatDay = format(\"%a %d\"),\n    formatWeek = format(\"%b %d\"),\n    formatMonth = format(\"%B\"),\n    formatYear = format(\"%Y\");\n\nfunction multiFormat(date) {\n  return (second(date) < date ? formatMillisecond\n      : minute(date) < date ? formatSecond\n      : hour(date) < date ? formatMinute\n      : day(date) < date ? formatHour\n      : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n      : year(date) < date ? formatMonth\n      : formatYear)(date);\n}\n```\n\nThis format is used by D3’s time scale to generate human-readable ticks.\n\n## Installing\n\nIf you use NPM, `npm install d3-time-format`. Otherwise, download the [latest release](https://github.com/d3/d3-time-format/releases/latest).\n\n## API Reference\n\n<a name=\"format\" href=\"#format\">#</a> <b>format</b>(<i>specifier</i>)\n\nAn alias for [*locale*.format](#locale_format) on the default [U.S. English](https://github.com/d3/d3-time-format/tree/master/src/locale/en-US.js) locale. Use [localeFormat](#localeFormat) for a different built-in locale or to define a new locale.\n\n<a name=\"utcFormat\" href=\"#utcFormat\">#</a> <b>utcFormat</b>(<i>specifier</i>)\n\nAn alias for [*locale*.utcFormat](#locale_utcFormat) on the default [U.S. English](https://github.com/d3/d3-time-format/tree/master/src/locale/en-US.js) locale. Use [localeFormat](#localeFormat) for a different built-in locale or to define a new locale.\n\n<a name=\"isoFormat\" href=\"#isoFormat\">#</a> <b>isoFormat</b>\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time [*format* function](#_format). Where available, this method will use [Date.toISOString](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString) to format and the [Date constructor](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) to parse strings. If you depend on strict validation of the input format according to ISO 8601, you should construct a [UTC format](#utcFormat):\n\n```js\nvar isoFormat = utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n```\n\n<a name=\"locale_format\" href=\"#locale_format\">#</a> <i>locale</i>.<b>format</b>(<i>specifier</i>)\n\nReturns a new [*format* function](#_format) for the given string *specifier*. The specifier string may contain the following directives:\n\n* `%a` - abbreviated weekday name.*\n* `%A` - full weekday name.*\n* `%b` - abbreviated month name.*\n* `%B` - full month name.*\n* `%c` - the locale’s date and time, such as `%a %b %e %H:%M:%S %Y`.*\n* `%d` - zero-padded day of the month as a decimal number [01,31].\n* `%e` - space-padded day of the month as a decimal number [ 1,31]; equivalent to `%_d`.\n* `%H` - hour (24-hour clock) as a decimal number [00,23].\n* `%I` - hour (12-hour clock) as a decimal number [01,12].\n* `%j` - day of the year as a decimal number [001,366].\n* `%m` - month as a decimal number [01,12].\n* `%M` - minute as a decimal number [00,59].\n* `%L` - milliseconds as a decimal number [000, 999].\n* `%p` - either AM or PM.*\n* `%S` - second as a decimal number [00,61].\n* `%U` - Sunday-based week of the year as a decimal number [00,53].\n* `%w` - Sunday-based weekday as a decimal number [0,6].\n* `%W` - Monday-based week of the year as a decimal number [00,53].\n* `%x` - the locale’s date, such as `%m/%d/%Y`.*\n* `%X` - the locale’s time, such as `%H:%M:%S`.*\n* `%y` - year without century as a decimal number [00,99].\n* `%Y` - year with century as a decimal number.\n* `%Z` - time zone offset, such as `-0700`.\n* `%%` - a literal percent sign (`%`).\n\nDirectives marked with an asterisk (*) may be affected by the [locale definition](#localeFormat). For `%U`, all days in a new year preceding the first Sunday are considered to be in week 0. For `%W`, all days in a new year preceding the first Monday are considered to be in week 0. Week numbers are computed using [*interval*.count](https://github.com/d3/d3-time#interval_count).\n\nThe `%` sign indicating a directive may be immediately followed by a padding modifier:\n\n* `0` - zero-padding\n* `_` - space-padding\n* `-` - disable padding\n\nIf no padding modifier is specified, the default is `0` for all directives except `%e`, which defaults to `_`. (In some implementations of strftime and strptime, a directive may include an optional field width or precision; this feature is not yet implemented.)\n\n<a name=\"locale_utcFormat\" href=\"#locale_utcFormat\">#</a> <i>locale</i>.<b>utcFormat</b>(<i>specifier</i>)\n\nEquivalent to [*locale*.format](#locale_format), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n<a name=\"_format\" href=\"#_format\">#</a> <i>format</i>(<i>date</i>)\n\nFormats the specified *[date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)*, returning the corresponding string.\n\n```javascript\nvar formatMonth = format(\"%B\"),\n    formatDay = format(\"%A\"),\n    date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)\n\nformatMonth(date); // \"May\"\nformatDay(date); // \"Thursday\"\n```\n\n<a name=\"format_parse\" href=\"#format_parse\">#</a> <i>format</i>.<b>parse</b>(<i>string</i>)\n\nParses the specified *string*, returning the corresponding [date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) or null if the string could not be parsed according to this format’s specifier.\n\nParsing is strict: if the specified <i>string</i> does not exactly match the associated specifier, this method returns null. For example, if the associated specifier is `%Y-%m-%dT%H:%M:%SZ`, then the string `\"2011-07-01T19:15:28Z\"` will be parsed as expected, but `\"2011-07-01T19:15:28\"`, `\"2011-07-01 19:15:28\"` and `\"2011-07-01\"` will return null. (Note that the literal `Z` here is different from the time zone offset directive `%Z`.) If a more flexible parser is desired, try multiple formats sequentially until one returns non-null.\n\nThe `%d` and `%e` directives are considered equivalent for parsing.\n\n<a name=\"format_toString\" href=\"#format_toString\">#</a> <i>format</i>.<b>toString</b>()\n\nReturns this format’s specifier.\n\n<a name=\"localeFormat\" href=\"#localeFormat\">#</a> <b>localeFormat</b>(<i>definition</i>)\n\nReturns a *locale* object for the specified *definition* with [*locale*.format](#locale_format) and [*locale*.utcFormat](#locale_utcFormat) methods. If *definition* is a string, it is the name of a built-in locale:\n\n* `\"ca-ES\"` - [Catalan (Spain)](https://github.com/d3/d3-time-format/tree/master/src/locale/ca-ES.js)\n* `\"de-DE\"` - [German (Germany)](https://github.com/d3/d3-time-format/tree/master/src/locale/de-DE.js)\n* `\"en-CA\"` - [English (Canada)](https://github.com/d3/d3-time-format/tree/master/src/locale/en-CA.js)\n* `\"en-GB\"` - [English (United Kingdom)](https://github.com/d3/d3-time-format/tree/master/src/locale/en-GB.js)\n* `\"en-US\"` - [English (United States)](https://github.com/d3/d3-time-format/tree/master/src/locale/en-US.js)\n* `\"es-ES\"` - [Spanish (Spain)](https://github.com/d3/d3-time-format/tree/master/src/locale/es-ES.js)\n* `\"fi-FI\"` - [Finnish (Finland)](https://github.com/d3/d3-time-format/tree/master/src/locale/fi-FI.js)\n* `\"fr-CA\"` - [French (Canada)](https://github.com/d3/d3-time-format/tree/master/src/locale/fr-CA.js)\n* `\"fr-FR\"` - [French (France)](https://github.com/d3/d3-time-format/tree/master/src/locale/fr-FR.js)\n* `\"he-IL\"` - [Hebrew (Israel)](https://github.com/d3/d3-time-format/tree/master/src/locale/he-IL.js)\n* `\"it-IT\"` - [Italian (Italy)](https://github.com/d3/d3-time-format/tree/master/src/locale/it-IT.js)\n* `\"mk-MK\"` - [Macedonian (Macedonia)](https://github.com/d3/d3-time-format/tree/master/src/locale/mk-MK.js)\n* `\"nl-NL\"` - [Dutch (Netherlands)](https://github.com/d3/d3-time-format/tree/master/src/locale/nl-NL.js)\n* `\"pl-PL\"` - [Polish (Poland)](https://github.com/d3/d3-time-format/tree/master/src/locale/pl-PL.js)\n* `\"pt-BR\"` - [Portuguese (Brazil)](https://github.com/d3/d3-time-format/tree/master/src/locale/pt-BR.js)\n* `\"ru-RU\"` - [Russian (Russia)](https://github.com/d3/d3-time-format/tree/master/src/locale/ru-RU.js)\n* `\"zh-CN\"` - [Chinese (China)](https://github.com/d3/d3-time-format/tree/master/src/locale/zh-CN.js)\n\nOtherwise, the locale *definition* must include the following properties:\n\n* `dateTime` - the date and time (`%c`) format specifier (<i>e.g.</i>, `\"%a %b %e %X %Y\"`).\n* `date` - the date (`%x`) format specifier (<i>e.g.</i>, `\"%m/%d/%Y\"`).\n* `time` - the time (`%X`) format specifier (<i>e.g.</i>, `\"%H:%M:%S\"`).\n* `periods` - the A.M. and P.M. equivalents (<i>e.g.</i>, `[\"AM\", \"PM\"]`).\n* `days` - the full names of the weekdays, starting with Sunday.\n* `shortDays` - the abbreviated names of the weekdays, starting with Sunday.\n* `months` - the full names of the months (starting with January).\n* `shortMonths` - the abbreviated names of the months (starting with January).\n\n## Changes from D3 3.x:\n\n* Exposed built-in locales.\n\n* Removed format.multi.\n\n* Renamed format.utc to utcFormat and format.iso to isoFormat.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/d3/d3-time-format/issues"
  },
  "_id": "d3-time-format@0.1.1",
  "_from": "d3-time-format@latest"
}
