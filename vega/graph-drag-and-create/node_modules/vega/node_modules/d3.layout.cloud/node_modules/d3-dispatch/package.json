{
  "name": "d3-dispatch",
  "version": "0.2.1",
  "description": "Register named callbacks and call them with arguments.",
  "keywords": [
    "d3",
    "event",
    "listener",
    "dispatch"
  ],
  "homepage": "https://github.com/d3/d3-dispatch",
  "license": "BSD-3-Clause",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "main": "build/dispatch",
  "jsnext:main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/d3/d3-dispatch.git"
  },
  "scripts": {
    "pretest": "mkdir -p build && d3-bundler --format=umd --name=dispatch -- index.js > build/dispatch.js",
    "test": "faucet `find test -name '*-test.js'`",
    "prepublish": "npm run test && uglifyjs build/dispatch.js -c -m -o build/dispatch.min.js && rm -f build/dispatch.zip && zip -j build/dispatch.zip -- LICENSE README.md build/dispatch.js build/dispatch.min.js"
  },
  "devDependencies": {
    "d3-bundler": "~0.2.5",
    "faucet": "0.0",
    "tape": "4",
    "uglifyjs": "2"
  },
  "readme": "# d3-dispatch\n\nRegister named callbacks and call them with arguments. Dispatching is a convenient mechanism for separating concerns with loosely-coupled code. A variety of D3 components, such as [d3-xhr](https://github.com/d3/d3-xhr), use d3-dispatch to emit events. Think of this like Node’s [EventEmitter](https://nodejs.org/api/events.html), except every listener has a well-defined name so it’s easy to remove or replace them.\n\n[![dispatching events](http://bl.ocks.org/mbostock/raw/5872848/thumbnail.png)](http://bl.ocks.org/mbostock/5872848)\n\nChanges from D3 3.x:\n\n* It is now an error to attempt to register a callback type that: conflicts with a built-in property on all objects, such as `__proto__` or `hasOwnProperty`; conflicts with a built-in method on dispatch (e.g., `on`);  conflicts with another type on the same dispatch (e.g., `dispatch(\"foo\", \"foo\")`); is the empty string.\n\n* The exposed [*dispatch*.*type*](#type) field is now strictly a method for invoking callbacks. Use `dispatch.on(type, …)` to get or set callbacks, rather than `dispatch[type].on(…)`.\n\n* The `instanceof` operator now works as expected with dispatch objects.\n\n<a name=\"dispatch\" href=\"#dispatch\">#</a> <b>dispatch</b>(<i>types…</i>)\n\nCreates a new dispatch object for the specified *types*. Each *type* is a string representing the name of a callback type, such as `\"zoom\"` or `\"change\"`; for each type, a method is exposed on the returned dispatch object for invoking the callbacks of that type.\n\nFor example, if you create a dispatch for `\"start\"` and `\"end\"` callbacks:\n\n```js\nvar dispatcher = dispatch(\"start\", \"end\");\n```\n\nYou can then register callbacks for the different types using [*dispatch*.on](#on):\n\n```js\ndispatcher.on(\"start\", callback1);\ndispatcher.on(\"start.foo\", callback2);\ndispatcher.on(\"end\", callback3);\n```\n\nLastly, you can invoke any `\"start\"` callbacks using [*dispatch*.*type*](#type):\n\n```js\ndispatcher.start(\"pass arguments to callbacks here\");\n```\n\n<a name=\"on\" href=\"#on\">#</a> *dispatch*.<b>on</b>(<i>type</i>[, <i>callback</i>])\n\nAdds, removes or gets an *callback* of the specified *type*.\n\nThe *type* is a string, such as `\"start\"` or `\"end\"`. To register multiple callbacks for the same type, the type may be followed by an optional namespace, such as `\"start.foo\"` and `\"start.bar\"`. You can remove all registered callbacks for a given namespace by saying `dispatch.on(\".foo\", null)`.\n\nIf a *callback* is specified, it is registered for the specified *type*. If a callback was already registered for the same type, the existing callback is removed before the new callback is added. If *callback* is not specified, returns the current callback for the specified *type*, if any. The specified *callback* is invoked with the context and arguments specified by the caller; see [*dispatch*.*type*](#type).\n\n<a name=\"type\" href=\"#type\">#</a> *dispatch*.<b>*type*</b>(<i>arguments…</i>)\n\nThe *type* method (such as `dispatch.start` for the `\"start\"` type) invokes each registered callback for the specified type, passing the callback the specified *arguments*. The `this` context will be used as the context of the registered callbacks.\n\nFor example, if you wanted to dispatch your `\"custom\"` callbacks after receiving a native `\"click\"` event, while preserving the current `this` context and arguments, you could say:\n\n```js\nselection.on(\"click\", function() {\n  dispatch.custom.apply(this, arguments);\n});\n```\n\nYou can pass whatever arguments you want to callbacks; most commonly, you might create an object that represents an event, or pass the current datum (*d*) and index (*i*). See [function.call](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Call) and [function.apply](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Apply) for further information.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/d3/d3-dispatch/issues"
  },
  "_id": "d3-dispatch@0.2.1",
  "_from": "d3-dispatch@0.2.x"
}
